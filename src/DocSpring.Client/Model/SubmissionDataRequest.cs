/*
 * DocSpring API
 *
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// SubmissionDataRequest
    /// </summary>
    [DataContract(Name = "submission_data_request")]
    public partial class SubmissionDataRequest : IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 2
        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Defines AuthType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthTypeEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Password for value: password
            /// </summary>
            [EnumMember(Value = "password")]
            Password = 2,

            /// <summary>
            /// Enum Oauth for value: oauth
            /// </summary>
            [EnumMember(Value = "oauth")]
            Oauth = 3,

            /// <summary>
            /// Enum EmailLink for value: email_link
            /// </summary>
            [EnumMember(Value = "email_link")]
            EmailLink = 4,

            /// <summary>
            /// Enum PhoneNumber for value: phone_number
            /// </summary>
            [EnumMember(Value = "phone_number")]
            PhoneNumber = 5,

            /// <summary>
            /// Enum Ldap for value: ldap
            /// </summary>
            [EnumMember(Value = "ldap")]
            Ldap = 6,

            /// <summary>
            /// Enum Saml for value: saml
            /// </summary>
            [EnumMember(Value = "saml")]
            Saml = 7
        }


        /// <summary>
        /// Gets or Sets AuthType
        /// </summary>
        [DataMember(Name = "auth_type", IsRequired = true, EmitDefaultValue = true)]
        public AuthTypeEnum AuthType { get; set; }
        /// <summary>
        /// Defines AuthSecondFactorType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthSecondFactorTypeEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum PhoneNumber for value: phone_number
            /// </summary>
            [EnumMember(Value = "phone_number")]
            PhoneNumber = 2,

            /// <summary>
            /// Enum Totp for value: totp
            /// </summary>
            [EnumMember(Value = "totp")]
            Totp = 3,

            /// <summary>
            /// Enum MobilePush for value: mobile_push
            /// </summary>
            [EnumMember(Value = "mobile_push")]
            MobilePush = 4,

            /// <summary>
            /// Enum SecurityKey for value: security_key
            /// </summary>
            [EnumMember(Value = "security_key")]
            SecurityKey = 5,

            /// <summary>
            /// Enum Fingerprint for value: fingerprint
            /// </summary>
            [EnumMember(Value = "fingerprint")]
            Fingerprint = 6
        }


        /// <summary>
        /// Gets or Sets AuthSecondFactorType
        /// </summary>
        [DataMember(Name = "auth_second_factor_type", IsRequired = true, EmitDefaultValue = true)]
        public AuthSecondFactorTypeEnum AuthSecondFactorType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionDataRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubmissionDataRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionDataRequest" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="order">order (required).</param>
        /// <param name="sortOrder">sortOrder (required).</param>
        /// <param name="fields">fields (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="viewedAt">viewedAt (required).</param>
        /// <param name="completedAt">completedAt (required).</param>
        /// <param name="data">data (required).</param>
        /// <param name="authType">authType (required).</param>
        /// <param name="authSecondFactorType">authSecondFactorType (required).</param>
        /// <param name="authProvider">authProvider (required).</param>
        /// <param name="authSessionStartedAt">authSessionStartedAt (required).</param>
        /// <param name="authSessionIdHash">authSessionIdHash (required).</param>
        /// <param name="authUserIdHash">authUserIdHash (required).</param>
        /// <param name="authUsernameHash">authUsernameHash (required).</param>
        /// <param name="authPhoneNumberHash">authPhoneNumberHash (required).</param>
        /// <param name="ipAddress">ipAddress (required).</param>
        /// <param name="userAgent">userAgent (required).</param>
        public SubmissionDataRequest(string id = default(string), string email = default(string), string name = default(string), int? order = default(int?), int sortOrder = default(int), List<string> fields = default(List<string>), Object metadata = default(Object), StateEnum state = default(StateEnum), string viewedAt = default(string), string completedAt = default(string), Object data = default(Object), AuthTypeEnum authType = default(AuthTypeEnum), AuthSecondFactorTypeEnum authSecondFactorType = default(AuthSecondFactorTypeEnum), string authProvider = default(string), string authSessionStartedAt = default(string), string authSessionIdHash = default(string), string authUserIdHash = default(string), string authUsernameHash = default(string), string authPhoneNumberHash = default(string), string ipAddress = default(string), string userAgent = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for SubmissionDataRequest and cannot be null");
            }
            this.Id = id;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for SubmissionDataRequest and cannot be null");
            }
            this.Email = email;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SubmissionDataRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "order" is required (not null)
            if (order == null)
            {
                throw new ArgumentNullException("order is a required property for SubmissionDataRequest and cannot be null");
            }
            this.Order = order;
            this.SortOrder = sortOrder;
            // to ensure "fields" is required (not null)
            if (fields == null)
            {
                throw new ArgumentNullException("fields is a required property for SubmissionDataRequest and cannot be null");
            }
            this.Fields = fields;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for SubmissionDataRequest and cannot be null");
            }
            this.Metadata = metadata;
            this.State = state;
            // to ensure "viewedAt" is required (not null)
            if (viewedAt == null)
            {
                throw new ArgumentNullException("viewedAt is a required property for SubmissionDataRequest and cannot be null");
            }
            this.ViewedAt = viewedAt;
            // to ensure "completedAt" is required (not null)
            if (completedAt == null)
            {
                throw new ArgumentNullException("completedAt is a required property for SubmissionDataRequest and cannot be null");
            }
            this.CompletedAt = completedAt;
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for SubmissionDataRequest and cannot be null");
            }
            this.Data = data;
            this.AuthType = authType;
            this.AuthSecondFactorType = authSecondFactorType;
            // to ensure "authProvider" is required (not null)
            if (authProvider == null)
            {
                throw new ArgumentNullException("authProvider is a required property for SubmissionDataRequest and cannot be null");
            }
            this.AuthProvider = authProvider;
            // to ensure "authSessionStartedAt" is required (not null)
            if (authSessionStartedAt == null)
            {
                throw new ArgumentNullException("authSessionStartedAt is a required property for SubmissionDataRequest and cannot be null");
            }
            this.AuthSessionStartedAt = authSessionStartedAt;
            // to ensure "authSessionIdHash" is required (not null)
            if (authSessionIdHash == null)
            {
                throw new ArgumentNullException("authSessionIdHash is a required property for SubmissionDataRequest and cannot be null");
            }
            this.AuthSessionIdHash = authSessionIdHash;
            // to ensure "authUserIdHash" is required (not null)
            if (authUserIdHash == null)
            {
                throw new ArgumentNullException("authUserIdHash is a required property for SubmissionDataRequest and cannot be null");
            }
            this.AuthUserIdHash = authUserIdHash;
            // to ensure "authUsernameHash" is required (not null)
            if (authUsernameHash == null)
            {
                throw new ArgumentNullException("authUsernameHash is a required property for SubmissionDataRequest and cannot be null");
            }
            this.AuthUsernameHash = authUsernameHash;
            // to ensure "authPhoneNumberHash" is required (not null)
            if (authPhoneNumberHash == null)
            {
                throw new ArgumentNullException("authPhoneNumberHash is a required property for SubmissionDataRequest and cannot be null");
            }
            this.AuthPhoneNumberHash = authPhoneNumberHash;
            // to ensure "ipAddress" is required (not null)
            if (ipAddress == null)
            {
                throw new ArgumentNullException("ipAddress is a required property for SubmissionDataRequest and cannot be null");
            }
            this.IpAddress = ipAddress;
            // to ensure "userAgent" is required (not null)
            if (userAgent == null)
            {
                throw new ArgumentNullException("userAgent is a required property for SubmissionDataRequest and cannot be null");
            }
            this.UserAgent = userAgent;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", IsRequired = true, EmitDefaultValue = true)]
        public int? Order { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name = "sort_order", IsRequired = true, EmitDefaultValue = true)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets ViewedAt
        /// </summary>
        [DataMember(Name = "viewed_at", IsRequired = true, EmitDefaultValue = true)]
        public string ViewedAt { get; set; }

        /// <summary>
        /// Gets or Sets CompletedAt
        /// </summary>
        [DataMember(Name = "completed_at", IsRequired = true, EmitDefaultValue = true)]
        public string CompletedAt { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public Object Data { get; set; }

        /// <summary>
        /// Gets or Sets AuthProvider
        /// </summary>
        [DataMember(Name = "auth_provider", IsRequired = true, EmitDefaultValue = true)]
        public string AuthProvider { get; set; }

        /// <summary>
        /// Gets or Sets AuthSessionStartedAt
        /// </summary>
        [DataMember(Name = "auth_session_started_at", IsRequired = true, EmitDefaultValue = true)]
        public string AuthSessionStartedAt { get; set; }

        /// <summary>
        /// Gets or Sets AuthSessionIdHash
        /// </summary>
        [DataMember(Name = "auth_session_id_hash", IsRequired = true, EmitDefaultValue = true)]
        public string AuthSessionIdHash { get; set; }

        /// <summary>
        /// Gets or Sets AuthUserIdHash
        /// </summary>
        [DataMember(Name = "auth_user_id_hash", IsRequired = true, EmitDefaultValue = true)]
        public string AuthUserIdHash { get; set; }

        /// <summary>
        /// Gets or Sets AuthUsernameHash
        /// </summary>
        [DataMember(Name = "auth_username_hash", IsRequired = true, EmitDefaultValue = true)]
        public string AuthUsernameHash { get; set; }

        /// <summary>
        /// Gets or Sets AuthPhoneNumberHash
        /// </summary>
        [DataMember(Name = "auth_phone_number_hash", IsRequired = true, EmitDefaultValue = true)]
        public string AuthPhoneNumberHash { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name = "ip_address", IsRequired = true, EmitDefaultValue = true)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name = "user_agent", IsRequired = true, EmitDefaultValue = true)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmissionDataRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ViewedAt: ").Append(ViewedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  AuthSecondFactorType: ").Append(AuthSecondFactorType).Append("\n");
            sb.Append("  AuthProvider: ").Append(AuthProvider).Append("\n");
            sb.Append("  AuthSessionStartedAt: ").Append(AuthSessionStartedAt).Append("\n");
            sb.Append("  AuthSessionIdHash: ").Append(AuthSessionIdHash).Append("\n");
            sb.Append("  AuthUserIdHash: ").Append(AuthUserIdHash).Append("\n");
            sb.Append("  AuthUsernameHash: ").Append(AuthUsernameHash).Append("\n");
            sb.Append("  AuthPhoneNumberHash: ").Append(AuthPhoneNumberHash).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
