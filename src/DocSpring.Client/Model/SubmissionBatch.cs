/*
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// SubmissionBatch
    /// </summary>
    [DataContract(Name = "submission_batch")]
    public partial class SubmissionBatch : IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 2,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 3
        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionBatch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubmissionBatch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionBatch" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="totalCount">totalCount (required).</param>
        /// <param name="pendingCount">pendingCount (required).</param>
        /// <param name="errorCount">errorCount (required).</param>
        /// <param name="completionPercentage">completionPercentage (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="processedAt">processedAt (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="submissions">submissions.</param>
        public SubmissionBatch(string id = default(string), int totalCount = default(int), int pendingCount = default(int), int errorCount = default(int), int completionPercentage = default(int), StateEnum state = default(StateEnum), string processedAt = default(string), Object metadata = default(Object), List<Submission> submissions = default(List<Submission>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for SubmissionBatch and cannot be null");
            }
            this.Id = id;
            this.TotalCount = totalCount;
            this.PendingCount = pendingCount;
            this.ErrorCount = errorCount;
            this.CompletionPercentage = completionPercentage;
            this.State = state;
            // to ensure "processedAt" is required (not null)
            if (processedAt == null)
            {
                throw new ArgumentNullException("processedAt is a required property for SubmissionBatch and cannot be null");
            }
            this.ProcessedAt = processedAt;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for SubmissionBatch and cannot be null");
            }
            this.Metadata = metadata;
            this.Submissions = submissions;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        [DataMember(Name = "total_count", IsRequired = true, EmitDefaultValue = true)]
        public int TotalCount { get; set; }

        /// <summary>
        /// Gets or Sets PendingCount
        /// </summary>
        [DataMember(Name = "pending_count", IsRequired = true, EmitDefaultValue = true)]
        public int PendingCount { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCount
        /// </summary>
        [DataMember(Name = "error_count", IsRequired = true, EmitDefaultValue = true)]
        public int ErrorCount { get; set; }

        /// <summary>
        /// Gets or Sets CompletionPercentage
        /// </summary>
        [DataMember(Name = "completion_percentage", IsRequired = true, EmitDefaultValue = true)]
        public int CompletionPercentage { get; set; }

        /// <summary>
        /// Gets or Sets ProcessedAt
        /// </summary>
        [DataMember(Name = "processed_at", IsRequired = true, EmitDefaultValue = true)]
        public string ProcessedAt { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Submissions
        /// </summary>
        [DataMember(Name = "submissions", EmitDefaultValue = false)]
        public List<Submission> Submissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmissionBatch {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  PendingCount: ").Append(PendingCount).Append("\n");
            sb.Append("  ErrorCount: ").Append(ErrorCount).Append("\n");
            sb.Append("  CompletionPercentage: ").Append(CompletionPercentage).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ProcessedAt: ").Append(ProcessedAt).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Submissions: ").Append(Submissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
