/*
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// CreateSubmissionDataRequestData
    /// </summary>
    [DataContract(Name = "create_submission_data_request_data")]
    public partial class CreateSubmissionDataRequestData : IValidatableObject
    {
        /// <summary>
        /// Defines AuthSecondFactorType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthSecondFactorTypeEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum PhoneNumber for value: phone_number
            /// </summary>
            [EnumMember(Value = "phone_number")]
            PhoneNumber = 2,

            /// <summary>
            /// Enum Totp for value: totp
            /// </summary>
            [EnumMember(Value = "totp")]
            Totp = 3,

            /// <summary>
            /// Enum MobilePush for value: mobile_push
            /// </summary>
            [EnumMember(Value = "mobile_push")]
            MobilePush = 4,

            /// <summary>
            /// Enum SecurityKey for value: security_key
            /// </summary>
            [EnumMember(Value = "security_key")]
            SecurityKey = 5,

            /// <summary>
            /// Enum Fingerprint for value: fingerprint
            /// </summary>
            [EnumMember(Value = "fingerprint")]
            Fingerprint = 6
        }


        /// <summary>
        /// Gets or Sets AuthSecondFactorType
        /// </summary>
        [DataMember(Name = "auth_second_factor_type", EmitDefaultValue = false)]
        public AuthSecondFactorTypeEnum? AuthSecondFactorType { get; set; }
        /// <summary>
        /// Defines AuthType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthTypeEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Password for value: password
            /// </summary>
            [EnumMember(Value = "password")]
            Password = 2,

            /// <summary>
            /// Enum Oauth for value: oauth
            /// </summary>
            [EnumMember(Value = "oauth")]
            Oauth = 3,

            /// <summary>
            /// Enum EmailLink for value: email_link
            /// </summary>
            [EnumMember(Value = "email_link")]
            EmailLink = 4,

            /// <summary>
            /// Enum PhoneNumber for value: phone_number
            /// </summary>
            [EnumMember(Value = "phone_number")]
            PhoneNumber = 5,

            /// <summary>
            /// Enum Ldap for value: ldap
            /// </summary>
            [EnumMember(Value = "ldap")]
            Ldap = 6,

            /// <summary>
            /// Enum Saml for value: saml
            /// </summary>
            [EnumMember(Value = "saml")]
            Saml = 7
        }


        /// <summary>
        /// Gets or Sets AuthType
        /// </summary>
        [DataMember(Name = "auth_type", IsRequired = true, EmitDefaultValue = true)]
        public AuthTypeEnum AuthType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubmissionDataRequestData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSubmissionDataRequestData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubmissionDataRequestData" /> class.
        /// </summary>
        /// <param name="authPhoneNumberHash">authPhoneNumberHash.</param>
        /// <param name="authProvider">authProvider.</param>
        /// <param name="authSecondFactorType">authSecondFactorType.</param>
        /// <param name="authSessionIdHash">authSessionIdHash.</param>
        /// <param name="authSessionStartedAt">authSessionStartedAt.</param>
        /// <param name="authType">authType (required).</param>
        /// <param name="authUserIdHash">authUserIdHash.</param>
        /// <param name="authUsernameHash">authUsernameHash.</param>
        /// <param name="email">email (required).</param>
        /// <param name="fields">fields.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="name">name.</param>
        /// <param name="order">order.</param>
        public CreateSubmissionDataRequestData(string authPhoneNumberHash = default(string), string authProvider = default(string), AuthSecondFactorTypeEnum? authSecondFactorType = default(AuthSecondFactorTypeEnum?), string authSessionIdHash = default(string), string authSessionStartedAt = default(string), AuthTypeEnum authType = default(AuthTypeEnum), string authUserIdHash = default(string), string authUsernameHash = default(string), string email = default(string), List<string> fields = default(List<string>), Object metadata = default(Object), string name = default(string), int order = default(int))
        {
            this.AuthType = authType;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for CreateSubmissionDataRequestData and cannot be null");
            }
            this.Email = email;
            this.AuthPhoneNumberHash = authPhoneNumberHash;
            this.AuthProvider = authProvider;
            this.AuthSecondFactorType = authSecondFactorType;
            this.AuthSessionIdHash = authSessionIdHash;
            this.AuthSessionStartedAt = authSessionStartedAt;
            this.AuthUserIdHash = authUserIdHash;
            this.AuthUsernameHash = authUsernameHash;
            this.Fields = fields;
            this.Metadata = metadata;
            this.Name = name;
            this.Order = order;
        }

        /// <summary>
        /// Gets or Sets AuthPhoneNumberHash
        /// </summary>
        [DataMember(Name = "auth_phone_number_hash", EmitDefaultValue = true)]
        public string AuthPhoneNumberHash { get; set; }

        /// <summary>
        /// Gets or Sets AuthProvider
        /// </summary>
        [DataMember(Name = "auth_provider", EmitDefaultValue = true)]
        public string AuthProvider { get; set; }

        /// <summary>
        /// Gets or Sets AuthSessionIdHash
        /// </summary>
        [DataMember(Name = "auth_session_id_hash", EmitDefaultValue = true)]
        public string AuthSessionIdHash { get; set; }

        /// <summary>
        /// Gets or Sets AuthSessionStartedAt
        /// </summary>
        [DataMember(Name = "auth_session_started_at", EmitDefaultValue = true)]
        public string AuthSessionStartedAt { get; set; }

        /// <summary>
        /// Gets or Sets AuthUserIdHash
        /// </summary>
        [DataMember(Name = "auth_user_id_hash", EmitDefaultValue = true)]
        public string AuthUserIdHash { get; set; }

        /// <summary>
        /// Gets or Sets AuthUsernameHash
        /// </summary>
        [DataMember(Name = "auth_username_hash", EmitDefaultValue = true)]
        public string AuthUsernameHash { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = true)]
        public List<string> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public int Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSubmissionDataRequestData {\n");
            sb.Append("  AuthPhoneNumberHash: ").Append(AuthPhoneNumberHash).Append("\n");
            sb.Append("  AuthProvider: ").Append(AuthProvider).Append("\n");
            sb.Append("  AuthSecondFactorType: ").Append(AuthSecondFactorType).Append("\n");
            sb.Append("  AuthSessionIdHash: ").Append(AuthSessionIdHash).Append("\n");
            sb.Append("  AuthSessionStartedAt: ").Append(AuthSessionStartedAt).Append("\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  AuthUserIdHash: ").Append(AuthUserIdHash).Append("\n");
            sb.Append("  AuthUsernameHash: ").Append(AuthUsernameHash).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
