/*
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// SubmissionDataBatchRequest
    /// </summary>
    [DataContract(Name = "submission_data_batch_request")]
    public partial class SubmissionDataBatchRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionDataBatchRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubmissionDataBatchRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionDataBatchRequest" /> class.
        /// </summary>
        /// <param name="css">css.</param>
        /// <param name="data">data (required).</param>
        /// <param name="html">html.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="templateId">templateId (required).</param>
        /// <param name="templateVersion">templateVersion.</param>
        /// <param name="test">test.</param>
        public SubmissionDataBatchRequest(string css = default(string), Object data = default(Object), string html = default(string), Object metadata = default(Object), string templateId = default(string), string templateVersion = default(string), bool test = default(bool))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for SubmissionDataBatchRequest and cannot be null");
            }
            this.Data = data;
            // to ensure "templateId" is required (not null)
            if (templateId == null)
            {
                throw new ArgumentNullException("templateId is a required property for SubmissionDataBatchRequest and cannot be null");
            }
            this.TemplateId = templateId;
            this.Css = css;
            this.Html = html;
            this.Metadata = metadata;
            this.TemplateVersion = templateVersion;
            this.Test = test;
        }

        /// <summary>
        /// Gets or Sets Css
        /// </summary>
        [DataMember(Name = "css", EmitDefaultValue = false)]
        public string Css { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public Object Data { get; set; }

        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [DataMember(Name = "html", EmitDefaultValue = false)]
        public string Html { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [DataMember(Name = "template_id", IsRequired = true, EmitDefaultValue = true)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Gets or Sets TemplateVersion
        /// </summary>
        [DataMember(Name = "template_version", EmitDefaultValue = true)]
        public string TemplateVersion { get; set; }

        /// <summary>
        /// Gets or Sets Test
        /// </summary>
        [DataMember(Name = "test", EmitDefaultValue = true)]
        public bool Test { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmissionDataBatchRequest {\n");
            sb.Append("  Css: ").Append(Css).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  TemplateVersion: ").Append(TemplateVersion).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
