/* 
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// SubmissionData
    /// </summary>
    [DataContract]
    public partial class SubmissionData :  IEquatable<SubmissionData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubmissionData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionData" /> class.
        /// </summary>
        /// <param name="css">css.</param>
        /// <param name="data">data (required).</param>
        /// <param name="dataRequests">dataRequests.</param>
        /// <param name="fieldOverrides">fieldOverrides.</param>
        /// <param name="html">html.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="password">password.</param>
        /// <param name="test">test.</param>
        public SubmissionData(string css = default(string), Object data = default(Object), List<CreateSubmissionDataRequestData> dataRequests = default(List<CreateSubmissionDataRequestData>), Object fieldOverrides = default(Object), string html = default(string), Object metadata = default(Object), string password = default(string), bool? test = default(bool?))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for SubmissionData and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            this.Css = css;
            this.DataRequests = dataRequests;
            this.FieldOverrides = fieldOverrides;
            this.Html = html;
            this.Metadata = metadata;
            this.Password = password;
            this.Test = test;
        }
        
        /// <summary>
        /// Gets or Sets Css
        /// </summary>
        [DataMember(Name="css", EmitDefaultValue=false)]
        public string Css { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public Object Data { get; set; }

        /// <summary>
        /// Gets or Sets DataRequests
        /// </summary>
        [DataMember(Name="data_requests", EmitDefaultValue=false)]
        public List<CreateSubmissionDataRequestData> DataRequests { get; set; }

        /// <summary>
        /// Gets or Sets FieldOverrides
        /// </summary>
        [DataMember(Name="field_overrides", EmitDefaultValue=false)]
        public Object FieldOverrides { get; set; }

        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [DataMember(Name="html", EmitDefaultValue=false)]
        public string Html { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Test
        /// </summary>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public bool? Test { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubmissionData {\n");
            sb.Append("  Css: ").Append(Css).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DataRequests: ").Append(DataRequests).Append("\n");
            sb.Append("  FieldOverrides: ").Append(FieldOverrides).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubmissionData);
        }

        /// <summary>
        /// Returns true if SubmissionData instances are equal
        /// </summary>
        /// <param name="input">Instance of SubmissionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmissionData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Css == input.Css ||
                    (this.Css != null &&
                    this.Css.Equals(input.Css))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.DataRequests == input.DataRequests ||
                    this.DataRequests != null &&
                    this.DataRequests.SequenceEqual(input.DataRequests)
                ) && 
                (
                    this.FieldOverrides == input.FieldOverrides ||
                    (this.FieldOverrides != null &&
                    this.FieldOverrides.Equals(input.FieldOverrides))
                ) && 
                (
                    this.Html == input.Html ||
                    (this.Html != null &&
                    this.Html.Equals(input.Html))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Test == input.Test ||
                    (this.Test != null &&
                    this.Test.Equals(input.Test))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Css != null)
                    hashCode = hashCode * 59 + this.Css.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.DataRequests != null)
                    hashCode = hashCode * 59 + this.DataRequests.GetHashCode();
                if (this.FieldOverrides != null)
                    hashCode = hashCode * 59 + this.FieldOverrides.GetHashCode();
                if (this.Html != null)
                    hashCode = hashCode * 59 + this.Html.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Test != null)
                    hashCode = hashCode * 59 + this.Test.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
