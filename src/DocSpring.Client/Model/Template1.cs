/* 
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// Template1
    /// </summary>
    [DataContract]
    public partial class Template1 :  IEquatable<Template1>, IValidatableObject
    {
        /// <summary>
        /// Defines ExpirationInterval
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExpirationIntervalEnum
        {
            /// <summary>
            /// Enum Minutes for value: minutes
            /// </summary>
            [EnumMember(Value = "minutes")]
            Minutes = 1,

            /// <summary>
            /// Enum Hours for value: hours
            /// </summary>
            [EnumMember(Value = "hours")]
            Hours = 2,

            /// <summary>
            /// Enum Days for value: days
            /// </summary>
            [EnumMember(Value = "days")]
            Days = 3

        }

        /// <summary>
        /// Gets or Sets ExpirationInterval
        /// </summary>
        [DataMember(Name="expiration_interval", EmitDefaultValue=false)]
        public ExpirationIntervalEnum? ExpirationInterval { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Template1" /> class.
        /// </summary>
        /// <param name="documentProcessed">documentProcessed.</param>
        /// <param name="expirationInterval">expirationInterval.</param>
        /// <param name="scss">scss.</param>
        /// <param name="documentState">documentState.</param>
        /// <param name="expireAfter">expireAfter.</param>
        /// <param name="description">description.</param>
        /// <param name="slackWebhookUrl">slackWebhookUrl.</param>
        /// <param name="demo">demo.</param>
        /// <param name="path">path.</param>
        /// <param name="headerHtml">headerHtml.</param>
        /// <param name="publicWebForm">publicWebForm.</param>
        /// <param name="fieldOrder">fieldOrder.</param>
        /// <param name="permanentDocumentUrl">permanentDocumentUrl.</param>
        /// <param name="html">html.</param>
        /// <param name="templateType">templateType.</param>
        /// <param name="id">id.</param>
        /// <param name="pageDimensions">pageDimensions.</param>
        /// <param name="locked">locked.</param>
        /// <param name="pageCount">pageCount.</param>
        /// <param name="encryptPdfs">encryptPdfs.</param>
        /// <param name="webhookUrl">webhookUrl.</param>
        /// <param name="embedDomains">embedDomains.</param>
        /// <param name="parentFolderId">parentFolderId.</param>
        /// <param name="allowAdditionalProperties">allowAdditionalProperties.</param>
        /// <param name="encryptPdfsPassword">encryptPdfsPassword.</param>
        /// <param name="publicSubmissions">publicSubmissions.</param>
        /// <param name="sharedFieldData">sharedFieldData.</param>
        /// <param name="documentMd5">documentMd5.</param>
        /// <param name="firstTemplate">firstTemplate.</param>
        /// <param name="defaults">defaults.</param>
        /// <param name="editableSubmissions">editableSubmissions.</param>
        /// <param name="expireSubmissions">expireSubmissions.</param>
        /// <param name="name">name.</param>
        /// <param name="footerHtml">footerHtml.</param>
        /// <param name="documentParseError">documentParseError.</param>
        /// <param name="fields">fields.</param>
        /// <param name="documentFilename">documentFilename.</param>
        /// <param name="redirectUrl">redirectUrl.</param>
        /// <param name="documentUrl">documentUrl.</param>
        public Template1(bool? documentProcessed = default(bool?), ExpirationIntervalEnum? expirationInterval = default(ExpirationIntervalEnum?), string scss = default(string), string documentState = default(string), decimal? expireAfter = default(decimal?), string description = default(string), string slackWebhookUrl = default(string), bool? demo = default(bool?), string path = default(string), string headerHtml = default(string), bool? publicWebForm = default(bool?), List<List<decimal?>> fieldOrder = default(List<List<decimal?>>), string permanentDocumentUrl = default(string), string html = default(string), string templateType = default(string), string id = default(string), List<List<decimal?>> pageDimensions = default(List<List<decimal?>>), bool? locked = default(bool?), decimal? pageCount = default(decimal?), bool? encryptPdfs = default(bool?), string webhookUrl = default(string), List<string> embedDomains = default(List<string>), string parentFolderId = default(string), bool? allowAdditionalProperties = default(bool?), string encryptPdfsPassword = default(string), bool? publicSubmissions = default(bool?), Object sharedFieldData = default(Object), string documentMd5 = default(string), bool? firstTemplate = default(bool?), Template1Defaults defaults = default(Template1Defaults), bool? editableSubmissions = default(bool?), bool? expireSubmissions = default(bool?), string name = default(string), string footerHtml = default(string), bool? documentParseError = default(bool?), Object fields = default(Object), string documentFilename = default(string), string redirectUrl = default(string), string documentUrl = default(string))
        {
            this.DocumentProcessed = documentProcessed;
            this.ExpirationInterval = expirationInterval;
            this.Scss = scss;
            this.DocumentState = documentState;
            this.ExpireAfter = expireAfter;
            this.Description = description;
            this.SlackWebhookUrl = slackWebhookUrl;
            this.Demo = demo;
            this.Path = path;
            this.HeaderHtml = headerHtml;
            this.PublicWebForm = publicWebForm;
            this.FieldOrder = fieldOrder;
            this.PermanentDocumentUrl = permanentDocumentUrl;
            this.Html = html;
            this.TemplateType = templateType;
            this.Id = id;
            this.PageDimensions = pageDimensions;
            this.Locked = locked;
            this.PageCount = pageCount;
            this.EncryptPdfs = encryptPdfs;
            this.WebhookUrl = webhookUrl;
            this.EmbedDomains = embedDomains;
            this.ParentFolderId = parentFolderId;
            this.AllowAdditionalProperties = allowAdditionalProperties;
            this.EncryptPdfsPassword = encryptPdfsPassword;
            this.PublicSubmissions = publicSubmissions;
            this.SharedFieldData = sharedFieldData;
            this.DocumentMd5 = documentMd5;
            this.FirstTemplate = firstTemplate;
            this.Defaults = defaults;
            this.EditableSubmissions = editableSubmissions;
            this.ExpireSubmissions = expireSubmissions;
            this.Name = name;
            this.FooterHtml = footerHtml;
            this.DocumentParseError = documentParseError;
            this.Fields = fields;
            this.DocumentFilename = documentFilename;
            this.RedirectUrl = redirectUrl;
            this.DocumentUrl = documentUrl;
        }
        
        /// <summary>
        /// Gets or Sets DocumentProcessed
        /// </summary>
        [DataMember(Name="document_processed", EmitDefaultValue=false)]
        public bool? DocumentProcessed { get; set; }


        /// <summary>
        /// Gets or Sets Scss
        /// </summary>
        [DataMember(Name="scss", EmitDefaultValue=false)]
        public string Scss { get; set; }

        /// <summary>
        /// Gets or Sets DocumentState
        /// </summary>
        [DataMember(Name="document_state", EmitDefaultValue=false)]
        public string DocumentState { get; set; }

        /// <summary>
        /// Gets or Sets ExpireAfter
        /// </summary>
        [DataMember(Name="expire_after", EmitDefaultValue=false)]
        public decimal? ExpireAfter { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets SlackWebhookUrl
        /// </summary>
        [DataMember(Name="slack_webhook_url", EmitDefaultValue=false)]
        public string SlackWebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets Demo
        /// </summary>
        [DataMember(Name="demo", EmitDefaultValue=false)]
        public bool? Demo { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets HeaderHtml
        /// </summary>
        [DataMember(Name="header_html", EmitDefaultValue=false)]
        public string HeaderHtml { get; set; }

        /// <summary>
        /// Gets or Sets PublicWebForm
        /// </summary>
        [DataMember(Name="public_web_form", EmitDefaultValue=false)]
        public bool? PublicWebForm { get; set; }

        /// <summary>
        /// Gets or Sets FieldOrder
        /// </summary>
        [DataMember(Name="field_order", EmitDefaultValue=false)]
        public List<List<decimal?>> FieldOrder { get; set; }

        /// <summary>
        /// Gets or Sets PermanentDocumentUrl
        /// </summary>
        [DataMember(Name="permanent_document_url", EmitDefaultValue=false)]
        public string PermanentDocumentUrl { get; set; }

        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [DataMember(Name="html", EmitDefaultValue=false)]
        public string Html { get; set; }

        /// <summary>
        /// Gets or Sets TemplateType
        /// </summary>
        [DataMember(Name="template_type", EmitDefaultValue=false)]
        public string TemplateType { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PageDimensions
        /// </summary>
        [DataMember(Name="page_dimensions", EmitDefaultValue=false)]
        public List<List<decimal?>> PageDimensions { get; set; }

        /// <summary>
        /// Gets or Sets Locked
        /// </summary>
        [DataMember(Name="locked", EmitDefaultValue=false)]
        public bool? Locked { get; set; }

        /// <summary>
        /// Gets or Sets PageCount
        /// </summary>
        [DataMember(Name="page_count", EmitDefaultValue=false)]
        public decimal? PageCount { get; set; }

        /// <summary>
        /// Gets or Sets EncryptPdfs
        /// </summary>
        [DataMember(Name="encrypt_pdfs", EmitDefaultValue=false)]
        public bool? EncryptPdfs { get; set; }

        /// <summary>
        /// Gets or Sets WebhookUrl
        /// </summary>
        [DataMember(Name="webhook_url", EmitDefaultValue=false)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets EmbedDomains
        /// </summary>
        [DataMember(Name="embed_domains", EmitDefaultValue=false)]
        public List<string> EmbedDomains { get; set; }

        /// <summary>
        /// Gets or Sets ParentFolderId
        /// </summary>
        [DataMember(Name="parent_folder_id", EmitDefaultValue=false)]
        public string ParentFolderId { get; set; }

        /// <summary>
        /// Gets or Sets AllowAdditionalProperties
        /// </summary>
        [DataMember(Name="allow_additional_properties", EmitDefaultValue=false)]
        public bool? AllowAdditionalProperties { get; set; }

        /// <summary>
        /// Gets or Sets EncryptPdfsPassword
        /// </summary>
        [DataMember(Name="encrypt_pdfs_password", EmitDefaultValue=false)]
        public string EncryptPdfsPassword { get; set; }

        /// <summary>
        /// Gets or Sets PublicSubmissions
        /// </summary>
        [DataMember(Name="public_submissions", EmitDefaultValue=false)]
        public bool? PublicSubmissions { get; set; }

        /// <summary>
        /// Gets or Sets SharedFieldData
        /// </summary>
        [DataMember(Name="shared_field_data", EmitDefaultValue=false)]
        public Object SharedFieldData { get; set; }

        /// <summary>
        /// Gets or Sets DocumentMd5
        /// </summary>
        [DataMember(Name="document_md5", EmitDefaultValue=false)]
        public string DocumentMd5 { get; set; }

        /// <summary>
        /// Gets or Sets FirstTemplate
        /// </summary>
        [DataMember(Name="first_template", EmitDefaultValue=false)]
        public bool? FirstTemplate { get; set; }

        /// <summary>
        /// Gets or Sets Defaults
        /// </summary>
        [DataMember(Name="defaults", EmitDefaultValue=false)]
        public Template1Defaults Defaults { get; set; }

        /// <summary>
        /// Gets or Sets EditableSubmissions
        /// </summary>
        [DataMember(Name="editable_submissions", EmitDefaultValue=false)]
        public bool? EditableSubmissions { get; set; }

        /// <summary>
        /// Gets or Sets ExpireSubmissions
        /// </summary>
        [DataMember(Name="expire_submissions", EmitDefaultValue=false)]
        public bool? ExpireSubmissions { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FooterHtml
        /// </summary>
        [DataMember(Name="footer_html", EmitDefaultValue=false)]
        public string FooterHtml { get; set; }

        /// <summary>
        /// Gets or Sets DocumentParseError
        /// </summary>
        [DataMember(Name="document_parse_error", EmitDefaultValue=false)]
        public bool? DocumentParseError { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public Object Fields { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFilename
        /// </summary>
        [DataMember(Name="document_filename", EmitDefaultValue=false)]
        public string DocumentFilename { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUrl
        /// </summary>
        [DataMember(Name="redirect_url", EmitDefaultValue=false)]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// Gets or Sets DocumentUrl
        /// </summary>
        [DataMember(Name="document_url", EmitDefaultValue=false)]
        public string DocumentUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Template1 {\n");
            sb.Append("  DocumentProcessed: ").Append(DocumentProcessed).Append("\n");
            sb.Append("  ExpirationInterval: ").Append(ExpirationInterval).Append("\n");
            sb.Append("  Scss: ").Append(Scss).Append("\n");
            sb.Append("  DocumentState: ").Append(DocumentState).Append("\n");
            sb.Append("  ExpireAfter: ").Append(ExpireAfter).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SlackWebhookUrl: ").Append(SlackWebhookUrl).Append("\n");
            sb.Append("  Demo: ").Append(Demo).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  HeaderHtml: ").Append(HeaderHtml).Append("\n");
            sb.Append("  PublicWebForm: ").Append(PublicWebForm).Append("\n");
            sb.Append("  FieldOrder: ").Append(FieldOrder).Append("\n");
            sb.Append("  PermanentDocumentUrl: ").Append(PermanentDocumentUrl).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  TemplateType: ").Append(TemplateType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PageDimensions: ").Append(PageDimensions).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  PageCount: ").Append(PageCount).Append("\n");
            sb.Append("  EncryptPdfs: ").Append(EncryptPdfs).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  EmbedDomains: ").Append(EmbedDomains).Append("\n");
            sb.Append("  ParentFolderId: ").Append(ParentFolderId).Append("\n");
            sb.Append("  AllowAdditionalProperties: ").Append(AllowAdditionalProperties).Append("\n");
            sb.Append("  EncryptPdfsPassword: ").Append(EncryptPdfsPassword).Append("\n");
            sb.Append("  PublicSubmissions: ").Append(PublicSubmissions).Append("\n");
            sb.Append("  SharedFieldData: ").Append(SharedFieldData).Append("\n");
            sb.Append("  DocumentMd5: ").Append(DocumentMd5).Append("\n");
            sb.Append("  FirstTemplate: ").Append(FirstTemplate).Append("\n");
            sb.Append("  Defaults: ").Append(Defaults).Append("\n");
            sb.Append("  EditableSubmissions: ").Append(EditableSubmissions).Append("\n");
            sb.Append("  ExpireSubmissions: ").Append(ExpireSubmissions).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FooterHtml: ").Append(FooterHtml).Append("\n");
            sb.Append("  DocumentParseError: ").Append(DocumentParseError).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  DocumentFilename: ").Append(DocumentFilename).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("  DocumentUrl: ").Append(DocumentUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Template1);
        }

        /// <summary>
        /// Returns true if Template1 instances are equal
        /// </summary>
        /// <param name="input">Instance of Template1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Template1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentProcessed == input.DocumentProcessed ||
                    (this.DocumentProcessed != null &&
                    this.DocumentProcessed.Equals(input.DocumentProcessed))
                ) && 
                (
                    this.ExpirationInterval == input.ExpirationInterval ||
                    (this.ExpirationInterval != null &&
                    this.ExpirationInterval.Equals(input.ExpirationInterval))
                ) && 
                (
                    this.Scss == input.Scss ||
                    (this.Scss != null &&
                    this.Scss.Equals(input.Scss))
                ) && 
                (
                    this.DocumentState == input.DocumentState ||
                    (this.DocumentState != null &&
                    this.DocumentState.Equals(input.DocumentState))
                ) && 
                (
                    this.ExpireAfter == input.ExpireAfter ||
                    (this.ExpireAfter != null &&
                    this.ExpireAfter.Equals(input.ExpireAfter))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SlackWebhookUrl == input.SlackWebhookUrl ||
                    (this.SlackWebhookUrl != null &&
                    this.SlackWebhookUrl.Equals(input.SlackWebhookUrl))
                ) && 
                (
                    this.Demo == input.Demo ||
                    (this.Demo != null &&
                    this.Demo.Equals(input.Demo))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.HeaderHtml == input.HeaderHtml ||
                    (this.HeaderHtml != null &&
                    this.HeaderHtml.Equals(input.HeaderHtml))
                ) && 
                (
                    this.PublicWebForm == input.PublicWebForm ||
                    (this.PublicWebForm != null &&
                    this.PublicWebForm.Equals(input.PublicWebForm))
                ) && 
                (
                    this.FieldOrder == input.FieldOrder ||
                    this.FieldOrder != null &&
                    this.FieldOrder.SequenceEqual(input.FieldOrder)
                ) && 
                (
                    this.PermanentDocumentUrl == input.PermanentDocumentUrl ||
                    (this.PermanentDocumentUrl != null &&
                    this.PermanentDocumentUrl.Equals(input.PermanentDocumentUrl))
                ) && 
                (
                    this.Html == input.Html ||
                    (this.Html != null &&
                    this.Html.Equals(input.Html))
                ) && 
                (
                    this.TemplateType == input.TemplateType ||
                    (this.TemplateType != null &&
                    this.TemplateType.Equals(input.TemplateType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PageDimensions == input.PageDimensions ||
                    this.PageDimensions != null &&
                    this.PageDimensions.SequenceEqual(input.PageDimensions)
                ) && 
                (
                    this.Locked == input.Locked ||
                    (this.Locked != null &&
                    this.Locked.Equals(input.Locked))
                ) && 
                (
                    this.PageCount == input.PageCount ||
                    (this.PageCount != null &&
                    this.PageCount.Equals(input.PageCount))
                ) && 
                (
                    this.EncryptPdfs == input.EncryptPdfs ||
                    (this.EncryptPdfs != null &&
                    this.EncryptPdfs.Equals(input.EncryptPdfs))
                ) && 
                (
                    this.WebhookUrl == input.WebhookUrl ||
                    (this.WebhookUrl != null &&
                    this.WebhookUrl.Equals(input.WebhookUrl))
                ) && 
                (
                    this.EmbedDomains == input.EmbedDomains ||
                    this.EmbedDomains != null &&
                    this.EmbedDomains.SequenceEqual(input.EmbedDomains)
                ) && 
                (
                    this.ParentFolderId == input.ParentFolderId ||
                    (this.ParentFolderId != null &&
                    this.ParentFolderId.Equals(input.ParentFolderId))
                ) && 
                (
                    this.AllowAdditionalProperties == input.AllowAdditionalProperties ||
                    (this.AllowAdditionalProperties != null &&
                    this.AllowAdditionalProperties.Equals(input.AllowAdditionalProperties))
                ) && 
                (
                    this.EncryptPdfsPassword == input.EncryptPdfsPassword ||
                    (this.EncryptPdfsPassword != null &&
                    this.EncryptPdfsPassword.Equals(input.EncryptPdfsPassword))
                ) && 
                (
                    this.PublicSubmissions == input.PublicSubmissions ||
                    (this.PublicSubmissions != null &&
                    this.PublicSubmissions.Equals(input.PublicSubmissions))
                ) && 
                (
                    this.SharedFieldData == input.SharedFieldData ||
                    (this.SharedFieldData != null &&
                    this.SharedFieldData.Equals(input.SharedFieldData))
                ) && 
                (
                    this.DocumentMd5 == input.DocumentMd5 ||
                    (this.DocumentMd5 != null &&
                    this.DocumentMd5.Equals(input.DocumentMd5))
                ) && 
                (
                    this.FirstTemplate == input.FirstTemplate ||
                    (this.FirstTemplate != null &&
                    this.FirstTemplate.Equals(input.FirstTemplate))
                ) && 
                (
                    this.Defaults == input.Defaults ||
                    (this.Defaults != null &&
                    this.Defaults.Equals(input.Defaults))
                ) && 
                (
                    this.EditableSubmissions == input.EditableSubmissions ||
                    (this.EditableSubmissions != null &&
                    this.EditableSubmissions.Equals(input.EditableSubmissions))
                ) && 
                (
                    this.ExpireSubmissions == input.ExpireSubmissions ||
                    (this.ExpireSubmissions != null &&
                    this.ExpireSubmissions.Equals(input.ExpireSubmissions))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FooterHtml == input.FooterHtml ||
                    (this.FooterHtml != null &&
                    this.FooterHtml.Equals(input.FooterHtml))
                ) && 
                (
                    this.DocumentParseError == input.DocumentParseError ||
                    (this.DocumentParseError != null &&
                    this.DocumentParseError.Equals(input.DocumentParseError))
                ) && 
                (
                    this.Fields == input.Fields ||
                    (this.Fields != null &&
                    this.Fields.Equals(input.Fields))
                ) && 
                (
                    this.DocumentFilename == input.DocumentFilename ||
                    (this.DocumentFilename != null &&
                    this.DocumentFilename.Equals(input.DocumentFilename))
                ) && 
                (
                    this.RedirectUrl == input.RedirectUrl ||
                    (this.RedirectUrl != null &&
                    this.RedirectUrl.Equals(input.RedirectUrl))
                ) && 
                (
                    this.DocumentUrl == input.DocumentUrl ||
                    (this.DocumentUrl != null &&
                    this.DocumentUrl.Equals(input.DocumentUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentProcessed != null)
                    hashCode = hashCode * 59 + this.DocumentProcessed.GetHashCode();
                if (this.ExpirationInterval != null)
                    hashCode = hashCode * 59 + this.ExpirationInterval.GetHashCode();
                if (this.Scss != null)
                    hashCode = hashCode * 59 + this.Scss.GetHashCode();
                if (this.DocumentState != null)
                    hashCode = hashCode * 59 + this.DocumentState.GetHashCode();
                if (this.ExpireAfter != null)
                    hashCode = hashCode * 59 + this.ExpireAfter.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.SlackWebhookUrl != null)
                    hashCode = hashCode * 59 + this.SlackWebhookUrl.GetHashCode();
                if (this.Demo != null)
                    hashCode = hashCode * 59 + this.Demo.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.HeaderHtml != null)
                    hashCode = hashCode * 59 + this.HeaderHtml.GetHashCode();
                if (this.PublicWebForm != null)
                    hashCode = hashCode * 59 + this.PublicWebForm.GetHashCode();
                if (this.FieldOrder != null)
                    hashCode = hashCode * 59 + this.FieldOrder.GetHashCode();
                if (this.PermanentDocumentUrl != null)
                    hashCode = hashCode * 59 + this.PermanentDocumentUrl.GetHashCode();
                if (this.Html != null)
                    hashCode = hashCode * 59 + this.Html.GetHashCode();
                if (this.TemplateType != null)
                    hashCode = hashCode * 59 + this.TemplateType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PageDimensions != null)
                    hashCode = hashCode * 59 + this.PageDimensions.GetHashCode();
                if (this.Locked != null)
                    hashCode = hashCode * 59 + this.Locked.GetHashCode();
                if (this.PageCount != null)
                    hashCode = hashCode * 59 + this.PageCount.GetHashCode();
                if (this.EncryptPdfs != null)
                    hashCode = hashCode * 59 + this.EncryptPdfs.GetHashCode();
                if (this.WebhookUrl != null)
                    hashCode = hashCode * 59 + this.WebhookUrl.GetHashCode();
                if (this.EmbedDomains != null)
                    hashCode = hashCode * 59 + this.EmbedDomains.GetHashCode();
                if (this.ParentFolderId != null)
                    hashCode = hashCode * 59 + this.ParentFolderId.GetHashCode();
                if (this.AllowAdditionalProperties != null)
                    hashCode = hashCode * 59 + this.AllowAdditionalProperties.GetHashCode();
                if (this.EncryptPdfsPassword != null)
                    hashCode = hashCode * 59 + this.EncryptPdfsPassword.GetHashCode();
                if (this.PublicSubmissions != null)
                    hashCode = hashCode * 59 + this.PublicSubmissions.GetHashCode();
                if (this.SharedFieldData != null)
                    hashCode = hashCode * 59 + this.SharedFieldData.GetHashCode();
                if (this.DocumentMd5 != null)
                    hashCode = hashCode * 59 + this.DocumentMd5.GetHashCode();
                if (this.FirstTemplate != null)
                    hashCode = hashCode * 59 + this.FirstTemplate.GetHashCode();
                if (this.Defaults != null)
                    hashCode = hashCode * 59 + this.Defaults.GetHashCode();
                if (this.EditableSubmissions != null)
                    hashCode = hashCode * 59 + this.EditableSubmissions.GetHashCode();
                if (this.ExpireSubmissions != null)
                    hashCode = hashCode * 59 + this.ExpireSubmissions.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.FooterHtml != null)
                    hashCode = hashCode * 59 + this.FooterHtml.GetHashCode();
                if (this.DocumentParseError != null)
                    hashCode = hashCode * 59 + this.DocumentParseError.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                if (this.DocumentFilename != null)
                    hashCode = hashCode * 59 + this.DocumentFilename.GetHashCode();
                if (this.RedirectUrl != null)
                    hashCode = hashCode * 59 + this.RedirectUrl.GetHashCode();
                if (this.DocumentUrl != null)
                    hashCode = hashCode * 59 + this.DocumentUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
