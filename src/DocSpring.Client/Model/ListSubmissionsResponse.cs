/* 
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// ListSubmissionsResponse
    /// </summary>
    [DataContract]
    public partial class ListSubmissionsResponse :  IEquatable<ListSubmissionsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListSubmissionsResponse" /> class.
        /// </summary>
        /// <param name="nextCursor">nextCursor.</param>
        /// <param name="submissions">submissions.</param>
        /// <param name="limit">limit.</param>
        public ListSubmissionsResponse(string nextCursor = default(string), List<Submission> submissions = default(List<Submission>), decimal? limit = default(decimal?))
        {
            this.NextCursor = nextCursor;
            this.Submissions = submissions;
            this.Limit = limit;
        }
        
        /// <summary>
        /// Gets or Sets NextCursor
        /// </summary>
        [DataMember(Name="next_cursor", EmitDefaultValue=false)]
        public string NextCursor { get; set; }

        /// <summary>
        /// Gets or Sets Submissions
        /// </summary>
        [DataMember(Name="submissions", EmitDefaultValue=false)]
        public List<Submission> Submissions { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public decimal? Limit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListSubmissionsResponse {\n");
            sb.Append("  NextCursor: ").Append(NextCursor).Append("\n");
            sb.Append("  Submissions: ").Append(Submissions).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListSubmissionsResponse);
        }

        /// <summary>
        /// Returns true if ListSubmissionsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ListSubmissionsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListSubmissionsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NextCursor == input.NextCursor ||
                    (this.NextCursor != null &&
                    this.NextCursor.Equals(input.NextCursor))
                ) && 
                (
                    this.Submissions == input.Submissions ||
                    this.Submissions != null &&
                    this.Submissions.SequenceEqual(input.Submissions)
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NextCursor != null)
                    hashCode = hashCode * 59 + this.NextCursor.GetHashCode();
                if (this.Submissions != null)
                    hashCode = hashCode * 59 + this.Submissions.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
