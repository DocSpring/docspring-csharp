/*
 * DocSpring API
 *
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// ListSubmissionsResponse
    /// </summary>
    [DataContract(Name = "list_submissions_response")]
    public partial class ListSubmissionsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListSubmissionsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListSubmissionsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListSubmissionsResponse" /> class.
        /// </summary>
        /// <param name="submissions">submissions (required).</param>
        /// <param name="limit">limit (required).</param>
        /// <param name="nextCursor">nextCursor (required).</param>
        public ListSubmissionsResponse(List<Submission> submissions = default(List<Submission>), decimal limit = default(decimal), string nextCursor = default(string))
        {
            // to ensure "submissions" is required (not null)
            if (submissions == null)
            {
                throw new ArgumentNullException("submissions is a required property for ListSubmissionsResponse and cannot be null");
            }
            this.Submissions = submissions;
            this.Limit = limit;
            // to ensure "nextCursor" is required (not null)
            if (nextCursor == null)
            {
                throw new ArgumentNullException("nextCursor is a required property for ListSubmissionsResponse and cannot be null");
            }
            this.NextCursor = nextCursor;
        }

        /// <summary>
        /// Gets or Sets Submissions
        /// </summary>
        [DataMember(Name = "submissions", IsRequired = true, EmitDefaultValue = true)]
        public List<Submission> Submissions { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", IsRequired = true, EmitDefaultValue = true)]
        public decimal Limit { get; set; }

        /// <summary>
        /// Gets or Sets NextCursor
        /// </summary>
        [DataMember(Name = "next_cursor", IsRequired = true, EmitDefaultValue = true)]
        public string NextCursor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListSubmissionsResponse {\n");
            sb.Append("  Submissions: ").Append(Submissions).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  NextCursor: ").Append(NextCursor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
