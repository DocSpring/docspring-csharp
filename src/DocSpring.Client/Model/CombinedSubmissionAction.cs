/*
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// CombinedSubmissionAction
    /// </summary>
    [DataContract(Name = "combined_submission_action")]
    public partial class CombinedSubmissionAction : IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 2,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 3,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 4
        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Defines ActionCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionCategoryEnum
        {
            /// <summary>
            /// Enum Notification for value: notification
            /// </summary>
            [EnumMember(Value = "notification")]
            Notification = 1,

            /// <summary>
            /// Enum FileUpload for value: file_upload
            /// </summary>
            [EnumMember(Value = "file_upload")]
            FileUpload = 2
        }


        /// <summary>
        /// Gets or Sets ActionCategory
        /// </summary>
        [DataMember(Name = "action_category", IsRequired = true, EmitDefaultValue = true)]
        public ActionCategoryEnum ActionCategory { get; set; }
        /// <summary>
        /// Defines ActionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionTypeEnum
        {
            /// <summary>
            /// Enum Webhook for value: webhook
            /// </summary>
            [EnumMember(Value = "webhook")]
            Webhook = 1,

            /// <summary>
            /// Enum SlackWebhook for value: slack_webhook
            /// </summary>
            [EnumMember(Value = "slack_webhook")]
            SlackWebhook = 2,

            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 3,

            /// <summary>
            /// Enum AwsS3Upload for value: aws_s3_upload
            /// </summary>
            [EnumMember(Value = "aws_s3_upload")]
            AwsS3Upload = 4
        }


        /// <summary>
        /// Gets or Sets ActionType
        /// </summary>
        [DataMember(Name = "action_type", IsRequired = true, EmitDefaultValue = true)]
        public ActionTypeEnum ActionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CombinedSubmissionAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CombinedSubmissionAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CombinedSubmissionAction" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="integrationId">integrationId (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="actionCategory">actionCategory (required).</param>
        /// <param name="actionType">actionType (required).</param>
        /// <param name="resultData">resultData (required).</param>
        public CombinedSubmissionAction(string id = default(string), string integrationId = default(string), StateEnum state = default(StateEnum), ActionCategoryEnum actionCategory = default(ActionCategoryEnum), ActionTypeEnum actionType = default(ActionTypeEnum), Object resultData = default(Object))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CombinedSubmissionAction and cannot be null");
            }
            this.Id = id;
            // to ensure "integrationId" is required (not null)
            if (integrationId == null)
            {
                throw new ArgumentNullException("integrationId is a required property for CombinedSubmissionAction and cannot be null");
            }
            this.IntegrationId = integrationId;
            this.State = state;
            this.ActionCategory = actionCategory;
            this.ActionType = actionType;
            // to ensure "resultData" is required (not null)
            if (resultData == null)
            {
                throw new ArgumentNullException("resultData is a required property for CombinedSubmissionAction and cannot be null");
            }
            this.ResultData = resultData;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationId
        /// </summary>
        [DataMember(Name = "integration_id", IsRequired = true, EmitDefaultValue = true)]
        public string IntegrationId { get; set; }

        /// <summary>
        /// Gets or Sets ResultData
        /// </summary>
        [DataMember(Name = "result_data", IsRequired = true, EmitDefaultValue = true)]
        public Object ResultData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CombinedSubmissionAction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IntegrationId: ").Append(IntegrationId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ActionCategory: ").Append(ActionCategory).Append("\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  ResultData: ").Append(ResultData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
