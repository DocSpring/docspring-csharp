/* 
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// CombinedSubmissionAction
    /// </summary>
    [DataContract]
    public partial class CombinedSubmissionAction :  IEquatable<CombinedSubmissionAction>, IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 2,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 3,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 4

        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Defines ActionCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionCategoryEnum
        {
            /// <summary>
            /// Enum Notification for value: notification
            /// </summary>
            [EnumMember(Value = "notification")]
            Notification = 1,

            /// <summary>
            /// Enum Fileupload for value: file_upload
            /// </summary>
            [EnumMember(Value = "file_upload")]
            Fileupload = 2

        }

        /// <summary>
        /// Gets or Sets ActionCategory
        /// </summary>
        [DataMember(Name="action_category", EmitDefaultValue=false)]
        public ActionCategoryEnum ActionCategory { get; set; }
        /// <summary>
        /// Defines ActionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionTypeEnum
        {
            /// <summary>
            /// Enum Webhook for value: webhook
            /// </summary>
            [EnumMember(Value = "webhook")]
            Webhook = 1,

            /// <summary>
            /// Enum Slackwebhook for value: slack_webhook
            /// </summary>
            [EnumMember(Value = "slack_webhook")]
            Slackwebhook = 2,

            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 3,

            /// <summary>
            /// Enum Awss3upload for value: aws_s3_upload
            /// </summary>
            [EnumMember(Value = "aws_s3_upload")]
            Awss3upload = 4

        }

        /// <summary>
        /// Gets or Sets ActionType
        /// </summary>
        [DataMember(Name="action_type", EmitDefaultValue=false)]
        public ActionTypeEnum ActionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CombinedSubmissionAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CombinedSubmissionAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CombinedSubmissionAction" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="integrationId">integrationId (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="actionCategory">actionCategory (required).</param>
        /// <param name="actionType">actionType (required).</param>
        /// <param name="resultData">resultData (required).</param>
        public CombinedSubmissionAction(string id = default(string), string integrationId = default(string), StateEnum state = default(StateEnum), ActionCategoryEnum actionCategory = default(ActionCategoryEnum), ActionTypeEnum actionType = default(ActionTypeEnum), Object resultData = default(Object))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for CombinedSubmissionAction and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "integrationId" is required (not null)
            if (integrationId == null)
            {
                throw new InvalidDataException("integrationId is a required property for CombinedSubmissionAction and cannot be null");
            }
            else
            {
                this.IntegrationId = integrationId;
            }
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for CombinedSubmissionAction and cannot be null");
            }
            else
            {
                this.State = state;
            }
            // to ensure "actionCategory" is required (not null)
            if (actionCategory == null)
            {
                throw new InvalidDataException("actionCategory is a required property for CombinedSubmissionAction and cannot be null");
            }
            else
            {
                this.ActionCategory = actionCategory;
            }
            // to ensure "actionType" is required (not null)
            if (actionType == null)
            {
                throw new InvalidDataException("actionType is a required property for CombinedSubmissionAction and cannot be null");
            }
            else
            {
                this.ActionType = actionType;
            }
            // to ensure "resultData" is required (not null)
            if (resultData == null)
            {
                throw new InvalidDataException("resultData is a required property for CombinedSubmissionAction and cannot be null");
            }
            else
            {
                this.ResultData = resultData;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationId
        /// </summary>
        [DataMember(Name="integration_id", EmitDefaultValue=false)]
        public string IntegrationId { get; set; }




        /// <summary>
        /// Gets or Sets ResultData
        /// </summary>
        [DataMember(Name="result_data", EmitDefaultValue=false)]
        public Object ResultData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CombinedSubmissionAction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IntegrationId: ").Append(IntegrationId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ActionCategory: ").Append(ActionCategory).Append("\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  ResultData: ").Append(ResultData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CombinedSubmissionAction);
        }

        /// <summary>
        /// Returns true if CombinedSubmissionAction instances are equal
        /// </summary>
        /// <param name="input">Instance of CombinedSubmissionAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CombinedSubmissionAction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IntegrationId == input.IntegrationId ||
                    (this.IntegrationId != null &&
                    this.IntegrationId.Equals(input.IntegrationId))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.ActionCategory == input.ActionCategory ||
                    (this.ActionCategory != null &&
                    this.ActionCategory.Equals(input.ActionCategory))
                ) && 
                (
                    this.ActionType == input.ActionType ||
                    (this.ActionType != null &&
                    this.ActionType.Equals(input.ActionType))
                ) && 
                (
                    this.ResultData == input.ResultData ||
                    (this.ResultData != null &&
                    this.ResultData.Equals(input.ResultData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IntegrationId != null)
                    hashCode = hashCode * 59 + this.IntegrationId.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.ActionCategory != null)
                    hashCode = hashCode * 59 + this.ActionCategory.GetHashCode();
                if (this.ActionType != null)
                    hashCode = hashCode * 59 + this.ActionType.GetHashCode();
                if (this.ResultData != null)
                    hashCode = hashCode * 59 + this.ResultData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
