/*
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// PublishTemplateVersionResponseResult
    /// </summary>
    [DataContract(Name = "publish_template_version_response_result")]
    public partial class PublishTemplateVersionResponseResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublishTemplateVersionResponseResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublishTemplateVersionResponseResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublishTemplateVersionResponseResult" /> class.
        /// </summary>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="description">description.</param>
        /// <param name="publishedAt">publishedAt (required).</param>
        /// <param name="publishedById">publishedById (required).</param>
        public PublishTemplateVersionResponseResult(string varVersion = default(string), string description = default(string), string publishedAt = default(string), string publishedById = default(string))
        {
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for PublishTemplateVersionResponseResult and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "publishedAt" is required (not null)
            if (publishedAt == null)
            {
                throw new ArgumentNullException("publishedAt is a required property for PublishTemplateVersionResponseResult and cannot be null");
            }
            this.PublishedAt = publishedAt;
            // to ensure "publishedById" is required (not null)
            if (publishedById == null)
            {
                throw new ArgumentNullException("publishedById is a required property for PublishTemplateVersionResponseResult and cannot be null");
            }
            this.PublishedById = publishedById;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PublishedAt
        /// </summary>
        [DataMember(Name = "published_at", IsRequired = true, EmitDefaultValue = true)]
        public string PublishedAt { get; set; }

        /// <summary>
        /// Gets or Sets PublishedById
        /// </summary>
        [DataMember(Name = "published_by_id", IsRequired = true, EmitDefaultValue = true)]
        public string PublishedById { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublishTemplateVersionResponseResult {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  PublishedById: ").Append(PublishedById).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
