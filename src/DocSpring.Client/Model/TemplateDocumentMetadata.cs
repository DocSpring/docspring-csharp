/*
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// TemplateDocumentMetadata
    /// </summary>
    [DataContract(Name = "template_document_metadata")]
    public partial class TemplateDocumentMetadata : IValidatableObject
    {
        /// <summary>
        /// Defines MimeType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MimeTypeEnum
        {
            /// <summary>
            /// Enum ApplicationPdf for value: application/pdf
            /// </summary>
            [EnumMember(Value = "application/pdf")]
            ApplicationPdf = 1
        }


        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [DataMember(Name = "mime_type", IsRequired = true, EmitDefaultValue = true)]
        public MimeTypeEnum MimeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateDocumentMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TemplateDocumentMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateDocumentMetadata" /> class.
        /// </summary>
        /// <param name="filename">filename (required).</param>
        /// <param name="mimeType">mimeType (required).</param>
        /// <param name="size">size (required).</param>
        public TemplateDocumentMetadata(string filename = default(string), MimeTypeEnum mimeType = default(MimeTypeEnum), int size = default(int))
        {
            // to ensure "filename" is required (not null)
            if (filename == null)
            {
                throw new ArgumentNullException("filename is a required property for TemplateDocumentMetadata and cannot be null");
            }
            this.Filename = filename;
            this.MimeType = mimeType;
            this.Size = size;
        }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [DataMember(Name = "filename", IsRequired = true, EmitDefaultValue = true)]
        public string Filename { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public int Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplateDocumentMetadata {\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
