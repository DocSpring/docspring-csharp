/*
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// TemplateDefaults
    /// </summary>
    [DataContract(Name = "template_defaults")]
    public partial class TemplateDefaults : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateDefaults" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TemplateDefaults() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateDefaults" /> class.
        /// </summary>
        /// <param name="color">color (required).</param>
        /// <param name="fontSize">fontSize (required).</param>
        /// <param name="typeface">typeface (required).</param>
        public TemplateDefaults(string color = default(string), decimal fontSize = default(decimal), string typeface = default(string))
        {
            // to ensure "color" is required (not null)
            if (color == null)
            {
                throw new ArgumentNullException("color is a required property for TemplateDefaults and cannot be null");
            }
            this.Color = color;
            this.FontSize = fontSize;
            // to ensure "typeface" is required (not null)
            if (typeface == null)
            {
                throw new ArgumentNullException("typeface is a required property for TemplateDefaults and cannot be null");
            }
            this.Typeface = typeface;
        }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", IsRequired = true, EmitDefaultValue = true)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets FontSize
        /// </summary>
        [DataMember(Name = "fontSize", IsRequired = true, EmitDefaultValue = true)]
        public decimal FontSize { get; set; }

        /// <summary>
        /// Gets or Sets Typeface
        /// </summary>
        [DataMember(Name = "typeface", IsRequired = true, EmitDefaultValue = true)]
        public string Typeface { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplateDefaults {\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  Typeface: ").Append(Typeface).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
