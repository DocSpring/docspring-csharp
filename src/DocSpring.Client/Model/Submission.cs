/*
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// Submission
    /// </summary>
    [DataContract(Name = "submission")]
    public partial class Submission : IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 2,

            /// <summary>
            /// Enum InvalidData for value: invalid_data
            /// </summary>
            [EnumMember(Value = "invalid_data")]
            InvalidData = 3,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 4,

            /// <summary>
            /// Enum ImageDownloadFailed for value: image_download_failed
            /// </summary>
            [EnumMember(Value = "image_download_failed")]
            ImageDownloadFailed = 5,

            /// <summary>
            /// Enum ImageProcessingFailed for value: image_processing_failed
            /// </summary>
            [EnumMember(Value = "image_processing_failed")]
            ImageProcessingFailed = 6,

            /// <summary>
            /// Enum WaitingForDataRequests for value: waiting_for_data_requests
            /// </summary>
            [EnumMember(Value = "waiting_for_data_requests")]
            WaitingForDataRequests = 7,

            /// <summary>
            /// Enum SyntaxError for value: syntax_error
            /// </summary>
            [EnumMember(Value = "syntax_error")]
            SyntaxError = 8,

            /// <summary>
            /// Enum AccountSuspended for value: account_suspended
            /// </summary>
            [EnumMember(Value = "account_suspended")]
            AccountSuspended = 9,

            /// <summary>
            /// Enum LicenseRevoked for value: license_revoked
            /// </summary>
            [EnumMember(Value = "license_revoked")]
            LicenseRevoked = 10,

            /// <summary>
            /// Enum Accidental for value: accidental
            /// </summary>
            [EnumMember(Value = "accidental")]
            Accidental = 11
        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Submission" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Submission() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Submission" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="templateId">templateId.</param>
        /// <param name="test">test (required).</param>
        /// <param name="editable">editable.</param>
        /// <param name="expired">expired (required).</param>
        /// <param name="expiresAt">expiresAt.</param>
        /// <param name="processedAt">processedAt.</param>
        /// <param name="state">state (required).</param>
        /// <param name="data">data.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="truncatedText">truncatedText.</param>
        /// <param name="pdfHash">pdfHash.</param>
        /// <param name="downloadUrl">downloadUrl.</param>
        /// <param name="permanentDownloadUrl">permanentDownloadUrl.</param>
        /// <param name="batchId">batchId.</param>
        /// <param name="dataRequests">dataRequests.</param>
        /// <param name="actions">actions.</param>
        /// <param name="source">source.</param>
        /// <param name="referrer">referrer.</param>
        public Submission(string id = default(string), string templateId = default(string), bool test = default(bool), bool? editable = default(bool?), bool expired = default(bool), string expiresAt = default(string), string processedAt = default(string), StateEnum state = default(StateEnum), Object data = default(Object), Object metadata = default(Object), Object truncatedText = default(Object), string pdfHash = default(string), string downloadUrl = default(string), string permanentDownloadUrl = default(string), string batchId = default(string), List<SubmissionDataRequest> dataRequests = default(List<SubmissionDataRequest>), List<SubmissionAction> actions = default(List<SubmissionAction>), string source = default(string), string referrer = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Submission and cannot be null");
            }
            this.Id = id;
            this.Test = test;
            this.Expired = expired;
            this.State = state;
            this.TemplateId = templateId;
            this.Editable = editable;
            this.ExpiresAt = expiresAt;
            this.ProcessedAt = processedAt;
            this.Data = data;
            this.Metadata = metadata;
            this.TruncatedText = truncatedText;
            this.PdfHash = pdfHash;
            this.DownloadUrl = downloadUrl;
            this.PermanentDownloadUrl = permanentDownloadUrl;
            this.BatchId = batchId;
            this.DataRequests = dataRequests;
            this.Actions = actions;
            this.Source = source;
            this.Referrer = referrer;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [DataMember(Name = "template_id", EmitDefaultValue = false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Gets or Sets Test
        /// </summary>
        [DataMember(Name = "test", IsRequired = true, EmitDefaultValue = true)]
        public bool Test { get; set; }

        /// <summary>
        /// Gets or Sets Editable
        /// </summary>
        [DataMember(Name = "editable", EmitDefaultValue = true)]
        public bool? Editable { get; set; }

        /// <summary>
        /// Gets or Sets Expired
        /// </summary>
        [DataMember(Name = "expired", IsRequired = true, EmitDefaultValue = true)]
        public bool Expired { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name = "expires_at", EmitDefaultValue = true)]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets ProcessedAt
        /// </summary>
        [DataMember(Name = "processed_at", EmitDefaultValue = true)]
        public string ProcessedAt { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = true)]
        public Object Data { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets TruncatedText
        /// </summary>
        [DataMember(Name = "truncated_text", EmitDefaultValue = false)]
        public Object TruncatedText { get; set; }

        /// <summary>
        /// Gets or Sets PdfHash
        /// </summary>
        [DataMember(Name = "pdf_hash", EmitDefaultValue = true)]
        public string PdfHash { get; set; }

        /// <summary>
        /// Gets or Sets DownloadUrl
        /// </summary>
        [DataMember(Name = "download_url", EmitDefaultValue = true)]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// Gets or Sets PermanentDownloadUrl
        /// </summary>
        [DataMember(Name = "permanent_download_url", EmitDefaultValue = true)]
        public string PermanentDownloadUrl { get; set; }

        /// <summary>
        /// Gets or Sets BatchId
        /// </summary>
        [DataMember(Name = "batch_id", EmitDefaultValue = true)]
        public string BatchId { get; set; }

        /// <summary>
        /// Gets or Sets DataRequests
        /// </summary>
        [DataMember(Name = "data_requests", EmitDefaultValue = false)]
        public List<SubmissionDataRequest> DataRequests { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<SubmissionAction> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Referrer
        /// </summary>
        [DataMember(Name = "referrer", EmitDefaultValue = true)]
        public string Referrer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Submission {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  Editable: ").Append(Editable).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  ProcessedAt: ").Append(ProcessedAt).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  TruncatedText: ").Append(TruncatedText).Append("\n");
            sb.Append("  PdfHash: ").Append(PdfHash).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  PermanentDownloadUrl: ").Append(PermanentDownloadUrl).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  DataRequests: ").Append(DataRequests).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Referrer: ").Append(Referrer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
