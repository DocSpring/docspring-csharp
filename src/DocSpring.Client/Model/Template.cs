/*
 * DocSpring API
 *
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// Template
    /// </summary>
    [DataContract(Name = "template")]
    public partial class Template : IValidatableObject
    {
        /// <summary>
        /// Defines DocumentState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DocumentStateEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 2,

            /// <summary>
            /// Enum PasswordRequired for value: password_required
            /// </summary>
            [EnumMember(Value = "password_required")]
            PasswordRequired = 3,

            /// <summary>
            /// Enum MalformedPdf for value: malformed_pdf
            /// </summary>
            [EnumMember(Value = "malformed_pdf")]
            MalformedPdf = 4,

            /// <summary>
            /// Enum UnknownError for value: unknown_error
            /// </summary>
            [EnumMember(Value = "unknown_error")]
            UnknownError = 5
        }


        /// <summary>
        /// Gets or Sets DocumentState
        /// </summary>
        [DataMember(Name = "document_state", IsRequired = true, EmitDefaultValue = true)]
        public DocumentStateEnum DocumentState { get; set; }
        /// <summary>
        /// Defines TemplateType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TemplateTypeEnum
        {
            /// <summary>
            /// Enum Pdf for value: pdf
            /// </summary>
            [EnumMember(Value = "pdf")]
            Pdf = 1,

            /// <summary>
            /// Enum Html for value: html
            /// </summary>
            [EnumMember(Value = "html")]
            Html = 2
        }


        /// <summary>
        /// Gets or Sets TemplateType
        /// </summary>
        [DataMember(Name = "template_type", IsRequired = true, EmitDefaultValue = true)]
        public TemplateTypeEnum TemplateType { get; set; }
        /// <summary>
        /// Defines LastChangedByType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LastChangedByTypeEnum
        {
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 1,

            /// <summary>
            /// Enum Api for value: api
            /// </summary>
            [EnumMember(Value = "api")]
            Api = 2
        }


        /// <summary>
        /// Gets or Sets LastChangedByType
        /// </summary>
        [DataMember(Name = "last_changed_by_type", IsRequired = true, EmitDefaultValue = true)]
        public LastChangedByTypeEnum LastChangedByType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Template" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Template() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Template" /> class.
        /// </summary>
        /// <param name="addDataRequestSubmissionIdFooters">addDataRequestSubmissionIdFooters (required).</param>
        /// <param name="allowAdditionalProperties">allowAdditionalProperties (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="documentFilename">documentFilename (required).</param>
        /// <param name="documentMd5">documentMd5 (required).</param>
        /// <param name="documentParseError">documentParseError (required).</param>
        /// <param name="documentProcessed">documentProcessed (required).</param>
        /// <param name="documentState">documentState (required).</param>
        /// <param name="documentUrl">documentUrl (required).</param>
        /// <param name="editableSubmissions">editableSubmissions (required).</param>
        /// <param name="embedDomains">embedDomains (required).</param>
        /// <param name="encryptPdfsPassword">encryptPdfsPassword (required).</param>
        /// <param name="encryptPdfs">encryptPdfs (required).</param>
        /// <param name="expirationInterval">expirationInterval (required).</param>
        /// <param name="expireAfter">expireAfter (required).</param>
        /// <param name="expireSubmissions">expireSubmissions (required).</param>
        /// <param name="externalPredefinedFieldsTemplateId">externalPredefinedFieldsTemplateId (required).</param>
        /// <param name="externalPredefinedFieldsTemplateName">externalPredefinedFieldsTemplateName (required).</param>
        /// <param name="firstTemplate">firstTemplate (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="locked">locked (required).</param>
        /// <param name="mergeAuditTrailPdf">mergeAuditTrailPdf (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="pageCount">pageCount (required).</param>
        /// <param name="pageDimensions">pageDimensions (required).</param>
        /// <param name="parentFolderId">parentFolderId (required).</param>
        /// <param name="path">path (required).</param>
        /// <param name="permanentDocumentUrl">permanentDocumentUrl (required).</param>
        /// <param name="publicSubmissions">publicSubmissions (required).</param>
        /// <param name="publicWebForm">publicWebForm (required).</param>
        /// <param name="redirectUrl">redirectUrl (required).</param>
        /// <param name="slackWebhookUrl">slackWebhookUrl (required).</param>
        /// <param name="templateType">templateType (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="versionPublishedAt">versionPublishedAt (required).</param>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="webhookUrl">webhookUrl (required).</param>
        /// <param name="demo">demo (required).</param>
        /// <param name="latestVersion">latestVersion (required).</param>
        /// <param name="lastChangedAt">lastChangedAt (required).</param>
        /// <param name="lastChangedByType">lastChangedByType (required).</param>
        /// <param name="lastChangedById">lastChangedById (required).</param>
        /// <param name="defaults">defaults (required).</param>
        /// <param name="fieldOrder">fieldOrder (required).</param>
        /// <param name="fields">fields (required).</param>
        /// <param name="footerHtml">footerHtml (required).</param>
        /// <param name="headerHtml">headerHtml (required).</param>
        /// <param name="htmlEngineOptions">htmlEngineOptions (required).</param>
        /// <param name="html">html (required).</param>
        /// <param name="predefinedFields">predefinedFields (required).</param>
        /// <param name="scss">scss (required).</param>
        /// <param name="sharedFieldData">sharedFieldData (required).</param>
        /// <param name="versions">versions (required).</param>
        public Template(bool addDataRequestSubmissionIdFooters = default(bool), bool allowAdditionalProperties = default(bool), string description = default(string), string documentFilename = default(string), string documentMd5 = default(string), bool documentParseError = default(bool), bool documentProcessed = default(bool), DocumentStateEnum documentState = default(DocumentStateEnum), string documentUrl = default(string), bool editableSubmissions = default(bool), string embedDomains = default(string), string encryptPdfsPassword = default(string), bool encryptPdfs = default(bool), string expirationInterval = default(string), int expireAfter = default(int), bool expireSubmissions = default(bool), string externalPredefinedFieldsTemplateId = default(string), string externalPredefinedFieldsTemplateName = default(string), bool firstTemplate = default(bool), string id = default(string), bool locked = default(bool), bool mergeAuditTrailPdf = default(bool), string name = default(string), int pageCount = default(int), List<List<decimal>> pageDimensions = default(List<List<decimal>>), string parentFolderId = default(string), string path = default(string), string permanentDocumentUrl = default(string), bool publicSubmissions = default(bool), bool publicWebForm = default(bool), string redirectUrl = default(string), string slackWebhookUrl = default(string), TemplateTypeEnum templateType = default(TemplateTypeEnum), string updatedAt = default(string), string versionPublishedAt = default(string), string varVersion = default(string), string webhookUrl = default(string), bool demo = default(bool), string latestVersion = default(string), string lastChangedAt = default(string), LastChangedByTypeEnum lastChangedByType = default(LastChangedByTypeEnum), string lastChangedById = default(string), Object defaults = default(Object), List<List<decimal>> fieldOrder = default(List<List<decimal>>), Object fields = default(Object), string footerHtml = default(string), string headerHtml = default(string), Object htmlEngineOptions = default(Object), string html = default(string), List<Object> predefinedFields = default(List<Object>), string scss = default(string), Object sharedFieldData = default(Object), List<Object> versions = default(List<Object>))
        {
            this.AddDataRequestSubmissionIdFooters = addDataRequestSubmissionIdFooters;
            this.AllowAdditionalProperties = allowAdditionalProperties;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Template and cannot be null");
            }
            this.Description = description;
            // to ensure "documentFilename" is required (not null)
            if (documentFilename == null)
            {
                throw new ArgumentNullException("documentFilename is a required property for Template and cannot be null");
            }
            this.DocumentFilename = documentFilename;
            // to ensure "documentMd5" is required (not null)
            if (documentMd5 == null)
            {
                throw new ArgumentNullException("documentMd5 is a required property for Template and cannot be null");
            }
            this.DocumentMd5 = documentMd5;
            this.DocumentParseError = documentParseError;
            this.DocumentProcessed = documentProcessed;
            this.DocumentState = documentState;
            // to ensure "documentUrl" is required (not null)
            if (documentUrl == null)
            {
                throw new ArgumentNullException("documentUrl is a required property for Template and cannot be null");
            }
            this.DocumentUrl = documentUrl;
            this.EditableSubmissions = editableSubmissions;
            // to ensure "embedDomains" is required (not null)
            if (embedDomains == null)
            {
                throw new ArgumentNullException("embedDomains is a required property for Template and cannot be null");
            }
            this.EmbedDomains = embedDomains;
            // to ensure "encryptPdfsPassword" is required (not null)
            if (encryptPdfsPassword == null)
            {
                throw new ArgumentNullException("encryptPdfsPassword is a required property for Template and cannot be null");
            }
            this.EncryptPdfsPassword = encryptPdfsPassword;
            this.EncryptPdfs = encryptPdfs;
            // to ensure "expirationInterval" is required (not null)
            if (expirationInterval == null)
            {
                throw new ArgumentNullException("expirationInterval is a required property for Template and cannot be null");
            }
            this.ExpirationInterval = expirationInterval;
            this.ExpireAfter = expireAfter;
            this.ExpireSubmissions = expireSubmissions;
            // to ensure "externalPredefinedFieldsTemplateId" is required (not null)
            if (externalPredefinedFieldsTemplateId == null)
            {
                throw new ArgumentNullException("externalPredefinedFieldsTemplateId is a required property for Template and cannot be null");
            }
            this.ExternalPredefinedFieldsTemplateId = externalPredefinedFieldsTemplateId;
            // to ensure "externalPredefinedFieldsTemplateName" is required (not null)
            if (externalPredefinedFieldsTemplateName == null)
            {
                throw new ArgumentNullException("externalPredefinedFieldsTemplateName is a required property for Template and cannot be null");
            }
            this.ExternalPredefinedFieldsTemplateName = externalPredefinedFieldsTemplateName;
            this.FirstTemplate = firstTemplate;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Template and cannot be null");
            }
            this.Id = id;
            this.Locked = locked;
            this.MergeAuditTrailPdf = mergeAuditTrailPdf;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Template and cannot be null");
            }
            this.Name = name;
            this.PageCount = pageCount;
            // to ensure "pageDimensions" is required (not null)
            if (pageDimensions == null)
            {
                throw new ArgumentNullException("pageDimensions is a required property for Template and cannot be null");
            }
            this.PageDimensions = pageDimensions;
            // to ensure "parentFolderId" is required (not null)
            if (parentFolderId == null)
            {
                throw new ArgumentNullException("parentFolderId is a required property for Template and cannot be null");
            }
            this.ParentFolderId = parentFolderId;
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for Template and cannot be null");
            }
            this.Path = path;
            // to ensure "permanentDocumentUrl" is required (not null)
            if (permanentDocumentUrl == null)
            {
                throw new ArgumentNullException("permanentDocumentUrl is a required property for Template and cannot be null");
            }
            this.PermanentDocumentUrl = permanentDocumentUrl;
            this.PublicSubmissions = publicSubmissions;
            this.PublicWebForm = publicWebForm;
            // to ensure "redirectUrl" is required (not null)
            if (redirectUrl == null)
            {
                throw new ArgumentNullException("redirectUrl is a required property for Template and cannot be null");
            }
            this.RedirectUrl = redirectUrl;
            // to ensure "slackWebhookUrl" is required (not null)
            if (slackWebhookUrl == null)
            {
                throw new ArgumentNullException("slackWebhookUrl is a required property for Template and cannot be null");
            }
            this.SlackWebhookUrl = slackWebhookUrl;
            this.TemplateType = templateType;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for Template and cannot be null");
            }
            this.UpdatedAt = updatedAt;
            // to ensure "versionPublishedAt" is required (not null)
            if (versionPublishedAt == null)
            {
                throw new ArgumentNullException("versionPublishedAt is a required property for Template and cannot be null");
            }
            this.VersionPublishedAt = versionPublishedAt;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for Template and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "webhookUrl" is required (not null)
            if (webhookUrl == null)
            {
                throw new ArgumentNullException("webhookUrl is a required property for Template and cannot be null");
            }
            this.WebhookUrl = webhookUrl;
            this.Demo = demo;
            // to ensure "latestVersion" is required (not null)
            if (latestVersion == null)
            {
                throw new ArgumentNullException("latestVersion is a required property for Template and cannot be null");
            }
            this.LatestVersion = latestVersion;
            // to ensure "lastChangedAt" is required (not null)
            if (lastChangedAt == null)
            {
                throw new ArgumentNullException("lastChangedAt is a required property for Template and cannot be null");
            }
            this.LastChangedAt = lastChangedAt;
            this.LastChangedByType = lastChangedByType;
            // to ensure "lastChangedById" is required (not null)
            if (lastChangedById == null)
            {
                throw new ArgumentNullException("lastChangedById is a required property for Template and cannot be null");
            }
            this.LastChangedById = lastChangedById;
            // to ensure "defaults" is required (not null)
            if (defaults == null)
            {
                throw new ArgumentNullException("defaults is a required property for Template and cannot be null");
            }
            this.Defaults = defaults;
            // to ensure "fieldOrder" is required (not null)
            if (fieldOrder == null)
            {
                throw new ArgumentNullException("fieldOrder is a required property for Template and cannot be null");
            }
            this.FieldOrder = fieldOrder;
            // to ensure "fields" is required (not null)
            if (fields == null)
            {
                throw new ArgumentNullException("fields is a required property for Template and cannot be null");
            }
            this.Fields = fields;
            // to ensure "footerHtml" is required (not null)
            if (footerHtml == null)
            {
                throw new ArgumentNullException("footerHtml is a required property for Template and cannot be null");
            }
            this.FooterHtml = footerHtml;
            // to ensure "headerHtml" is required (not null)
            if (headerHtml == null)
            {
                throw new ArgumentNullException("headerHtml is a required property for Template and cannot be null");
            }
            this.HeaderHtml = headerHtml;
            // to ensure "htmlEngineOptions" is required (not null)
            if (htmlEngineOptions == null)
            {
                throw new ArgumentNullException("htmlEngineOptions is a required property for Template and cannot be null");
            }
            this.HtmlEngineOptions = htmlEngineOptions;
            // to ensure "html" is required (not null)
            if (html == null)
            {
                throw new ArgumentNullException("html is a required property for Template and cannot be null");
            }
            this.Html = html;
            // to ensure "predefinedFields" is required (not null)
            if (predefinedFields == null)
            {
                throw new ArgumentNullException("predefinedFields is a required property for Template and cannot be null");
            }
            this.PredefinedFields = predefinedFields;
            // to ensure "scss" is required (not null)
            if (scss == null)
            {
                throw new ArgumentNullException("scss is a required property for Template and cannot be null");
            }
            this.Scss = scss;
            // to ensure "sharedFieldData" is required (not null)
            if (sharedFieldData == null)
            {
                throw new ArgumentNullException("sharedFieldData is a required property for Template and cannot be null");
            }
            this.SharedFieldData = sharedFieldData;
            // to ensure "versions" is required (not null)
            if (versions == null)
            {
                throw new ArgumentNullException("versions is a required property for Template and cannot be null");
            }
            this.Versions = versions;
        }

        /// <summary>
        /// Gets or Sets AddDataRequestSubmissionIdFooters
        /// </summary>
        [DataMember(Name = "add_data_request_submission_id_footers", IsRequired = true, EmitDefaultValue = true)]
        public bool AddDataRequestSubmissionIdFooters { get; set; }

        /// <summary>
        /// Gets or Sets AllowAdditionalProperties
        /// </summary>
        [DataMember(Name = "allow_additional_properties", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowAdditionalProperties { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFilename
        /// </summary>
        [DataMember(Name = "document_filename", IsRequired = true, EmitDefaultValue = true)]
        public string DocumentFilename { get; set; }

        /// <summary>
        /// Gets or Sets DocumentMd5
        /// </summary>
        [DataMember(Name = "document_md5", IsRequired = true, EmitDefaultValue = true)]
        public string DocumentMd5 { get; set; }

        /// <summary>
        /// Gets or Sets DocumentParseError
        /// </summary>
        [DataMember(Name = "document_parse_error", IsRequired = true, EmitDefaultValue = true)]
        public bool DocumentParseError { get; set; }

        /// <summary>
        /// Gets or Sets DocumentProcessed
        /// </summary>
        [DataMember(Name = "document_processed", IsRequired = true, EmitDefaultValue = true)]
        public bool DocumentProcessed { get; set; }

        /// <summary>
        /// Gets or Sets DocumentUrl
        /// </summary>
        [DataMember(Name = "document_url", IsRequired = true, EmitDefaultValue = true)]
        public string DocumentUrl { get; set; }

        /// <summary>
        /// Gets or Sets EditableSubmissions
        /// </summary>
        [DataMember(Name = "editable_submissions", IsRequired = true, EmitDefaultValue = true)]
        public bool EditableSubmissions { get; set; }

        /// <summary>
        /// Gets or Sets EmbedDomains
        /// </summary>
        [DataMember(Name = "embed_domains", IsRequired = true, EmitDefaultValue = true)]
        public string EmbedDomains { get; set; }

        /// <summary>
        /// Gets or Sets EncryptPdfsPassword
        /// </summary>
        [DataMember(Name = "encrypt_pdfs_password", IsRequired = true, EmitDefaultValue = true)]
        public string EncryptPdfsPassword { get; set; }

        /// <summary>
        /// Gets or Sets EncryptPdfs
        /// </summary>
        [DataMember(Name = "encrypt_pdfs", IsRequired = true, EmitDefaultValue = true)]
        public bool EncryptPdfs { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationInterval
        /// </summary>
        [DataMember(Name = "expiration_interval", IsRequired = true, EmitDefaultValue = true)]
        public string ExpirationInterval { get; set; }

        /// <summary>
        /// Gets or Sets ExpireAfter
        /// </summary>
        [DataMember(Name = "expire_after", IsRequired = true, EmitDefaultValue = true)]
        public int ExpireAfter { get; set; }

        /// <summary>
        /// Gets or Sets ExpireSubmissions
        /// </summary>
        [DataMember(Name = "expire_submissions", IsRequired = true, EmitDefaultValue = true)]
        public bool ExpireSubmissions { get; set; }

        /// <summary>
        /// Gets or Sets ExternalPredefinedFieldsTemplateId
        /// </summary>
        [DataMember(Name = "external_predefined_fields_template_id", IsRequired = true, EmitDefaultValue = true)]
        public string ExternalPredefinedFieldsTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalPredefinedFieldsTemplateName
        /// </summary>
        [DataMember(Name = "external_predefined_fields_template_name", IsRequired = true, EmitDefaultValue = true)]
        public string ExternalPredefinedFieldsTemplateName { get; set; }

        /// <summary>
        /// Gets or Sets FirstTemplate
        /// </summary>
        [DataMember(Name = "first_template", IsRequired = true, EmitDefaultValue = true)]
        public bool FirstTemplate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Locked
        /// </summary>
        [DataMember(Name = "locked", IsRequired = true, EmitDefaultValue = true)]
        public bool Locked { get; set; }

        /// <summary>
        /// Gets or Sets MergeAuditTrailPdf
        /// </summary>
        [DataMember(Name = "merge_audit_trail_pdf", IsRequired = true, EmitDefaultValue = true)]
        public bool MergeAuditTrailPdf { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PageCount
        /// </summary>
        [DataMember(Name = "page_count", IsRequired = true, EmitDefaultValue = true)]
        public int PageCount { get; set; }

        /// <summary>
        /// Gets or Sets PageDimensions
        /// </summary>
        [DataMember(Name = "page_dimensions", IsRequired = true, EmitDefaultValue = true)]
        public List<List<decimal>> PageDimensions { get; set; }

        /// <summary>
        /// Gets or Sets ParentFolderId
        /// </summary>
        [DataMember(Name = "parent_folder_id", IsRequired = true, EmitDefaultValue = true)]
        public string ParentFolderId { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets PermanentDocumentUrl
        /// </summary>
        [DataMember(Name = "permanent_document_url", IsRequired = true, EmitDefaultValue = true)]
        public string PermanentDocumentUrl { get; set; }

        /// <summary>
        /// Gets or Sets PublicSubmissions
        /// </summary>
        [DataMember(Name = "public_submissions", IsRequired = true, EmitDefaultValue = true)]
        public bool PublicSubmissions { get; set; }

        /// <summary>
        /// Gets or Sets PublicWebForm
        /// </summary>
        [DataMember(Name = "public_web_form", IsRequired = true, EmitDefaultValue = true)]
        public bool PublicWebForm { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUrl
        /// </summary>
        [DataMember(Name = "redirect_url", IsRequired = true, EmitDefaultValue = true)]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// Gets or Sets SlackWebhookUrl
        /// </summary>
        [DataMember(Name = "slack_webhook_url", IsRequired = true, EmitDefaultValue = true)]
        public string SlackWebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets VersionPublishedAt
        /// </summary>
        [DataMember(Name = "version_published_at", IsRequired = true, EmitDefaultValue = true)]
        public string VersionPublishedAt { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets WebhookUrl
        /// </summary>
        [DataMember(Name = "webhook_url", IsRequired = true, EmitDefaultValue = true)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets Demo
        /// </summary>
        [DataMember(Name = "demo", IsRequired = true, EmitDefaultValue = true)]
        public bool Demo { get; set; }

        /// <summary>
        /// Gets or Sets LatestVersion
        /// </summary>
        [DataMember(Name = "latest_version", IsRequired = true, EmitDefaultValue = true)]
        public string LatestVersion { get; set; }

        /// <summary>
        /// Gets or Sets LastChangedAt
        /// </summary>
        [DataMember(Name = "last_changed_at", IsRequired = true, EmitDefaultValue = true)]
        public string LastChangedAt { get; set; }

        /// <summary>
        /// Gets or Sets LastChangedById
        /// </summary>
        [DataMember(Name = "last_changed_by_id", IsRequired = true, EmitDefaultValue = true)]
        public string LastChangedById { get; set; }

        /// <summary>
        /// Gets or Sets Defaults
        /// </summary>
        [DataMember(Name = "defaults", IsRequired = true, EmitDefaultValue = true)]
        public Object Defaults { get; set; }

        /// <summary>
        /// Gets or Sets FieldOrder
        /// </summary>
        [DataMember(Name = "field_order", IsRequired = true, EmitDefaultValue = true)]
        public List<List<decimal>> FieldOrder { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", IsRequired = true, EmitDefaultValue = true)]
        public Object Fields { get; set; }

        /// <summary>
        /// Gets or Sets FooterHtml
        /// </summary>
        [DataMember(Name = "footer_html", IsRequired = true, EmitDefaultValue = true)]
        public string FooterHtml { get; set; }

        /// <summary>
        /// Gets or Sets HeaderHtml
        /// </summary>
        [DataMember(Name = "header_html", IsRequired = true, EmitDefaultValue = true)]
        public string HeaderHtml { get; set; }

        /// <summary>
        /// Gets or Sets HtmlEngineOptions
        /// </summary>
        [DataMember(Name = "html_engine_options", IsRequired = true, EmitDefaultValue = true)]
        public Object HtmlEngineOptions { get; set; }

        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [DataMember(Name = "html", IsRequired = true, EmitDefaultValue = true)]
        public string Html { get; set; }

        /// <summary>
        /// Gets or Sets PredefinedFields
        /// </summary>
        [DataMember(Name = "predefined_fields", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> PredefinedFields { get; set; }

        /// <summary>
        /// Gets or Sets Scss
        /// </summary>
        [DataMember(Name = "scss", IsRequired = true, EmitDefaultValue = true)]
        public string Scss { get; set; }

        /// <summary>
        /// Gets or Sets SharedFieldData
        /// </summary>
        [DataMember(Name = "shared_field_data", IsRequired = true, EmitDefaultValue = true)]
        public Object SharedFieldData { get; set; }

        /// <summary>
        /// Gets or Sets Versions
        /// </summary>
        [DataMember(Name = "versions", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Versions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Template {\n");
            sb.Append("  AddDataRequestSubmissionIdFooters: ").Append(AddDataRequestSubmissionIdFooters).Append("\n");
            sb.Append("  AllowAdditionalProperties: ").Append(AllowAdditionalProperties).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DocumentFilename: ").Append(DocumentFilename).Append("\n");
            sb.Append("  DocumentMd5: ").Append(DocumentMd5).Append("\n");
            sb.Append("  DocumentParseError: ").Append(DocumentParseError).Append("\n");
            sb.Append("  DocumentProcessed: ").Append(DocumentProcessed).Append("\n");
            sb.Append("  DocumentState: ").Append(DocumentState).Append("\n");
            sb.Append("  DocumentUrl: ").Append(DocumentUrl).Append("\n");
            sb.Append("  EditableSubmissions: ").Append(EditableSubmissions).Append("\n");
            sb.Append("  EmbedDomains: ").Append(EmbedDomains).Append("\n");
            sb.Append("  EncryptPdfsPassword: ").Append(EncryptPdfsPassword).Append("\n");
            sb.Append("  EncryptPdfs: ").Append(EncryptPdfs).Append("\n");
            sb.Append("  ExpirationInterval: ").Append(ExpirationInterval).Append("\n");
            sb.Append("  ExpireAfter: ").Append(ExpireAfter).Append("\n");
            sb.Append("  ExpireSubmissions: ").Append(ExpireSubmissions).Append("\n");
            sb.Append("  ExternalPredefinedFieldsTemplateId: ").Append(ExternalPredefinedFieldsTemplateId).Append("\n");
            sb.Append("  ExternalPredefinedFieldsTemplateName: ").Append(ExternalPredefinedFieldsTemplateName).Append("\n");
            sb.Append("  FirstTemplate: ").Append(FirstTemplate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  MergeAuditTrailPdf: ").Append(MergeAuditTrailPdf).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PageCount: ").Append(PageCount).Append("\n");
            sb.Append("  PageDimensions: ").Append(PageDimensions).Append("\n");
            sb.Append("  ParentFolderId: ").Append(ParentFolderId).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  PermanentDocumentUrl: ").Append(PermanentDocumentUrl).Append("\n");
            sb.Append("  PublicSubmissions: ").Append(PublicSubmissions).Append("\n");
            sb.Append("  PublicWebForm: ").Append(PublicWebForm).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("  SlackWebhookUrl: ").Append(SlackWebhookUrl).Append("\n");
            sb.Append("  TemplateType: ").Append(TemplateType).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  VersionPublishedAt: ").Append(VersionPublishedAt).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  Demo: ").Append(Demo).Append("\n");
            sb.Append("  LatestVersion: ").Append(LatestVersion).Append("\n");
            sb.Append("  LastChangedAt: ").Append(LastChangedAt).Append("\n");
            sb.Append("  LastChangedByType: ").Append(LastChangedByType).Append("\n");
            sb.Append("  LastChangedById: ").Append(LastChangedById).Append("\n");
            sb.Append("  Defaults: ").Append(Defaults).Append("\n");
            sb.Append("  FieldOrder: ").Append(FieldOrder).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  FooterHtml: ").Append(FooterHtml).Append("\n");
            sb.Append("  HeaderHtml: ").Append(HeaderHtml).Append("\n");
            sb.Append("  HtmlEngineOptions: ").Append(HtmlEngineOptions).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  PredefinedFields: ").Append(PredefinedFields).Append("\n");
            sb.Append("  Scss: ").Append(Scss).Append("\n");
            sb.Append("  SharedFieldData: ").Append(SharedFieldData).Append("\n");
            sb.Append("  Versions: ").Append(Versions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
