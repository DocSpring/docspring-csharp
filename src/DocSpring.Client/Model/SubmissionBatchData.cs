/*
 * DocSpring API
 *
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// SubmissionBatchData
    /// </summary>
    [DataContract(Name = "submission_batch_data")]
    public partial class SubmissionBatchData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionBatchData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubmissionBatchData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionBatchData" /> class.
        /// </summary>
        /// <param name="metadata">metadata.</param>
        /// <param name="submissions">submissions (required).</param>
        /// <param name="test">test.</param>
        public SubmissionBatchData(Object metadata = default(Object), List<Object> submissions = default(List<Object>), bool test = default(bool))
        {
            // to ensure "submissions" is required (not null)
            if (submissions == null)
            {
                throw new ArgumentNullException("submissions is a required property for SubmissionBatchData and cannot be null");
            }
            this.Submissions = submissions;
            this.Metadata = metadata;
            this.Test = test;
        }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Submissions
        /// </summary>
        [DataMember(Name = "submissions", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Submissions { get; set; }

        /// <summary>
        /// Gets or Sets Test
        /// </summary>
        [DataMember(Name = "test", EmitDefaultValue = true)]
        public bool Test { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmissionBatchData {\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Submissions: ").Append(Submissions).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
