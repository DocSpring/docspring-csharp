/* 
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// TemplatestemplateIdaddFieldsFields
    /// </summary>
    [DataContract]
    public partial class TemplatestemplateIdaddFieldsFields :  IEquatable<TemplatestemplateIdaddFieldsFields>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 1,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 2,

            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean = 3,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 4,

            /// <summary>
            /// Enum Address for value: address
            /// </summary>
            [EnumMember(Value = "address")]
            Address = 5,

            /// <summary>
            /// Enum Country for value: country
            /// </summary>
            [EnumMember(Value = "country")]
            Country = 6,

            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 7,

            /// <summary>
            /// Enum Url for value: url
            /// </summary>
            [EnumMember(Value = "url")]
            Url = 8,

            /// <summary>
            /// Enum Image for value: image
            /// </summary>
            [EnumMember(Value = "image")]
            Image = 9,

            /// <summary>
            /// Enum Signature for value: signature
            /// </summary>
            [EnumMember(Value = "signature")]
            Signature = 10,

            /// <summary>
            /// Enum Barcode for value: barcode
            /// </summary>
            [EnumMember(Value = "barcode")]
            Barcode = 11,

            /// <summary>
            /// Enum Combined for value: combined
            /// </summary>
            [EnumMember(Value = "combined")]
            Combined = 12

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Defines ImageGravity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ImageGravityEnum
        {
            /// <summary>
            /// Enum NorthWest for value: NorthWest
            /// </summary>
            [EnumMember(Value = "NorthWest")]
            NorthWest = 1,

            /// <summary>
            /// Enum North for value: North
            /// </summary>
            [EnumMember(Value = "North")]
            North = 2,

            /// <summary>
            /// Enum NorthEast for value: NorthEast
            /// </summary>
            [EnumMember(Value = "NorthEast")]
            NorthEast = 3,

            /// <summary>
            /// Enum West for value: West
            /// </summary>
            [EnumMember(Value = "West")]
            West = 4,

            /// <summary>
            /// Enum Center for value: Center
            /// </summary>
            [EnumMember(Value = "Center")]
            Center = 5,

            /// <summary>
            /// Enum East for value: East
            /// </summary>
            [EnumMember(Value = "East")]
            East = 6,

            /// <summary>
            /// Enum SouthWest for value: SouthWest
            /// </summary>
            [EnumMember(Value = "SouthWest")]
            SouthWest = 7,

            /// <summary>
            /// Enum South for value: South
            /// </summary>
            [EnumMember(Value = "South")]
            South = 8,

            /// <summary>
            /// Enum SouthEast for value: SouthEast
            /// </summary>
            [EnumMember(Value = "SouthEast")]
            SouthEast = 9

        }

        /// <summary>
        /// Gets or Sets ImageGravity
        /// </summary>
        [DataMember(Name="imageGravity", EmitDefaultValue=false)]
        public ImageGravityEnum? ImageGravity { get; set; }
        /// <summary>
        /// Defines Overflow
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OverflowEnum
        {
            /// <summary>
            /// Enum Shrinktofit for value: shrink_to_fit
            /// </summary>
            [EnumMember(Value = "shrink_to_fit")]
            Shrinktofit = 1,

            /// <summary>
            /// Enum Truncate for value: truncate
            /// </summary>
            [EnumMember(Value = "truncate")]
            Truncate = 2

        }

        /// <summary>
        /// Gets or Sets Overflow
        /// </summary>
        [DataMember(Name="overflow", EmitDefaultValue=false)]
        public OverflowEnum? Overflow { get; set; }
        /// <summary>
        /// Defines ImageScaleType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ImageScaleTypeEnum
        {
            /// <summary>
            /// Enum Fit for value: fit
            /// </summary>
            [EnumMember(Value = "fit")]
            Fit = 1,

            /// <summary>
            /// Enum Fill for value: fill
            /// </summary>
            [EnumMember(Value = "fill")]
            Fill = 2,

            /// <summary>
            /// Enum Stretch for value: stretch
            /// </summary>
            [EnumMember(Value = "stretch")]
            Stretch = 3

        }

        /// <summary>
        /// Gets or Sets ImageScaleType
        /// </summary>
        [DataMember(Name="imageScaleType", EmitDefaultValue=false)]
        public ImageScaleTypeEnum? ImageScaleType { get; set; }
        /// <summary>
        /// Defines VAlignment
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VAlignmentEnum
        {
            /// <summary>
            /// Enum Bottom for value: bottom
            /// </summary>
            [EnumMember(Value = "bottom")]
            Bottom = 1,

            /// <summary>
            /// Enum Center for value: center
            /// </summary>
            [EnumMember(Value = "center")]
            Center = 2,

            /// <summary>
            /// Enum Top for value: top
            /// </summary>
            [EnumMember(Value = "top")]
            Top = 3

        }

        /// <summary>
        /// Gets or Sets VAlignment
        /// </summary>
        [DataMember(Name="vAlignment", EmitDefaultValue=false)]
        public VAlignmentEnum? VAlignment { get; set; }
        /// <summary>
        /// Defines ShapeType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShapeTypeEnum
        {
            /// <summary>
            /// Enum Square for value: square
            /// </summary>
            [EnumMember(Value = "square")]
            Square = 1,

            /// <summary>
            /// Enum Rectangle for value: rectangle
            /// </summary>
            [EnumMember(Value = "rectangle")]
            Rectangle = 2,

            /// <summary>
            /// Enum Circle for value: circle
            /// </summary>
            [EnumMember(Value = "circle")]
            Circle = 3,

            /// <summary>
            /// Enum Ellipse for value: ellipse
            /// </summary>
            [EnumMember(Value = "ellipse")]
            Ellipse = 4

        }

        /// <summary>
        /// Gets or Sets ShapeType
        /// </summary>
        [DataMember(Name="shapeType", EmitDefaultValue=false)]
        public ShapeTypeEnum? ShapeType { get; set; }
        /// <summary>
        /// Defines DisplayType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DisplayTypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,

            /// <summary>
            /// Enum Check for value: check
            /// </summary>
            [EnumMember(Value = "check")]
            Check = 2,

            /// <summary>
            /// Enum Qrcode for value: qrcode
            /// </summary>
            [EnumMember(Value = "qrcode")]
            Qrcode = 3,

            /// <summary>
            /// Enum Barcode for value: barcode
            /// </summary>
            [EnumMember(Value = "barcode")]
            Barcode = 4,

            /// <summary>
            /// Enum Image for value: image
            /// </summary>
            [EnumMember(Value = "image")]
            Image = 5,

            /// <summary>
            /// Enum Shape for value: shape
            /// </summary>
            [EnumMember(Value = "shape")]
            Shape = 6

        }

        /// <summary>
        /// Gets or Sets DisplayType
        /// </summary>
        [DataMember(Name="displayType", EmitDefaultValue=false)]
        public DisplayTypeEnum? DisplayType { get; set; }
        /// <summary>
        /// Defines Alignment
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlignmentEnum
        {
            /// <summary>
            /// Enum Left for value: left
            /// </summary>
            [EnumMember(Value = "left")]
            Left = 1,

            /// <summary>
            /// Enum Center for value: center
            /// </summary>
            [EnumMember(Value = "center")]
            Center = 2,

            /// <summary>
            /// Enum Right for value: right
            /// </summary>
            [EnumMember(Value = "right")]
            Right = 3

        }

        /// <summary>
        /// Gets or Sets Alignment
        /// </summary>
        [DataMember(Name="alignment", EmitDefaultValue=false)]
        public AlignmentEnum? Alignment { get; set; }
        /// <summary>
        /// Defines CheckCharacter
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CheckCharacterEnum
        {
            /// <summary>
            /// Enum _10003 for value: &#10003;
            /// </summary>
            [EnumMember(Value = "&#10003;")]
            _10003 = 1,

            /// <summary>
            /// Enum _10004 for value: &#10004;
            /// </summary>
            [EnumMember(Value = "&#10004;")]
            _10004 = 2,

            /// <summary>
            /// Enum _10006 for value: &#10006;
            /// </summary>
            [EnumMember(Value = "&#10006;")]
            _10006 = 3,

            /// <summary>
            /// Enum _10007 for value: &#10007;
            /// </summary>
            [EnumMember(Value = "&#10007;")]
            _10007 = 4,

            /// <summary>
            /// Enum _10008 for value: &#10008;
            /// </summary>
            [EnumMember(Value = "&#10008;")]
            _10008 = 5

        }

        /// <summary>
        /// Gets or Sets CheckCharacter
        /// </summary>
        [DataMember(Name="checkCharacter", EmitDefaultValue=false)]
        public CheckCharacterEnum? CheckCharacter { get; set; }
        /// <summary>
        /// Defines StringConditionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StringConditionTypeEnum
        {
            /// <summary>
            /// Enum Equals for value: equals
            /// </summary>
            [EnumMember(Value = "equals")]
            Equals = 1,

            /// <summary>
            /// Enum Contains for value: contains
            /// </summary>
            [EnumMember(Value = "contains")]
            Contains = 2,

            /// <summary>
            /// Enum Startswith for value: starts_with
            /// </summary>
            [EnumMember(Value = "starts_with")]
            Startswith = 3,

            /// <summary>
            /// Enum Endswith for value: ends_with
            /// </summary>
            [EnumMember(Value = "ends_with")]
            Endswith = 4,

            /// <summary>
            /// Enum Regex for value: regex
            /// </summary>
            [EnumMember(Value = "regex")]
            Regex = 5

        }

        /// <summary>
        /// Gets or Sets StringConditionType
        /// </summary>
        [DataMember(Name="stringConditionType", EmitDefaultValue=false)]
        public StringConditionTypeEnum? StringConditionType { get; set; }
        /// <summary>
        /// Defines NumberConditionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NumberConditionTypeEnum
        {
            /// <summary>
            /// Enum Equals for value: equals
            /// </summary>
            [EnumMember(Value = "equals")]
            Equals = 1,

            /// <summary>
            /// Enum Range for value: range
            /// </summary>
            [EnumMember(Value = "range")]
            Range = 2,

            /// <summary>
            /// Enum Gte for value: gte
            /// </summary>
            [EnumMember(Value = "gte")]
            Gte = 3,

            /// <summary>
            /// Enum Gt for value: gt
            /// </summary>
            [EnumMember(Value = "gt")]
            Gt = 4,

            /// <summary>
            /// Enum Lte for value: lte
            /// </summary>
            [EnumMember(Value = "lte")]
            Lte = 5,

            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            [EnumMember(Value = "lt")]
            Lt = 6

        }

        /// <summary>
        /// Gets or Sets NumberConditionType
        /// </summary>
        [DataMember(Name="numberConditionType", EmitDefaultValue=false)]
        public NumberConditionTypeEnum? NumberConditionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatestemplateIdaddFieldsFields" /> class.
        /// </summary>
        /// <param name="uppercase">uppercase.</param>
        /// <param name="backgroundColorFieldName">backgroundColorFieldName.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="barcodeSymbology">barcodeSymbology.</param>
        /// <param name="minLength">minLength.</param>
        /// <param name="integer">integer.</param>
        /// <param name="type">type.</param>
        /// <param name="required">required.</param>
        /// <param name="combValueOffset">combValueOffset.</param>
        /// <param name="imageGravity">imageGravity.</param>
        /// <param name="overflow">overflow.</param>
        /// <param name="qrcodeColor">qrcodeColor.</param>
        /// <param name="colorFieldRequired">colorFieldRequired.</param>
        /// <param name="backgroundColorFieldRequired">backgroundColorFieldRequired.</param>
        /// <param name="id">id.</param>
        /// <param name="imageScaleType">imageScaleType.</param>
        /// <param name="exclusiveMinimum">exclusiveMinimum.</param>
        /// <param name="height">height.</param>
        /// <param name="numberConditionRangeExclusiveMax">numberConditionRangeExclusiveMax.</param>
        /// <param name="invertBooleanCondition">invertBooleanCondition.</param>
        /// <param name="_static">_static.</param>
        /// <param name="shapeFillColorFieldName">shapeFillColorFieldName.</param>
        /// <param name="shapeBorderColorFieldName">shapeBorderColorFieldName.</param>
        /// <param name="vAlignment">vAlignment.</param>
        /// <param name="bold">bold.</param>
        /// <param name="shapeBorderWidth">shapeBorderWidth.</param>
        /// <param name="combNumberOfCells">combNumberOfCells.</param>
        /// <param name="shapeBorderColor">shapeBorderColor.</param>
        /// <param name="typeface">typeface.</param>
        /// <param name="comb">comb.</param>
        /// <param name="shapeType">shapeType.</param>
        /// <param name="displayType">displayType.</param>
        /// <param name="condition">condition.</param>
        /// <param name="checkColor">checkColor.</param>
        /// <param name="multilineLines">multilineLines.</param>
        /// <param name="multiline">multiline.</param>
        /// <param name="trueText">trueText.</param>
        /// <param name="name">name.</param>
        /// <param name="fontSize">fontSize.</param>
        /// <param name="page">page.</param>
        /// <param name="alignment">alignment.</param>
        /// <param name="maxLength">maxLength.</param>
        /// <param name="autoCalculateMaxLength">autoCalculateMaxLength.</param>
        /// <param name="colorFieldName">colorFieldName.</param>
        /// <param name="qrcodeColorFieldName">qrcodeColorFieldName.</param>
        /// <param name="numberConditionRangeMin">numberConditionRangeMin.</param>
        /// <param name="hidden">hidden.</param>
        /// <param name="color">color.</param>
        /// <param name="checkColorFieldRequired">checkColorFieldRequired.</param>
        /// <param name="combinedFieldFormat">combinedFieldFormat.</param>
        /// <param name="description">description.</param>
        /// <param name="shapeBorderColorFieldRequired">shapeBorderColorFieldRequired.</param>
        /// <param name="combinedFieldNames">combinedFieldNames.</param>
        /// <param name="title">title.</param>
        /// <param name="numberConditionRangeExclusiveMin">numberConditionRangeExclusiveMin.</param>
        /// <param name="combinedFieldSeparator">combinedFieldSeparator.</param>
        /// <param name="exclusiveMaximum">exclusiveMaximum.</param>
        /// <param name="_default">_default.</param>
        /// <param name="combinedFieldType">combinedFieldType.</param>
        /// <param name="dateTimeFormat">dateTimeFormat.</param>
        /// <param name="qrcodeColorFieldRequired">qrcodeColorFieldRequired.</param>
        /// <param name="currency">currency.</param>
        /// <param name="strikethrough">strikethrough.</param>
        /// <param name="falseText">falseText.</param>
        /// <param name="characterSpacing">characterSpacing.</param>
        /// <param name="numberConditionRangeMax">numberConditionRangeMax.</param>
        /// <param name="backgroundColor">backgroundColor.</param>
        /// <param name="checkColorFieldName">checkColorFieldName.</param>
        /// <param name="checkCharacter">checkCharacter.</param>
        /// <param name="rotation">rotation.</param>
        /// <param name="optionList">optionList.</param>
        /// <param name="shapeFillColor">shapeFillColor.</param>
        /// <param name="stringConditionType">stringConditionType.</param>
        /// <param name="shapeFillColorFieldRequired">shapeFillColorFieldRequired.</param>
        /// <param name="includeTime">includeTime.</param>
        /// <param name="decimalPlaces">decimalPlaces.</param>
        /// <param name="x">x.</param>
        /// <param name="width">width.</param>
        /// <param name="maximum">maximum.</param>
        /// <param name="y">y.</param>
        /// <param name="signatureAllowDraw">signatureAllowDraw.</param>
        /// <param name="opacity">opacity.</param>
        /// <param name="numberConditionType">numberConditionType.</param>
        /// <param name="minimum">minimum.</param>
        /// <param name="signatureAllowType">signatureAllowType.</param>
        public TemplatestemplateIdaddFieldsFields(bool? uppercase = default(bool?), string backgroundColorFieldName = default(string), string metadata = default(string), string barcodeSymbology = default(string), decimal? minLength = default(decimal?), bool? integer = default(bool?), TypeEnum? type = default(TypeEnum?), bool? required = default(bool?), decimal? combValueOffset = default(decimal?), ImageGravityEnum? imageGravity = default(ImageGravityEnum?), OverflowEnum? overflow = default(OverflowEnum?), string qrcodeColor = default(string), bool? colorFieldRequired = default(bool?), bool? backgroundColorFieldRequired = default(bool?), decimal? id = default(decimal?), ImageScaleTypeEnum? imageScaleType = default(ImageScaleTypeEnum?), bool? exclusiveMinimum = default(bool?), decimal? height = default(decimal?), bool? numberConditionRangeExclusiveMax = default(bool?), bool? invertBooleanCondition = default(bool?), bool? _static = default(bool?), string shapeFillColorFieldName = default(string), string shapeBorderColorFieldName = default(string), VAlignmentEnum? vAlignment = default(VAlignmentEnum?), bool? bold = default(bool?), decimal? shapeBorderWidth = default(decimal?), decimal? combNumberOfCells = default(decimal?), string shapeBorderColor = default(string), string typeface = default(string), bool? comb = default(bool?), ShapeTypeEnum? shapeType = default(ShapeTypeEnum?), DisplayTypeEnum? displayType = default(DisplayTypeEnum?), string condition = default(string), string checkColor = default(string), decimal? multilineLines = default(decimal?), bool? multiline = default(bool?), string trueText = default(string), string name = default(string), decimal? fontSize = default(decimal?), decimal? page = default(decimal?), AlignmentEnum? alignment = default(AlignmentEnum?), decimal? maxLength = default(decimal?), bool? autoCalculateMaxLength = default(bool?), string colorFieldName = default(string), string qrcodeColorFieldName = default(string), decimal? numberConditionRangeMin = default(decimal?), bool? hidden = default(bool?), string color = default(string), bool? checkColorFieldRequired = default(bool?), string combinedFieldFormat = default(string), string description = default(string), bool? shapeBorderColorFieldRequired = default(bool?), string combinedFieldNames = default(string), string title = default(string), bool? numberConditionRangeExclusiveMin = default(bool?), string combinedFieldSeparator = default(string), bool? exclusiveMaximum = default(bool?), string _default = default(string), string combinedFieldType = default(string), string dateTimeFormat = default(string), bool? qrcodeColorFieldRequired = default(bool?), bool? currency = default(bool?), bool? strikethrough = default(bool?), string falseText = default(string), decimal? characterSpacing = default(decimal?), decimal? numberConditionRangeMax = default(decimal?), string backgroundColor = default(string), string checkColorFieldName = default(string), CheckCharacterEnum? checkCharacter = default(CheckCharacterEnum?), decimal? rotation = default(decimal?), string optionList = default(string), string shapeFillColor = default(string), StringConditionTypeEnum? stringConditionType = default(StringConditionTypeEnum?), bool? shapeFillColorFieldRequired = default(bool?), bool? includeTime = default(bool?), decimal? decimalPlaces = default(decimal?), decimal? x = default(decimal?), decimal? width = default(decimal?), decimal? maximum = default(decimal?), decimal? y = default(decimal?), bool? signatureAllowDraw = default(bool?), decimal? opacity = default(decimal?), NumberConditionTypeEnum? numberConditionType = default(NumberConditionTypeEnum?), decimal? minimum = default(decimal?), bool? signatureAllowType = default(bool?))
        {
            this.Uppercase = uppercase;
            this.BackgroundColorFieldName = backgroundColorFieldName;
            this.Metadata = metadata;
            this.BarcodeSymbology = barcodeSymbology;
            this.MinLength = minLength;
            this.Integer = integer;
            this.Type = type;
            this.Required = required;
            this.CombValueOffset = combValueOffset;
            this.ImageGravity = imageGravity;
            this.Overflow = overflow;
            this.QrcodeColor = qrcodeColor;
            this.ColorFieldRequired = colorFieldRequired;
            this.BackgroundColorFieldRequired = backgroundColorFieldRequired;
            this.Id = id;
            this.ImageScaleType = imageScaleType;
            this.ExclusiveMinimum = exclusiveMinimum;
            this.Height = height;
            this.NumberConditionRangeExclusiveMax = numberConditionRangeExclusiveMax;
            this.InvertBooleanCondition = invertBooleanCondition;
            this.Static = _static;
            this.ShapeFillColorFieldName = shapeFillColorFieldName;
            this.ShapeBorderColorFieldName = shapeBorderColorFieldName;
            this.VAlignment = vAlignment;
            this.Bold = bold;
            this.ShapeBorderWidth = shapeBorderWidth;
            this.CombNumberOfCells = combNumberOfCells;
            this.ShapeBorderColor = shapeBorderColor;
            this.Typeface = typeface;
            this.Comb = comb;
            this.ShapeType = shapeType;
            this.DisplayType = displayType;
            this.Condition = condition;
            this.CheckColor = checkColor;
            this.MultilineLines = multilineLines;
            this.Multiline = multiline;
            this.TrueText = trueText;
            this.Name = name;
            this.FontSize = fontSize;
            this.Page = page;
            this.Alignment = alignment;
            this.MaxLength = maxLength;
            this.AutoCalculateMaxLength = autoCalculateMaxLength;
            this.ColorFieldName = colorFieldName;
            this.QrcodeColorFieldName = qrcodeColorFieldName;
            this.NumberConditionRangeMin = numberConditionRangeMin;
            this.Hidden = hidden;
            this.Color = color;
            this.CheckColorFieldRequired = checkColorFieldRequired;
            this.CombinedFieldFormat = combinedFieldFormat;
            this.Description = description;
            this.ShapeBorderColorFieldRequired = shapeBorderColorFieldRequired;
            this.CombinedFieldNames = combinedFieldNames;
            this.Title = title;
            this.NumberConditionRangeExclusiveMin = numberConditionRangeExclusiveMin;
            this.CombinedFieldSeparator = combinedFieldSeparator;
            this.ExclusiveMaximum = exclusiveMaximum;
            this.Default = _default;
            this.CombinedFieldType = combinedFieldType;
            this.DateTimeFormat = dateTimeFormat;
            this.QrcodeColorFieldRequired = qrcodeColorFieldRequired;
            this.Currency = currency;
            this.Strikethrough = strikethrough;
            this.FalseText = falseText;
            this.CharacterSpacing = characterSpacing;
            this.NumberConditionRangeMax = numberConditionRangeMax;
            this.BackgroundColor = backgroundColor;
            this.CheckColorFieldName = checkColorFieldName;
            this.CheckCharacter = checkCharacter;
            this.Rotation = rotation;
            this.OptionList = optionList;
            this.ShapeFillColor = shapeFillColor;
            this.StringConditionType = stringConditionType;
            this.ShapeFillColorFieldRequired = shapeFillColorFieldRequired;
            this.IncludeTime = includeTime;
            this.DecimalPlaces = decimalPlaces;
            this.X = x;
            this.Width = width;
            this.Maximum = maximum;
            this.Y = y;
            this.SignatureAllowDraw = signatureAllowDraw;
            this.Opacity = opacity;
            this.NumberConditionType = numberConditionType;
            this.Minimum = minimum;
            this.SignatureAllowType = signatureAllowType;
        }
        
        /// <summary>
        /// Gets or Sets Uppercase
        /// </summary>
        [DataMember(Name="uppercase", EmitDefaultValue=false)]
        public bool? Uppercase { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundColorFieldName
        /// </summary>
        [DataMember(Name="backgroundColorFieldName", EmitDefaultValue=false)]
        public string BackgroundColorFieldName { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Gets or Sets BarcodeSymbology
        /// </summary>
        [DataMember(Name="barcodeSymbology", EmitDefaultValue=false)]
        public string BarcodeSymbology { get; set; }

        /// <summary>
        /// Gets or Sets MinLength
        /// </summary>
        [DataMember(Name="minLength", EmitDefaultValue=false)]
        public decimal? MinLength { get; set; }

        /// <summary>
        /// Gets or Sets Integer
        /// </summary>
        [DataMember(Name="integer", EmitDefaultValue=false)]
        public bool? Integer { get; set; }


        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets CombValueOffset
        /// </summary>
        [DataMember(Name="combValueOffset", EmitDefaultValue=false)]
        public decimal? CombValueOffset { get; set; }



        /// <summary>
        /// Gets or Sets QrcodeColor
        /// </summary>
        [DataMember(Name="qrcodeColor", EmitDefaultValue=false)]
        public string QrcodeColor { get; set; }

        /// <summary>
        /// Gets or Sets ColorFieldRequired
        /// </summary>
        [DataMember(Name="colorFieldRequired", EmitDefaultValue=false)]
        public bool? ColorFieldRequired { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundColorFieldRequired
        /// </summary>
        [DataMember(Name="backgroundColorFieldRequired", EmitDefaultValue=false)]
        public bool? BackgroundColorFieldRequired { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }


        /// <summary>
        /// Gets or Sets ExclusiveMinimum
        /// </summary>
        [DataMember(Name="exclusiveMinimum", EmitDefaultValue=false)]
        public bool? ExclusiveMinimum { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public decimal? Height { get; set; }

        /// <summary>
        /// Gets or Sets NumberConditionRangeExclusiveMax
        /// </summary>
        [DataMember(Name="numberConditionRangeExclusiveMax", EmitDefaultValue=false)]
        public bool? NumberConditionRangeExclusiveMax { get; set; }

        /// <summary>
        /// Gets or Sets InvertBooleanCondition
        /// </summary>
        [DataMember(Name="invertBooleanCondition", EmitDefaultValue=false)]
        public bool? InvertBooleanCondition { get; set; }

        /// <summary>
        /// Gets or Sets Static
        /// </summary>
        [DataMember(Name="static", EmitDefaultValue=false)]
        public bool? Static { get; set; }

        /// <summary>
        /// Gets or Sets ShapeFillColorFieldName
        /// </summary>
        [DataMember(Name="shapeFillColorFieldName", EmitDefaultValue=false)]
        public string ShapeFillColorFieldName { get; set; }

        /// <summary>
        /// Gets or Sets ShapeBorderColorFieldName
        /// </summary>
        [DataMember(Name="shapeBorderColorFieldName", EmitDefaultValue=false)]
        public string ShapeBorderColorFieldName { get; set; }


        /// <summary>
        /// Gets or Sets Bold
        /// </summary>
        [DataMember(Name="bold", EmitDefaultValue=false)]
        public bool? Bold { get; set; }

        /// <summary>
        /// Gets or Sets ShapeBorderWidth
        /// </summary>
        [DataMember(Name="shapeBorderWidth", EmitDefaultValue=false)]
        public decimal? ShapeBorderWidth { get; set; }

        /// <summary>
        /// Gets or Sets CombNumberOfCells
        /// </summary>
        [DataMember(Name="combNumberOfCells", EmitDefaultValue=false)]
        public decimal? CombNumberOfCells { get; set; }

        /// <summary>
        /// Gets or Sets ShapeBorderColor
        /// </summary>
        [DataMember(Name="shapeBorderColor", EmitDefaultValue=false)]
        public string ShapeBorderColor { get; set; }

        /// <summary>
        /// Gets or Sets Typeface
        /// </summary>
        [DataMember(Name="typeface", EmitDefaultValue=false)]
        public string Typeface { get; set; }

        /// <summary>
        /// Gets or Sets Comb
        /// </summary>
        [DataMember(Name="comb", EmitDefaultValue=false)]
        public bool? Comb { get; set; }



        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public string Condition { get; set; }

        /// <summary>
        /// Gets or Sets CheckColor
        /// </summary>
        [DataMember(Name="checkColor", EmitDefaultValue=false)]
        public string CheckColor { get; set; }

        /// <summary>
        /// Gets or Sets MultilineLines
        /// </summary>
        [DataMember(Name="multilineLines", EmitDefaultValue=false)]
        public decimal? MultilineLines { get; set; }

        /// <summary>
        /// Gets or Sets Multiline
        /// </summary>
        [DataMember(Name="multiline", EmitDefaultValue=false)]
        public bool? Multiline { get; set; }

        /// <summary>
        /// Gets or Sets TrueText
        /// </summary>
        [DataMember(Name="trueText", EmitDefaultValue=false)]
        public string TrueText { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FontSize
        /// </summary>
        [DataMember(Name="fontSize", EmitDefaultValue=false)]
        public decimal? FontSize { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public decimal? Page { get; set; }


        /// <summary>
        /// Gets or Sets MaxLength
        /// </summary>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public decimal? MaxLength { get; set; }

        /// <summary>
        /// Gets or Sets AutoCalculateMaxLength
        /// </summary>
        [DataMember(Name="autoCalculateMaxLength", EmitDefaultValue=false)]
        public bool? AutoCalculateMaxLength { get; set; }

        /// <summary>
        /// Gets or Sets ColorFieldName
        /// </summary>
        [DataMember(Name="colorFieldName", EmitDefaultValue=false)]
        public string ColorFieldName { get; set; }

        /// <summary>
        /// Gets or Sets QrcodeColorFieldName
        /// </summary>
        [DataMember(Name="qrcodeColorFieldName", EmitDefaultValue=false)]
        public string QrcodeColorFieldName { get; set; }

        /// <summary>
        /// Gets or Sets NumberConditionRangeMin
        /// </summary>
        [DataMember(Name="numberConditionRangeMin", EmitDefaultValue=false)]
        public decimal? NumberConditionRangeMin { get; set; }

        /// <summary>
        /// Gets or Sets Hidden
        /// </summary>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool? Hidden { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets CheckColorFieldRequired
        /// </summary>
        [DataMember(Name="checkColorFieldRequired", EmitDefaultValue=false)]
        public bool? CheckColorFieldRequired { get; set; }

        /// <summary>
        /// Gets or Sets CombinedFieldFormat
        /// </summary>
        [DataMember(Name="combinedFieldFormat", EmitDefaultValue=false)]
        public string CombinedFieldFormat { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ShapeBorderColorFieldRequired
        /// </summary>
        [DataMember(Name="shapeBorderColorFieldRequired", EmitDefaultValue=false)]
        public bool? ShapeBorderColorFieldRequired { get; set; }

        /// <summary>
        /// Gets or Sets CombinedFieldNames
        /// </summary>
        [DataMember(Name="combinedFieldNames", EmitDefaultValue=false)]
        public string CombinedFieldNames { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets NumberConditionRangeExclusiveMin
        /// </summary>
        [DataMember(Name="numberConditionRangeExclusiveMin", EmitDefaultValue=false)]
        public bool? NumberConditionRangeExclusiveMin { get; set; }

        /// <summary>
        /// Gets or Sets CombinedFieldSeparator
        /// </summary>
        [DataMember(Name="combinedFieldSeparator", EmitDefaultValue=false)]
        public string CombinedFieldSeparator { get; set; }

        /// <summary>
        /// Gets or Sets ExclusiveMaximum
        /// </summary>
        [DataMember(Name="exclusiveMaximum", EmitDefaultValue=false)]
        public bool? ExclusiveMaximum { get; set; }

        /// <summary>
        /// Gets or Sets Default
        /// </summary>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public string Default { get; set; }

        /// <summary>
        /// Gets or Sets CombinedFieldType
        /// </summary>
        [DataMember(Name="combinedFieldType", EmitDefaultValue=false)]
        public string CombinedFieldType { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeFormat
        /// </summary>
        [DataMember(Name="dateTimeFormat", EmitDefaultValue=false)]
        public string DateTimeFormat { get; set; }

        /// <summary>
        /// Gets or Sets QrcodeColorFieldRequired
        /// </summary>
        [DataMember(Name="qrcodeColorFieldRequired", EmitDefaultValue=false)]
        public bool? QrcodeColorFieldRequired { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public bool? Currency { get; set; }

        /// <summary>
        /// Gets or Sets Strikethrough
        /// </summary>
        [DataMember(Name="strikethrough", EmitDefaultValue=false)]
        public bool? Strikethrough { get; set; }

        /// <summary>
        /// Gets or Sets FalseText
        /// </summary>
        [DataMember(Name="falseText", EmitDefaultValue=false)]
        public string FalseText { get; set; }

        /// <summary>
        /// Gets or Sets CharacterSpacing
        /// </summary>
        [DataMember(Name="characterSpacing", EmitDefaultValue=false)]
        public decimal? CharacterSpacing { get; set; }

        /// <summary>
        /// Gets or Sets NumberConditionRangeMax
        /// </summary>
        [DataMember(Name="numberConditionRangeMax", EmitDefaultValue=false)]
        public decimal? NumberConditionRangeMax { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [DataMember(Name="backgroundColor", EmitDefaultValue=false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets CheckColorFieldName
        /// </summary>
        [DataMember(Name="checkColorFieldName", EmitDefaultValue=false)]
        public string CheckColorFieldName { get; set; }


        /// <summary>
        /// Gets or Sets Rotation
        /// </summary>
        [DataMember(Name="rotation", EmitDefaultValue=false)]
        public decimal? Rotation { get; set; }

        /// <summary>
        /// Gets or Sets OptionList
        /// </summary>
        [DataMember(Name="optionList", EmitDefaultValue=false)]
        public string OptionList { get; set; }

        /// <summary>
        /// Gets or Sets ShapeFillColor
        /// </summary>
        [DataMember(Name="shapeFillColor", EmitDefaultValue=false)]
        public string ShapeFillColor { get; set; }


        /// <summary>
        /// Gets or Sets ShapeFillColorFieldRequired
        /// </summary>
        [DataMember(Name="shapeFillColorFieldRequired", EmitDefaultValue=false)]
        public bool? ShapeFillColorFieldRequired { get; set; }

        /// <summary>
        /// Gets or Sets IncludeTime
        /// </summary>
        [DataMember(Name="includeTime", EmitDefaultValue=false)]
        public bool? IncludeTime { get; set; }

        /// <summary>
        /// Gets or Sets DecimalPlaces
        /// </summary>
        [DataMember(Name="decimalPlaces", EmitDefaultValue=false)]
        public decimal? DecimalPlaces { get; set; }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name="x", EmitDefaultValue=false)]
        public decimal? X { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public decimal? Width { get; set; }

        /// <summary>
        /// Gets or Sets Maximum
        /// </summary>
        [DataMember(Name="maximum", EmitDefaultValue=false)]
        public decimal? Maximum { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name="y", EmitDefaultValue=false)]
        public decimal? Y { get; set; }

        /// <summary>
        /// Gets or Sets SignatureAllowDraw
        /// </summary>
        [DataMember(Name="signatureAllowDraw", EmitDefaultValue=false)]
        public bool? SignatureAllowDraw { get; set; }

        /// <summary>
        /// Gets or Sets Opacity
        /// </summary>
        [DataMember(Name="opacity", EmitDefaultValue=false)]
        public decimal? Opacity { get; set; }


        /// <summary>
        /// Gets or Sets Minimum
        /// </summary>
        [DataMember(Name="minimum", EmitDefaultValue=false)]
        public decimal? Minimum { get; set; }

        /// <summary>
        /// Gets or Sets SignatureAllowType
        /// </summary>
        [DataMember(Name="signatureAllowType", EmitDefaultValue=false)]
        public bool? SignatureAllowType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplatestemplateIdaddFieldsFields {\n");
            sb.Append("  Uppercase: ").Append(Uppercase).Append("\n");
            sb.Append("  BackgroundColorFieldName: ").Append(BackgroundColorFieldName).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  BarcodeSymbology: ").Append(BarcodeSymbology).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  Integer: ").Append(Integer).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  CombValueOffset: ").Append(CombValueOffset).Append("\n");
            sb.Append("  ImageGravity: ").Append(ImageGravity).Append("\n");
            sb.Append("  Overflow: ").Append(Overflow).Append("\n");
            sb.Append("  QrcodeColor: ").Append(QrcodeColor).Append("\n");
            sb.Append("  ColorFieldRequired: ").Append(ColorFieldRequired).Append("\n");
            sb.Append("  BackgroundColorFieldRequired: ").Append(BackgroundColorFieldRequired).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageScaleType: ").Append(ImageScaleType).Append("\n");
            sb.Append("  ExclusiveMinimum: ").Append(ExclusiveMinimum).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  NumberConditionRangeExclusiveMax: ").Append(NumberConditionRangeExclusiveMax).Append("\n");
            sb.Append("  InvertBooleanCondition: ").Append(InvertBooleanCondition).Append("\n");
            sb.Append("  Static: ").Append(Static).Append("\n");
            sb.Append("  ShapeFillColorFieldName: ").Append(ShapeFillColorFieldName).Append("\n");
            sb.Append("  ShapeBorderColorFieldName: ").Append(ShapeBorderColorFieldName).Append("\n");
            sb.Append("  VAlignment: ").Append(VAlignment).Append("\n");
            sb.Append("  Bold: ").Append(Bold).Append("\n");
            sb.Append("  ShapeBorderWidth: ").Append(ShapeBorderWidth).Append("\n");
            sb.Append("  CombNumberOfCells: ").Append(CombNumberOfCells).Append("\n");
            sb.Append("  ShapeBorderColor: ").Append(ShapeBorderColor).Append("\n");
            sb.Append("  Typeface: ").Append(Typeface).Append("\n");
            sb.Append("  Comb: ").Append(Comb).Append("\n");
            sb.Append("  ShapeType: ").Append(ShapeType).Append("\n");
            sb.Append("  DisplayType: ").Append(DisplayType).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  CheckColor: ").Append(CheckColor).Append("\n");
            sb.Append("  MultilineLines: ").Append(MultilineLines).Append("\n");
            sb.Append("  Multiline: ").Append(Multiline).Append("\n");
            sb.Append("  TrueText: ").Append(TrueText).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Alignment: ").Append(Alignment).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  AutoCalculateMaxLength: ").Append(AutoCalculateMaxLength).Append("\n");
            sb.Append("  ColorFieldName: ").Append(ColorFieldName).Append("\n");
            sb.Append("  QrcodeColorFieldName: ").Append(QrcodeColorFieldName).Append("\n");
            sb.Append("  NumberConditionRangeMin: ").Append(NumberConditionRangeMin).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  CheckColorFieldRequired: ").Append(CheckColorFieldRequired).Append("\n");
            sb.Append("  CombinedFieldFormat: ").Append(CombinedFieldFormat).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ShapeBorderColorFieldRequired: ").Append(ShapeBorderColorFieldRequired).Append("\n");
            sb.Append("  CombinedFieldNames: ").Append(CombinedFieldNames).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  NumberConditionRangeExclusiveMin: ").Append(NumberConditionRangeExclusiveMin).Append("\n");
            sb.Append("  CombinedFieldSeparator: ").Append(CombinedFieldSeparator).Append("\n");
            sb.Append("  ExclusiveMaximum: ").Append(ExclusiveMaximum).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  CombinedFieldType: ").Append(CombinedFieldType).Append("\n");
            sb.Append("  DateTimeFormat: ").Append(DateTimeFormat).Append("\n");
            sb.Append("  QrcodeColorFieldRequired: ").Append(QrcodeColorFieldRequired).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Strikethrough: ").Append(Strikethrough).Append("\n");
            sb.Append("  FalseText: ").Append(FalseText).Append("\n");
            sb.Append("  CharacterSpacing: ").Append(CharacterSpacing).Append("\n");
            sb.Append("  NumberConditionRangeMax: ").Append(NumberConditionRangeMax).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  CheckColorFieldName: ").Append(CheckColorFieldName).Append("\n");
            sb.Append("  CheckCharacter: ").Append(CheckCharacter).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("  OptionList: ").Append(OptionList).Append("\n");
            sb.Append("  ShapeFillColor: ").Append(ShapeFillColor).Append("\n");
            sb.Append("  StringConditionType: ").Append(StringConditionType).Append("\n");
            sb.Append("  ShapeFillColorFieldRequired: ").Append(ShapeFillColorFieldRequired).Append("\n");
            sb.Append("  IncludeTime: ").Append(IncludeTime).Append("\n");
            sb.Append("  DecimalPlaces: ").Append(DecimalPlaces).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  SignatureAllowDraw: ").Append(SignatureAllowDraw).Append("\n");
            sb.Append("  Opacity: ").Append(Opacity).Append("\n");
            sb.Append("  NumberConditionType: ").Append(NumberConditionType).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  SignatureAllowType: ").Append(SignatureAllowType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplatestemplateIdaddFieldsFields);
        }

        /// <summary>
        /// Returns true if TemplatestemplateIdaddFieldsFields instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplatestemplateIdaddFieldsFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplatestemplateIdaddFieldsFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uppercase == input.Uppercase ||
                    (this.Uppercase != null &&
                    this.Uppercase.Equals(input.Uppercase))
                ) && 
                (
                    this.BackgroundColorFieldName == input.BackgroundColorFieldName ||
                    (this.BackgroundColorFieldName != null &&
                    this.BackgroundColorFieldName.Equals(input.BackgroundColorFieldName))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.BarcodeSymbology == input.BarcodeSymbology ||
                    (this.BarcodeSymbology != null &&
                    this.BarcodeSymbology.Equals(input.BarcodeSymbology))
                ) && 
                (
                    this.MinLength == input.MinLength ||
                    (this.MinLength != null &&
                    this.MinLength.Equals(input.MinLength))
                ) && 
                (
                    this.Integer == input.Integer ||
                    (this.Integer != null &&
                    this.Integer.Equals(input.Integer))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.CombValueOffset == input.CombValueOffset ||
                    (this.CombValueOffset != null &&
                    this.CombValueOffset.Equals(input.CombValueOffset))
                ) && 
                (
                    this.ImageGravity == input.ImageGravity ||
                    (this.ImageGravity != null &&
                    this.ImageGravity.Equals(input.ImageGravity))
                ) && 
                (
                    this.Overflow == input.Overflow ||
                    (this.Overflow != null &&
                    this.Overflow.Equals(input.Overflow))
                ) && 
                (
                    this.QrcodeColor == input.QrcodeColor ||
                    (this.QrcodeColor != null &&
                    this.QrcodeColor.Equals(input.QrcodeColor))
                ) && 
                (
                    this.ColorFieldRequired == input.ColorFieldRequired ||
                    (this.ColorFieldRequired != null &&
                    this.ColorFieldRequired.Equals(input.ColorFieldRequired))
                ) && 
                (
                    this.BackgroundColorFieldRequired == input.BackgroundColorFieldRequired ||
                    (this.BackgroundColorFieldRequired != null &&
                    this.BackgroundColorFieldRequired.Equals(input.BackgroundColorFieldRequired))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImageScaleType == input.ImageScaleType ||
                    (this.ImageScaleType != null &&
                    this.ImageScaleType.Equals(input.ImageScaleType))
                ) && 
                (
                    this.ExclusiveMinimum == input.ExclusiveMinimum ||
                    (this.ExclusiveMinimum != null &&
                    this.ExclusiveMinimum.Equals(input.ExclusiveMinimum))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.NumberConditionRangeExclusiveMax == input.NumberConditionRangeExclusiveMax ||
                    (this.NumberConditionRangeExclusiveMax != null &&
                    this.NumberConditionRangeExclusiveMax.Equals(input.NumberConditionRangeExclusiveMax))
                ) && 
                (
                    this.InvertBooleanCondition == input.InvertBooleanCondition ||
                    (this.InvertBooleanCondition != null &&
                    this.InvertBooleanCondition.Equals(input.InvertBooleanCondition))
                ) && 
                (
                    this.Static == input.Static ||
                    (this.Static != null &&
                    this.Static.Equals(input.Static))
                ) && 
                (
                    this.ShapeFillColorFieldName == input.ShapeFillColorFieldName ||
                    (this.ShapeFillColorFieldName != null &&
                    this.ShapeFillColorFieldName.Equals(input.ShapeFillColorFieldName))
                ) && 
                (
                    this.ShapeBorderColorFieldName == input.ShapeBorderColorFieldName ||
                    (this.ShapeBorderColorFieldName != null &&
                    this.ShapeBorderColorFieldName.Equals(input.ShapeBorderColorFieldName))
                ) && 
                (
                    this.VAlignment == input.VAlignment ||
                    (this.VAlignment != null &&
                    this.VAlignment.Equals(input.VAlignment))
                ) && 
                (
                    this.Bold == input.Bold ||
                    (this.Bold != null &&
                    this.Bold.Equals(input.Bold))
                ) && 
                (
                    this.ShapeBorderWidth == input.ShapeBorderWidth ||
                    (this.ShapeBorderWidth != null &&
                    this.ShapeBorderWidth.Equals(input.ShapeBorderWidth))
                ) && 
                (
                    this.CombNumberOfCells == input.CombNumberOfCells ||
                    (this.CombNumberOfCells != null &&
                    this.CombNumberOfCells.Equals(input.CombNumberOfCells))
                ) && 
                (
                    this.ShapeBorderColor == input.ShapeBorderColor ||
                    (this.ShapeBorderColor != null &&
                    this.ShapeBorderColor.Equals(input.ShapeBorderColor))
                ) && 
                (
                    this.Typeface == input.Typeface ||
                    (this.Typeface != null &&
                    this.Typeface.Equals(input.Typeface))
                ) && 
                (
                    this.Comb == input.Comb ||
                    (this.Comb != null &&
                    this.Comb.Equals(input.Comb))
                ) && 
                (
                    this.ShapeType == input.ShapeType ||
                    (this.ShapeType != null &&
                    this.ShapeType.Equals(input.ShapeType))
                ) && 
                (
                    this.DisplayType == input.DisplayType ||
                    (this.DisplayType != null &&
                    this.DisplayType.Equals(input.DisplayType))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.CheckColor == input.CheckColor ||
                    (this.CheckColor != null &&
                    this.CheckColor.Equals(input.CheckColor))
                ) && 
                (
                    this.MultilineLines == input.MultilineLines ||
                    (this.MultilineLines != null &&
                    this.MultilineLines.Equals(input.MultilineLines))
                ) && 
                (
                    this.Multiline == input.Multiline ||
                    (this.Multiline != null &&
                    this.Multiline.Equals(input.Multiline))
                ) && 
                (
                    this.TrueText == input.TrueText ||
                    (this.TrueText != null &&
                    this.TrueText.Equals(input.TrueText))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FontSize == input.FontSize ||
                    (this.FontSize != null &&
                    this.FontSize.Equals(input.FontSize))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.Alignment == input.Alignment ||
                    (this.Alignment != null &&
                    this.Alignment.Equals(input.Alignment))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.AutoCalculateMaxLength == input.AutoCalculateMaxLength ||
                    (this.AutoCalculateMaxLength != null &&
                    this.AutoCalculateMaxLength.Equals(input.AutoCalculateMaxLength))
                ) && 
                (
                    this.ColorFieldName == input.ColorFieldName ||
                    (this.ColorFieldName != null &&
                    this.ColorFieldName.Equals(input.ColorFieldName))
                ) && 
                (
                    this.QrcodeColorFieldName == input.QrcodeColorFieldName ||
                    (this.QrcodeColorFieldName != null &&
                    this.QrcodeColorFieldName.Equals(input.QrcodeColorFieldName))
                ) && 
                (
                    this.NumberConditionRangeMin == input.NumberConditionRangeMin ||
                    (this.NumberConditionRangeMin != null &&
                    this.NumberConditionRangeMin.Equals(input.NumberConditionRangeMin))
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    (this.Hidden != null &&
                    this.Hidden.Equals(input.Hidden))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.CheckColorFieldRequired == input.CheckColorFieldRequired ||
                    (this.CheckColorFieldRequired != null &&
                    this.CheckColorFieldRequired.Equals(input.CheckColorFieldRequired))
                ) && 
                (
                    this.CombinedFieldFormat == input.CombinedFieldFormat ||
                    (this.CombinedFieldFormat != null &&
                    this.CombinedFieldFormat.Equals(input.CombinedFieldFormat))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ShapeBorderColorFieldRequired == input.ShapeBorderColorFieldRequired ||
                    (this.ShapeBorderColorFieldRequired != null &&
                    this.ShapeBorderColorFieldRequired.Equals(input.ShapeBorderColorFieldRequired))
                ) && 
                (
                    this.CombinedFieldNames == input.CombinedFieldNames ||
                    (this.CombinedFieldNames != null &&
                    this.CombinedFieldNames.Equals(input.CombinedFieldNames))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.NumberConditionRangeExclusiveMin == input.NumberConditionRangeExclusiveMin ||
                    (this.NumberConditionRangeExclusiveMin != null &&
                    this.NumberConditionRangeExclusiveMin.Equals(input.NumberConditionRangeExclusiveMin))
                ) && 
                (
                    this.CombinedFieldSeparator == input.CombinedFieldSeparator ||
                    (this.CombinedFieldSeparator != null &&
                    this.CombinedFieldSeparator.Equals(input.CombinedFieldSeparator))
                ) && 
                (
                    this.ExclusiveMaximum == input.ExclusiveMaximum ||
                    (this.ExclusiveMaximum != null &&
                    this.ExclusiveMaximum.Equals(input.ExclusiveMaximum))
                ) && 
                (
                    this.Default == input.Default ||
                    (this.Default != null &&
                    this.Default.Equals(input.Default))
                ) && 
                (
                    this.CombinedFieldType == input.CombinedFieldType ||
                    (this.CombinedFieldType != null &&
                    this.CombinedFieldType.Equals(input.CombinedFieldType))
                ) && 
                (
                    this.DateTimeFormat == input.DateTimeFormat ||
                    (this.DateTimeFormat != null &&
                    this.DateTimeFormat.Equals(input.DateTimeFormat))
                ) && 
                (
                    this.QrcodeColorFieldRequired == input.QrcodeColorFieldRequired ||
                    (this.QrcodeColorFieldRequired != null &&
                    this.QrcodeColorFieldRequired.Equals(input.QrcodeColorFieldRequired))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Strikethrough == input.Strikethrough ||
                    (this.Strikethrough != null &&
                    this.Strikethrough.Equals(input.Strikethrough))
                ) && 
                (
                    this.FalseText == input.FalseText ||
                    (this.FalseText != null &&
                    this.FalseText.Equals(input.FalseText))
                ) && 
                (
                    this.CharacterSpacing == input.CharacterSpacing ||
                    (this.CharacterSpacing != null &&
                    this.CharacterSpacing.Equals(input.CharacterSpacing))
                ) && 
                (
                    this.NumberConditionRangeMax == input.NumberConditionRangeMax ||
                    (this.NumberConditionRangeMax != null &&
                    this.NumberConditionRangeMax.Equals(input.NumberConditionRangeMax))
                ) && 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                ) && 
                (
                    this.CheckColorFieldName == input.CheckColorFieldName ||
                    (this.CheckColorFieldName != null &&
                    this.CheckColorFieldName.Equals(input.CheckColorFieldName))
                ) && 
                (
                    this.CheckCharacter == input.CheckCharacter ||
                    (this.CheckCharacter != null &&
                    this.CheckCharacter.Equals(input.CheckCharacter))
                ) && 
                (
                    this.Rotation == input.Rotation ||
                    (this.Rotation != null &&
                    this.Rotation.Equals(input.Rotation))
                ) && 
                (
                    this.OptionList == input.OptionList ||
                    (this.OptionList != null &&
                    this.OptionList.Equals(input.OptionList))
                ) && 
                (
                    this.ShapeFillColor == input.ShapeFillColor ||
                    (this.ShapeFillColor != null &&
                    this.ShapeFillColor.Equals(input.ShapeFillColor))
                ) && 
                (
                    this.StringConditionType == input.StringConditionType ||
                    (this.StringConditionType != null &&
                    this.StringConditionType.Equals(input.StringConditionType))
                ) && 
                (
                    this.ShapeFillColorFieldRequired == input.ShapeFillColorFieldRequired ||
                    (this.ShapeFillColorFieldRequired != null &&
                    this.ShapeFillColorFieldRequired.Equals(input.ShapeFillColorFieldRequired))
                ) && 
                (
                    this.IncludeTime == input.IncludeTime ||
                    (this.IncludeTime != null &&
                    this.IncludeTime.Equals(input.IncludeTime))
                ) && 
                (
                    this.DecimalPlaces == input.DecimalPlaces ||
                    (this.DecimalPlaces != null &&
                    this.DecimalPlaces.Equals(input.DecimalPlaces))
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Maximum == input.Maximum ||
                    (this.Maximum != null &&
                    this.Maximum.Equals(input.Maximum))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.SignatureAllowDraw == input.SignatureAllowDraw ||
                    (this.SignatureAllowDraw != null &&
                    this.SignatureAllowDraw.Equals(input.SignatureAllowDraw))
                ) && 
                (
                    this.Opacity == input.Opacity ||
                    (this.Opacity != null &&
                    this.Opacity.Equals(input.Opacity))
                ) && 
                (
                    this.NumberConditionType == input.NumberConditionType ||
                    (this.NumberConditionType != null &&
                    this.NumberConditionType.Equals(input.NumberConditionType))
                ) && 
                (
                    this.Minimum == input.Minimum ||
                    (this.Minimum != null &&
                    this.Minimum.Equals(input.Minimum))
                ) && 
                (
                    this.SignatureAllowType == input.SignatureAllowType ||
                    (this.SignatureAllowType != null &&
                    this.SignatureAllowType.Equals(input.SignatureAllowType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uppercase != null)
                    hashCode = hashCode * 59 + this.Uppercase.GetHashCode();
                if (this.BackgroundColorFieldName != null)
                    hashCode = hashCode * 59 + this.BackgroundColorFieldName.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.BarcodeSymbology != null)
                    hashCode = hashCode * 59 + this.BarcodeSymbology.GetHashCode();
                if (this.MinLength != null)
                    hashCode = hashCode * 59 + this.MinLength.GetHashCode();
                if (this.Integer != null)
                    hashCode = hashCode * 59 + this.Integer.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.CombValueOffset != null)
                    hashCode = hashCode * 59 + this.CombValueOffset.GetHashCode();
                if (this.ImageGravity != null)
                    hashCode = hashCode * 59 + this.ImageGravity.GetHashCode();
                if (this.Overflow != null)
                    hashCode = hashCode * 59 + this.Overflow.GetHashCode();
                if (this.QrcodeColor != null)
                    hashCode = hashCode * 59 + this.QrcodeColor.GetHashCode();
                if (this.ColorFieldRequired != null)
                    hashCode = hashCode * 59 + this.ColorFieldRequired.GetHashCode();
                if (this.BackgroundColorFieldRequired != null)
                    hashCode = hashCode * 59 + this.BackgroundColorFieldRequired.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImageScaleType != null)
                    hashCode = hashCode * 59 + this.ImageScaleType.GetHashCode();
                if (this.ExclusiveMinimum != null)
                    hashCode = hashCode * 59 + this.ExclusiveMinimum.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.NumberConditionRangeExclusiveMax != null)
                    hashCode = hashCode * 59 + this.NumberConditionRangeExclusiveMax.GetHashCode();
                if (this.InvertBooleanCondition != null)
                    hashCode = hashCode * 59 + this.InvertBooleanCondition.GetHashCode();
                if (this.Static != null)
                    hashCode = hashCode * 59 + this.Static.GetHashCode();
                if (this.ShapeFillColorFieldName != null)
                    hashCode = hashCode * 59 + this.ShapeFillColorFieldName.GetHashCode();
                if (this.ShapeBorderColorFieldName != null)
                    hashCode = hashCode * 59 + this.ShapeBorderColorFieldName.GetHashCode();
                if (this.VAlignment != null)
                    hashCode = hashCode * 59 + this.VAlignment.GetHashCode();
                if (this.Bold != null)
                    hashCode = hashCode * 59 + this.Bold.GetHashCode();
                if (this.ShapeBorderWidth != null)
                    hashCode = hashCode * 59 + this.ShapeBorderWidth.GetHashCode();
                if (this.CombNumberOfCells != null)
                    hashCode = hashCode * 59 + this.CombNumberOfCells.GetHashCode();
                if (this.ShapeBorderColor != null)
                    hashCode = hashCode * 59 + this.ShapeBorderColor.GetHashCode();
                if (this.Typeface != null)
                    hashCode = hashCode * 59 + this.Typeface.GetHashCode();
                if (this.Comb != null)
                    hashCode = hashCode * 59 + this.Comb.GetHashCode();
                if (this.ShapeType != null)
                    hashCode = hashCode * 59 + this.ShapeType.GetHashCode();
                if (this.DisplayType != null)
                    hashCode = hashCode * 59 + this.DisplayType.GetHashCode();
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.CheckColor != null)
                    hashCode = hashCode * 59 + this.CheckColor.GetHashCode();
                if (this.MultilineLines != null)
                    hashCode = hashCode * 59 + this.MultilineLines.GetHashCode();
                if (this.Multiline != null)
                    hashCode = hashCode * 59 + this.Multiline.GetHashCode();
                if (this.TrueText != null)
                    hashCode = hashCode * 59 + this.TrueText.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.FontSize != null)
                    hashCode = hashCode * 59 + this.FontSize.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                if (this.Alignment != null)
                    hashCode = hashCode * 59 + this.Alignment.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.AutoCalculateMaxLength != null)
                    hashCode = hashCode * 59 + this.AutoCalculateMaxLength.GetHashCode();
                if (this.ColorFieldName != null)
                    hashCode = hashCode * 59 + this.ColorFieldName.GetHashCode();
                if (this.QrcodeColorFieldName != null)
                    hashCode = hashCode * 59 + this.QrcodeColorFieldName.GetHashCode();
                if (this.NumberConditionRangeMin != null)
                    hashCode = hashCode * 59 + this.NumberConditionRangeMin.GetHashCode();
                if (this.Hidden != null)
                    hashCode = hashCode * 59 + this.Hidden.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.CheckColorFieldRequired != null)
                    hashCode = hashCode * 59 + this.CheckColorFieldRequired.GetHashCode();
                if (this.CombinedFieldFormat != null)
                    hashCode = hashCode * 59 + this.CombinedFieldFormat.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ShapeBorderColorFieldRequired != null)
                    hashCode = hashCode * 59 + this.ShapeBorderColorFieldRequired.GetHashCode();
                if (this.CombinedFieldNames != null)
                    hashCode = hashCode * 59 + this.CombinedFieldNames.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.NumberConditionRangeExclusiveMin != null)
                    hashCode = hashCode * 59 + this.NumberConditionRangeExclusiveMin.GetHashCode();
                if (this.CombinedFieldSeparator != null)
                    hashCode = hashCode * 59 + this.CombinedFieldSeparator.GetHashCode();
                if (this.ExclusiveMaximum != null)
                    hashCode = hashCode * 59 + this.ExclusiveMaximum.GetHashCode();
                if (this.Default != null)
                    hashCode = hashCode * 59 + this.Default.GetHashCode();
                if (this.CombinedFieldType != null)
                    hashCode = hashCode * 59 + this.CombinedFieldType.GetHashCode();
                if (this.DateTimeFormat != null)
                    hashCode = hashCode * 59 + this.DateTimeFormat.GetHashCode();
                if (this.QrcodeColorFieldRequired != null)
                    hashCode = hashCode * 59 + this.QrcodeColorFieldRequired.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Strikethrough != null)
                    hashCode = hashCode * 59 + this.Strikethrough.GetHashCode();
                if (this.FalseText != null)
                    hashCode = hashCode * 59 + this.FalseText.GetHashCode();
                if (this.CharacterSpacing != null)
                    hashCode = hashCode * 59 + this.CharacterSpacing.GetHashCode();
                if (this.NumberConditionRangeMax != null)
                    hashCode = hashCode * 59 + this.NumberConditionRangeMax.GetHashCode();
                if (this.BackgroundColor != null)
                    hashCode = hashCode * 59 + this.BackgroundColor.GetHashCode();
                if (this.CheckColorFieldName != null)
                    hashCode = hashCode * 59 + this.CheckColorFieldName.GetHashCode();
                if (this.CheckCharacter != null)
                    hashCode = hashCode * 59 + this.CheckCharacter.GetHashCode();
                if (this.Rotation != null)
                    hashCode = hashCode * 59 + this.Rotation.GetHashCode();
                if (this.OptionList != null)
                    hashCode = hashCode * 59 + this.OptionList.GetHashCode();
                if (this.ShapeFillColor != null)
                    hashCode = hashCode * 59 + this.ShapeFillColor.GetHashCode();
                if (this.StringConditionType != null)
                    hashCode = hashCode * 59 + this.StringConditionType.GetHashCode();
                if (this.ShapeFillColorFieldRequired != null)
                    hashCode = hashCode * 59 + this.ShapeFillColorFieldRequired.GetHashCode();
                if (this.IncludeTime != null)
                    hashCode = hashCode * 59 + this.IncludeTime.GetHashCode();
                if (this.DecimalPlaces != null)
                    hashCode = hashCode * 59 + this.DecimalPlaces.GetHashCode();
                if (this.X != null)
                    hashCode = hashCode * 59 + this.X.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Maximum != null)
                    hashCode = hashCode * 59 + this.Maximum.GetHashCode();
                if (this.Y != null)
                    hashCode = hashCode * 59 + this.Y.GetHashCode();
                if (this.SignatureAllowDraw != null)
                    hashCode = hashCode * 59 + this.SignatureAllowDraw.GetHashCode();
                if (this.Opacity != null)
                    hashCode = hashCode * 59 + this.Opacity.GetHashCode();
                if (this.NumberConditionType != null)
                    hashCode = hashCode * 59 + this.NumberConditionType.GetHashCode();
                if (this.Minimum != null)
                    hashCode = hashCode * 59 + this.Minimum.GetHashCode();
                if (this.SignatureAllowType != null)
                    hashCode = hashCode * 59 + this.SignatureAllowType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (decimal?) minimum
            if(this.Id < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must be a value greater than or equal to 0.", new [] { "Id" });
            }

            // Height (decimal?) minimum
            if(this.Height < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Height, must be a value greater than or equal to 0.", new [] { "Height" });
            }

            // ShapeBorderWidth (decimal?) minimum
            if(this.ShapeBorderWidth < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShapeBorderWidth, must be a value greater than or equal to 0.", new [] { "ShapeBorderWidth" });
            }

            // CombNumberOfCells (decimal?) minimum
            if(this.CombNumberOfCells < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CombNumberOfCells, must be a value greater than or equal to 0.", new [] { "CombNumberOfCells" });
            }

            // MultilineLines (decimal?) minimum
            if(this.MultilineLines < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MultilineLines, must be a value greater than or equal to 0.", new [] { "MultilineLines" });
            }

            // FontSize (decimal?) minimum
            if(this.FontSize < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FontSize, must be a value greater than or equal to 0.", new [] { "FontSize" });
            }

            // Page (decimal?) minimum
            if(this.Page < (decimal?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Page, must be a value greater than or equal to 1.", new [] { "Page" });
            }

            // Rotation (decimal?) maximum
            if(this.Rotation > (decimal?)3.6E+2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rotation, must be a value less than or equal to 3.6E+2.", new [] { "Rotation" });
            }

            // Rotation (decimal?) minimum
            if(this.Rotation < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rotation, must be a value greater than or equal to 0.", new [] { "Rotation" });
            }

            // DecimalPlaces (decimal?) minimum
            if(this.DecimalPlaces < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DecimalPlaces, must be a value greater than or equal to 0.", new [] { "DecimalPlaces" });
            }

            // X (decimal?) minimum
            if(this.X < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for X, must be a value greater than or equal to 0.", new [] { "X" });
            }

            // Width (decimal?) minimum
            if(this.Width < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Width, must be a value greater than or equal to 0.", new [] { "Width" });
            }

            // Y (decimal?) minimum
            if(this.Y < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Y, must be a value greater than or equal to 0.", new [] { "Y" });
            }

            // Opacity (decimal?) maximum
            if(this.Opacity > (decimal?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Opacity, must be a value less than or equal to 1.", new [] { "Opacity" });
            }

            // Opacity (decimal?) minimum
            if(this.Opacity < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Opacity, must be a value greater than or equal to 0.", new [] { "Opacity" });
            }

            yield break;
        }
    }

}
