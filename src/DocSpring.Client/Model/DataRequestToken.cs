/*
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// DataRequestToken
    /// </summary>
    [DataContract(Name = "data_request_token")]
    public partial class DataRequestToken : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataRequestToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataRequestToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataRequestToken" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="secret">secret (required).</param>
        /// <param name="expiresAt">expiresAt (required).</param>
        /// <param name="dataRequestUrl">dataRequestUrl (required).</param>
        public DataRequestToken(string id = default(string), string secret = default(string), string expiresAt = default(string), string dataRequestUrl = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for DataRequestToken and cannot be null");
            }
            this.Id = id;
            // to ensure "secret" is required (not null)
            if (secret == null)
            {
                throw new ArgumentNullException("secret is a required property for DataRequestToken and cannot be null");
            }
            this.Secret = secret;
            // to ensure "expiresAt" is required (not null)
            if (expiresAt == null)
            {
                throw new ArgumentNullException("expiresAt is a required property for DataRequestToken and cannot be null");
            }
            this.ExpiresAt = expiresAt;
            // to ensure "dataRequestUrl" is required (not null)
            if (dataRequestUrl == null)
            {
                throw new ArgumentNullException("dataRequestUrl is a required property for DataRequestToken and cannot be null");
            }
            this.DataRequestUrl = dataRequestUrl;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name = "secret", IsRequired = true, EmitDefaultValue = true)]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name = "expires_at", IsRequired = true, EmitDefaultValue = true)]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets DataRequestUrl
        /// </summary>
        [DataMember(Name = "data_request_url", IsRequired = true, EmitDefaultValue = true)]
        public string DataRequestUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataRequestToken {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  DataRequestUrl: ").Append(DataRequestUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
