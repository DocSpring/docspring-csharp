/*
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// UploadTemplateData
    /// </summary>
    [DataContract(Name = "upload_template_data")]
    public partial class UploadTemplateData : IValidatableObject
    {
        /// <summary>
        /// Defines ExpirationInterval
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExpirationIntervalEnum
        {
            /// <summary>
            /// Enum Minutes for value: minutes
            /// </summary>
            [EnumMember(Value = "minutes")]
            Minutes = 1,

            /// <summary>
            /// Enum Hours for value: hours
            /// </summary>
            [EnumMember(Value = "hours")]
            Hours = 2,

            /// <summary>
            /// Enum Days for value: days
            /// </summary>
            [EnumMember(Value = "days")]
            Days = 3
        }


        /// <summary>
        /// Gets or Sets ExpirationInterval
        /// </summary>
        [DataMember(Name = "expiration_interval", EmitDefaultValue = false)]
        public ExpirationIntervalEnum? ExpirationInterval { get; set; }
        /// <summary>
        /// Defines TemplateType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TemplateTypeEnum
        {
            /// <summary>
            /// Enum Pdf for value: pdf
            /// </summary>
            [EnumMember(Value = "pdf")]
            Pdf = 1,

            /// <summary>
            /// Enum Html for value: html
            /// </summary>
            [EnumMember(Value = "html")]
            Html = 2
        }


        /// <summary>
        /// Gets or Sets TemplateType
        /// </summary>
        [DataMember(Name = "template_type", EmitDefaultValue = false)]
        public TemplateTypeEnum? TemplateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadTemplateData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadTemplateData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadTemplateData" /> class.
        /// </summary>
        /// <param name="addDataRequestSubmissionIdFooters">addDataRequestSubmissionIdFooters.</param>
        /// <param name="allowAdditionalProperties">allowAdditionalProperties.</param>
        /// <param name="description">description.</param>
        /// <param name="document">document.</param>
        /// <param name="editableSubmissions">editableSubmissions.</param>
        /// <param name="expirationInterval">expirationInterval.</param>
        /// <param name="expireAfter">expireAfter.</param>
        /// <param name="expireSubmissions">expireSubmissions.</param>
        /// <param name="footerHtml">footerHtml.</param>
        /// <param name="headerHtml">headerHtml.</param>
        /// <param name="html">html.</param>
        /// <param name="mergeAuditTrailPdf">mergeAuditTrailPdf.</param>
        /// <param name="name">name (required).</param>
        /// <param name="publicSubmissions">publicSubmissions.</param>
        /// <param name="publicWebForm">publicWebForm.</param>
        /// <param name="redirectUrl">redirectUrl.</param>
        /// <param name="scss">scss.</param>
        /// <param name="slackWebhookUrl">slackWebhookUrl.</param>
        /// <param name="templateType">templateType.</param>
        /// <param name="webhookOptions">webhookOptions.</param>
        /// <param name="webhookUrl">webhookUrl.</param>
        public UploadTemplateData(bool addDataRequestSubmissionIdFooters = default(bool), bool allowAdditionalProperties = default(bool), string description = default(string), TemplateDocument document = default(TemplateDocument), bool editableSubmissions = default(bool), ExpirationIntervalEnum? expirationInterval = default(ExpirationIntervalEnum?), decimal expireAfter = default(decimal), bool expireSubmissions = default(bool), string footerHtml = default(string), string headerHtml = default(string), string html = default(string), bool mergeAuditTrailPdf = default(bool), string name = default(string), bool publicSubmissions = default(bool), bool publicWebForm = default(bool), string redirectUrl = default(string), string scss = default(string), string slackWebhookUrl = default(string), TemplateTypeEnum? templateType = default(TemplateTypeEnum?), HtmlTemplateDataWebhookOptions webhookOptions = default(HtmlTemplateDataWebhookOptions), string webhookUrl = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UploadTemplateData and cannot be null");
            }
            this.Name = name;
            this.AddDataRequestSubmissionIdFooters = addDataRequestSubmissionIdFooters;
            this.AllowAdditionalProperties = allowAdditionalProperties;
            this.Description = description;
            this.Document = document;
            this.EditableSubmissions = editableSubmissions;
            this.ExpirationInterval = expirationInterval;
            this.ExpireAfter = expireAfter;
            this.ExpireSubmissions = expireSubmissions;
            this.FooterHtml = footerHtml;
            this.HeaderHtml = headerHtml;
            this.Html = html;
            this.MergeAuditTrailPdf = mergeAuditTrailPdf;
            this.PublicSubmissions = publicSubmissions;
            this.PublicWebForm = publicWebForm;
            this.RedirectUrl = redirectUrl;
            this.Scss = scss;
            this.SlackWebhookUrl = slackWebhookUrl;
            this.TemplateType = templateType;
            this.WebhookOptions = webhookOptions;
            this.WebhookUrl = webhookUrl;
        }

        /// <summary>
        /// Gets or Sets AddDataRequestSubmissionIdFooters
        /// </summary>
        [DataMember(Name = "add_data_request_submission_id_footers", EmitDefaultValue = true)]
        public bool AddDataRequestSubmissionIdFooters { get; set; }

        /// <summary>
        /// Gets or Sets AllowAdditionalProperties
        /// </summary>
        [DataMember(Name = "allow_additional_properties", EmitDefaultValue = true)]
        public bool AllowAdditionalProperties { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name = "document", EmitDefaultValue = false)]
        public TemplateDocument Document { get; set; }

        /// <summary>
        /// Gets or Sets EditableSubmissions
        /// </summary>
        [DataMember(Name = "editable_submissions", EmitDefaultValue = true)]
        public bool EditableSubmissions { get; set; }

        /// <summary>
        /// Gets or Sets ExpireAfter
        /// </summary>
        [DataMember(Name = "expire_after", EmitDefaultValue = false)]
        public decimal ExpireAfter { get; set; }

        /// <summary>
        /// Gets or Sets ExpireSubmissions
        /// </summary>
        [DataMember(Name = "expire_submissions", EmitDefaultValue = true)]
        public bool ExpireSubmissions { get; set; }

        /// <summary>
        /// Gets or Sets FooterHtml
        /// </summary>
        [DataMember(Name = "footer_html", EmitDefaultValue = true)]
        public string FooterHtml { get; set; }

        /// <summary>
        /// Gets or Sets HeaderHtml
        /// </summary>
        [DataMember(Name = "header_html", EmitDefaultValue = true)]
        public string HeaderHtml { get; set; }

        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [DataMember(Name = "html", EmitDefaultValue = true)]
        public string Html { get; set; }

        /// <summary>
        /// Gets or Sets MergeAuditTrailPdf
        /// </summary>
        [DataMember(Name = "merge_audit_trail_pdf", EmitDefaultValue = true)]
        public bool MergeAuditTrailPdf { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PublicSubmissions
        /// </summary>
        [DataMember(Name = "public_submissions", EmitDefaultValue = true)]
        public bool PublicSubmissions { get; set; }

        /// <summary>
        /// Gets or Sets PublicWebForm
        /// </summary>
        [DataMember(Name = "public_web_form", EmitDefaultValue = true)]
        public bool PublicWebForm { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUrl
        /// </summary>
        [DataMember(Name = "redirect_url", EmitDefaultValue = true)]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// Gets or Sets Scss
        /// </summary>
        [DataMember(Name = "scss", EmitDefaultValue = true)]
        public string Scss { get; set; }

        /// <summary>
        /// Gets or Sets SlackWebhookUrl
        /// </summary>
        [DataMember(Name = "slack_webhook_url", EmitDefaultValue = true)]
        public string SlackWebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets WebhookOptions
        /// </summary>
        [DataMember(Name = "webhook_options", EmitDefaultValue = true)]
        public HtmlTemplateDataWebhookOptions WebhookOptions { get; set; }

        /// <summary>
        /// Gets or Sets WebhookUrl
        /// </summary>
        [DataMember(Name = "webhook_url", EmitDefaultValue = true)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UploadTemplateData {\n");
            sb.Append("  AddDataRequestSubmissionIdFooters: ").Append(AddDataRequestSubmissionIdFooters).Append("\n");
            sb.Append("  AllowAdditionalProperties: ").Append(AllowAdditionalProperties).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  EditableSubmissions: ").Append(EditableSubmissions).Append("\n");
            sb.Append("  ExpirationInterval: ").Append(ExpirationInterval).Append("\n");
            sb.Append("  ExpireAfter: ").Append(ExpireAfter).Append("\n");
            sb.Append("  ExpireSubmissions: ").Append(ExpireSubmissions).Append("\n");
            sb.Append("  FooterHtml: ").Append(FooterHtml).Append("\n");
            sb.Append("  HeaderHtml: ").Append(HeaderHtml).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  MergeAuditTrailPdf: ").Append(MergeAuditTrailPdf).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PublicSubmissions: ").Append(PublicSubmissions).Append("\n");
            sb.Append("  PublicWebForm: ").Append(PublicWebForm).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("  Scss: ").Append(Scss).Append("\n");
            sb.Append("  SlackWebhookUrl: ").Append(SlackWebhookUrl).Append("\n");
            sb.Append("  TemplateType: ").Append(TemplateType).Append("\n");
            sb.Append("  WebhookOptions: ").Append(WebhookOptions).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
