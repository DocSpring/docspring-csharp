/*
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// TemplateDocument
    /// </summary>
    [DataContract(Name = "template_document")]
    public partial class TemplateDocument : IValidatableObject
    {
        /// <summary>
        /// Defines Storage
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StorageEnum
        {
            /// <summary>
            /// Enum Cache for value: cache
            /// </summary>
            [EnumMember(Value = "cache")]
            Cache = 1
        }


        /// <summary>
        /// Gets or Sets Storage
        /// </summary>
        [DataMember(Name = "storage", IsRequired = true, EmitDefaultValue = true)]
        public StorageEnum Storage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TemplateDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateDocument" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="storage">storage (required).</param>
        public TemplateDocument(string id = default(string), TemplateDocumentMetadata metadata = default(TemplateDocumentMetadata), StorageEnum storage = default(StorageEnum))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for TemplateDocument and cannot be null");
            }
            this.Id = id;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for TemplateDocument and cannot be null");
            }
            this.Metadata = metadata;
            this.Storage = storage;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public TemplateDocumentMetadata Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplateDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
