/*
 * DocSpring API
 *
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DocSpring.Client.Client.OpenAPIDateConverter;

namespace DocSpring.Client.Model
{
    /// <summary>
    /// SubmissionDataRequestEvent
    /// </summary>
    [DataContract(Name = "submission_data_request_event")]
    public partial class SubmissionDataRequestEvent : IValidatableObject
    {
        /// <summary>
        /// Defines EventType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventTypeEnum
        {
            /// <summary>
            /// Enum SendRequest for value: send_request
            /// </summary>
            [EnumMember(Value = "send_request")]
            SendRequest = 1,

            /// <summary>
            /// Enum ViewRequest for value: view_request
            /// </summary>
            [EnumMember(Value = "view_request")]
            ViewRequest = 2,

            /// <summary>
            /// Enum AcceptedTerms for value: accepted_terms
            /// </summary>
            [EnumMember(Value = "accepted_terms")]
            AcceptedTerms = 3,

            /// <summary>
            /// Enum DeclineRequest for value: decline_request
            /// </summary>
            [EnumMember(Value = "decline_request")]
            DeclineRequest = 4,

            /// <summary>
            /// Enum SignRequest for value: sign_request
            /// </summary>
            [EnumMember(Value = "sign_request")]
            SignRequest = 5,

            /// <summary>
            /// Enum AllCompleted for value: all_completed
            /// </summary>
            [EnumMember(Value = "all_completed")]
            AllCompleted = 6
        }


        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name = "event_type", IsRequired = true, EmitDefaultValue = true)]
        public EventTypeEnum EventType { get; set; }
        /// <summary>
        /// Defines MessageType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageTypeEnum
        {
            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 1,

            /// <summary>
            /// Enum Sms for value: sms
            /// </summary>
            [EnumMember(Value = "sms")]
            Sms = 2,

            /// <summary>
            /// Enum Fax for value: fax
            /// </summary>
            [EnumMember(Value = "fax")]
            Fax = 3,

            /// <summary>
            /// Enum Mail for value: mail
            /// </summary>
            [EnumMember(Value = "mail")]
            Mail = 4,

            /// <summary>
            /// Enum Slack for value: slack
            /// </summary>
            [EnumMember(Value = "slack")]
            Slack = 5,

            /// <summary>
            /// Enum Msteams for value: msteams
            /// </summary>
            [EnumMember(Value = "msteams")]
            Msteams = 6,

            /// <summary>
            /// Enum Discord for value: discord
            /// </summary>
            [EnumMember(Value = "discord")]
            Discord = 7,

            /// <summary>
            /// Enum Telegram for value: telegram
            /// </summary>
            [EnumMember(Value = "telegram")]
            Telegram = 8,

            /// <summary>
            /// Enum Whatsapp for value: whatsapp
            /// </summary>
            [EnumMember(Value = "whatsapp")]
            Whatsapp = 9
        }


        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name = "message_type", IsRequired = true, EmitDefaultValue = true)]
        public MessageTypeEnum MessageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionDataRequestEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubmissionDataRequestEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmissionDataRequestEvent" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="submissionId">submissionId (required).</param>
        /// <param name="submissionDataRequestId">submissionDataRequestId (required).</param>
        /// <param name="eventType">eventType (required).</param>
        /// <param name="messageType">messageType (required).</param>
        /// <param name="messageRecipient">messageRecipient (required).</param>
        /// <param name="occurredAt">occurredAt (required).</param>
        public SubmissionDataRequestEvent(string id = default(string), string submissionId = default(string), string submissionDataRequestId = default(string), EventTypeEnum eventType = default(EventTypeEnum), MessageTypeEnum messageType = default(MessageTypeEnum), string messageRecipient = default(string), string occurredAt = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for SubmissionDataRequestEvent and cannot be null");
            }
            this.Id = id;
            // to ensure "submissionId" is required (not null)
            if (submissionId == null)
            {
                throw new ArgumentNullException("submissionId is a required property for SubmissionDataRequestEvent and cannot be null");
            }
            this.SubmissionId = submissionId;
            // to ensure "submissionDataRequestId" is required (not null)
            if (submissionDataRequestId == null)
            {
                throw new ArgumentNullException("submissionDataRequestId is a required property for SubmissionDataRequestEvent and cannot be null");
            }
            this.SubmissionDataRequestId = submissionDataRequestId;
            this.EventType = eventType;
            this.MessageType = messageType;
            // to ensure "messageRecipient" is required (not null)
            if (messageRecipient == null)
            {
                throw new ArgumentNullException("messageRecipient is a required property for SubmissionDataRequestEvent and cannot be null");
            }
            this.MessageRecipient = messageRecipient;
            // to ensure "occurredAt" is required (not null)
            if (occurredAt == null)
            {
                throw new ArgumentNullException("occurredAt is a required property for SubmissionDataRequestEvent and cannot be null");
            }
            this.OccurredAt = occurredAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets SubmissionId
        /// </summary>
        [DataMember(Name = "submission_id", IsRequired = true, EmitDefaultValue = true)]
        public string SubmissionId { get; set; }

        /// <summary>
        /// Gets or Sets SubmissionDataRequestId
        /// </summary>
        [DataMember(Name = "submission_data_request_id", IsRequired = true, EmitDefaultValue = true)]
        public string SubmissionDataRequestId { get; set; }

        /// <summary>
        /// Gets or Sets MessageRecipient
        /// </summary>
        [DataMember(Name = "message_recipient", IsRequired = true, EmitDefaultValue = true)]
        public string MessageRecipient { get; set; }

        /// <summary>
        /// Gets or Sets OccurredAt
        /// </summary>
        [DataMember(Name = "occurred_at", IsRequired = true, EmitDefaultValue = true)]
        public string OccurredAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmissionDataRequestEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SubmissionId: ").Append(SubmissionId).Append("\n");
            sb.Append("  SubmissionDataRequestId: ").Append(SubmissionDataRequestId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  MessageRecipient: ").Append(MessageRecipient).Append("\n");
            sb.Append("  OccurredAt: ").Append(OccurredAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
