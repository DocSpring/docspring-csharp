/* 
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DocSpring.Client.Client;
using DocSpring.Client.Model;

namespace DocSpring.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPDFApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new fields to a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="addFieldsData"></param>
        /// <returns>AddFieldsTemplateResponse</returns>
        AddFieldsTemplateResponse AddFieldsToTemplate (string templateId, AddFieldsData addFieldsData);

        /// <summary>
        /// Add new fields to a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="addFieldsData"></param>
        /// <returns>ApiResponse of AddFieldsTemplateResponse</returns>
        ApiResponse<AddFieldsTemplateResponse> AddFieldsToTemplateWithHttpInfo (string templateId, AddFieldsData addFieldsData);
        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="requestBody"></param>
        /// <returns>List&lt;CreateSubmissionResponse&gt;</returns>
        List<CreateSubmissionResponse> BatchGeneratePdfV1 (string templateId, List<Object> requestBody);

        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="requestBody"></param>
        /// <returns>ApiResponse of List&lt;CreateSubmissionResponse&gt;</returns>
        ApiResponse<List<CreateSubmissionResponse>> BatchGeneratePdfV1WithHttpInfo (string templateId, List<Object> requestBody);
        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchData"></param>
        /// <returns>CreateSubmissionBatchResponse</returns>
        CreateSubmissionBatchResponse BatchGeneratePdfs (SubmissionBatchData submissionBatchData);

        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchData"></param>
        /// <returns>ApiResponse of CreateSubmissionBatchResponse</returns>
        ApiResponse<CreateSubmissionBatchResponse> BatchGeneratePdfsWithHttpInfo (SubmissionBatchData submissionBatchData);
        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinePdfsData"></param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        CreateCombinedSubmissionResponse CombinePdfs (CombinePdfsData combinePdfsData);

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinePdfsData"></param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        ApiResponse<CreateCombinedSubmissionResponse> CombinePdfsWithHttpInfo (CombinePdfsData combinePdfsData);
        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"></param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        CreateCombinedSubmissionResponse CombineSubmissions (CombinedSubmissionData combinedSubmissionData);

        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"></param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        ApiResponse<CreateCombinedSubmissionResponse> CombineSubmissionsWithHttpInfo (CombinedSubmissionData combinedSubmissionData);
        /// <summary>
        /// Copy a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="copyTemplateData"></param>
        /// <returns>Template</returns>
        Template CopyTemplate (string templateId, CopyTemplateData copyTemplateData);

        /// <summary>
        /// Copy a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="copyTemplateData"></param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> CopyTemplateWithHttpInfo (string templateId, CopyTemplateData copyTemplateData);
        /// <summary>
        /// Create a new custom file from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFileData"></param>
        /// <returns>CreateCustomFileResponse</returns>
        CreateCustomFileResponse CreateCustomFileFromUpload (CreateCustomFileData createCustomFileData);

        /// <summary>
        /// Create a new custom file from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFileData"></param>
        /// <returns>ApiResponse of CreateCustomFileResponse</returns>
        ApiResponse<CreateCustomFileResponse> CreateCustomFileFromUploadWithHttpInfo (CreateCustomFileData createCustomFileData);
        /// <summary>
        /// Creates a new data request token for form authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>CreateSubmissionDataRequestTokenResponse</returns>
        CreateSubmissionDataRequestTokenResponse CreateDataRequestToken (string dataRequestId);

        /// <summary>
        /// Creates a new data request token for form authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>ApiResponse of CreateSubmissionDataRequestTokenResponse</returns>
        ApiResponse<CreateSubmissionDataRequestTokenResponse> CreateDataRequestTokenWithHttpInfo (string dataRequestId);
        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderData"></param>
        /// <returns>Folder</returns>
        Folder CreateFolder (CreateFolderData createFolderData);

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderData"></param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> CreateFolderWithHttpInfo (CreateFolderData createFolderData);
        /// <summary>
        /// Create a new HTML template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createHtmlTemplateData"></param>
        /// <returns>PendingTemplate</returns>
        PendingTemplate CreateHTMLTemplate (CreateHtmlTemplateData createHtmlTemplateData);

        /// <summary>
        /// Create a new HTML template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createHtmlTemplateData"></param>
        /// <returns>ApiResponse of PendingTemplate</returns>
        ApiResponse<PendingTemplate> CreateHTMLTemplateWithHttpInfo (CreateHtmlTemplateData createHtmlTemplateData);
        /// <summary>
        /// Create a new PDF template with a form POST file upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <returns>PendingTemplate</returns>
        PendingTemplate CreatePDFTemplate (System.IO.Stream templateDocument, string templateName, string templateParentFolderId = null);

        /// <summary>
        /// Create a new PDF template with a form POST file upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <returns>ApiResponse of PendingTemplate</returns>
        ApiResponse<PendingTemplate> CreatePDFTemplateWithHttpInfo (System.IO.Stream templateDocument, string templateName, string templateParentFolderId = null);
        /// <summary>
        /// Create a new PDF template from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateFromUploadData"></param>
        /// <returns>PendingTemplate</returns>
        PendingTemplate CreatePDFTemplateFromUpload (CreateTemplateFromUploadData createTemplateFromUploadData);

        /// <summary>
        /// Create a new PDF template from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateFromUploadData"></param>
        /// <returns>ApiResponse of PendingTemplate</returns>
        ApiResponse<PendingTemplate> CreatePDFTemplateFromUploadWithHttpInfo (CreateTemplateFromUploadData createTemplateFromUploadData);
        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Folder</returns>
        Folder DeleteFolder (string folderId);

        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> DeleteFolderWithHttpInfo (string folderId);
        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>CombinedSubmission</returns>
        CombinedSubmission ExpireCombinedSubmission (string combinedSubmissionId);

        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        ApiResponse<CombinedSubmission> ExpireCombinedSubmissionWithHttpInfo (string combinedSubmissionId);
        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Submission</returns>
        Submission ExpireSubmission (string submissionId);

        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of Submission</returns>
        ApiResponse<Submission> ExpireSubmissionWithHttpInfo (string submissionId);
        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submissionData"></param>
        /// <returns>CreateSubmissionResponse</returns>
        CreateSubmissionResponse GeneratePDF (string templateId, SubmissionData submissionData);

        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submissionData"></param>
        /// <returns>ApiResponse of CreateSubmissionResponse</returns>
        ApiResponse<CreateSubmissionResponse> GeneratePDFWithHttpInfo (string templateId, SubmissionData submissionData);
        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>CombinedSubmission</returns>
        CombinedSubmission GetCombinedSubmission (string combinedSubmissionId);

        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        ApiResponse<CombinedSubmission> GetCombinedSubmissionWithHttpInfo (string combinedSubmissionId);
        /// <summary>
        /// Look up a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>SubmissionDataRequest</returns>
        SubmissionDataRequest GetDataRequest (string dataRequestId);

        /// <summary>
        /// Look up a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>ApiResponse of SubmissionDataRequest</returns>
        ApiResponse<SubmissionDataRequest> GetDataRequestWithHttpInfo (string dataRequestId);
        /// <summary>
        /// Fetch the full template attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Template1</returns>
        Template1 GetFullTemplate (string templateId);

        /// <summary>
        /// Fetch the full template attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of Template1</returns>
        ApiResponse<Template1> GetFullTemplateWithHttpInfo (string templateId);
        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GetPresignUrl ();

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GetPresignUrlWithHttpInfo ();
        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Submission</returns>
        Submission GetSubmission (string submissionId, bool? includeData = null);

        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>ApiResponse of Submission</returns>
        ApiResponse<Submission> GetSubmissionWithHttpInfo (string submissionId, bool? includeData = null);
        /// <summary>
        /// Check the status of a submission batch job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <returns>SubmissionBatch</returns>
        SubmissionBatch GetSubmissionBatch (string submissionBatchId, bool? includeSubmissions = null);

        /// <summary>
        /// Check the status of a submission batch job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <returns>ApiResponse of SubmissionBatch</returns>
        ApiResponse<SubmissionBatch> GetSubmissionBatchWithHttpInfo (string submissionBatchId, bool? includeSubmissions = null);
        /// <summary>
        /// Check the status of an uploaded template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Template</returns>
        Template GetTemplate (string templateId);

        /// <summary>
        /// Check the status of an uploaded template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> GetTemplateWithHttpInfo (string templateId);
        /// <summary>
        /// Fetch the JSON schema for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GetTemplateSchema (string templateId);

        /// <summary>
        /// Fetch the JSON schema for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GetTemplateSchemaWithHttpInfo (string templateId);
        /// <summary>
        /// Get a list of all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <returns>List&lt;Folder&gt;</returns>
        List<Folder> ListFolders (string parentFolderId = null);

        /// <summary>
        /// Get a list of all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <returns>ApiResponse of List&lt;Folder&gt;</returns>
        ApiResponse<List<Folder>> ListFoldersWithHttpInfo (string parentFolderId = null);
        /// <summary>
        /// List all submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>ListSubmissionsResponse</returns>
        ListSubmissionsResponse ListSubmissions (string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null);

        /// <summary>
        /// List all submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>ApiResponse of ListSubmissionsResponse</returns>
        ApiResponse<ListSubmissionsResponse> ListSubmissionsWithHttpInfo (string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null);
        /// <summary>
        /// List all submissions for a given template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>ListSubmissionsResponse</returns>
        ListSubmissionsResponse ListSubmissions_0 (string templateId, string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null);

        /// <summary>
        /// List all submissions for a given template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>ApiResponse of ListSubmissionsResponse</returns>
        ApiResponse<ListSubmissionsResponse> ListSubmissions_0WithHttpInfo (string templateId, string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null);
        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> ListTemplates (string query = null, string parentFolderId = null, int? page = null, int? perPage = null);

        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> ListTemplatesWithHttpInfo (string query = null, string parentFolderId = null, int? page = null, int? perPage = null);
        /// <summary>
        /// Move a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="moveFolderData"></param>
        /// <returns>Folder</returns>
        Folder MoveFolderToFolder (string folderId, MoveFolderData moveFolderData);

        /// <summary>
        /// Move a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="moveFolderData"></param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> MoveFolderToFolderWithHttpInfo (string folderId, MoveFolderData moveFolderData);
        /// <summary>
        /// Move Template to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="moveTemplateData"></param>
        /// <returns>Template</returns>
        Template MoveTemplateToFolder (string templateId, MoveTemplateData moveTemplateData);

        /// <summary>
        /// Move Template to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="moveTemplateData"></param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> MoveTemplateToFolderWithHttpInfo (string templateId, MoveTemplateData moveTemplateData);
        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="renameFolderData"></param>
        /// <returns></returns>
        void RenameFolder (string folderId, RenameFolderData renameFolderData);

        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="renameFolderData"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RenameFolderWithHttpInfo (string folderId, RenameFolderData renameFolderData);
        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthenticationSuccessResponse</returns>
        AuthenticationSuccessResponse TestAuthentication ();

        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthenticationSuccessResponse</returns>
        ApiResponse<AuthenticationSuccessResponse> TestAuthenticationWithHttpInfo ();
        /// <summary>
        /// Update a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="updateSubmissionDataRequestData"></param>
        /// <returns>UpdateDataRequestResponse</returns>
        UpdateDataRequestResponse UpdateDataRequest (string dataRequestId, UpdateSubmissionDataRequestData updateSubmissionDataRequestData);

        /// <summary>
        /// Update a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="updateSubmissionDataRequestData"></param>
        /// <returns>ApiResponse of UpdateDataRequestResponse</returns>
        ApiResponse<UpdateDataRequestResponse> UpdateDataRequestWithHttpInfo (string dataRequestId, UpdateSubmissionDataRequestData updateSubmissionDataRequestData);
        /// <summary>
        /// Update a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="updateTemplateData"></param>
        /// <returns>UpdateTemplateResponse</returns>
        UpdateTemplateResponse UpdateTemplate (string templateId, UpdateTemplateData updateTemplateData);

        /// <summary>
        /// Update a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="updateTemplateData"></param>
        /// <returns>ApiResponse of UpdateTemplateResponse</returns>
        ApiResponse<UpdateTemplateResponse> UpdateTemplateWithHttpInfo (string templateId, UpdateTemplateData updateTemplateData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new fields to a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="addFieldsData"></param>
        /// <returns>Task of AddFieldsTemplateResponse</returns>
        System.Threading.Tasks.Task<AddFieldsTemplateResponse> AddFieldsToTemplateAsync (string templateId, AddFieldsData addFieldsData);

        /// <summary>
        /// Add new fields to a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="addFieldsData"></param>
        /// <returns>Task of ApiResponse (AddFieldsTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddFieldsTemplateResponse>> AddFieldsToTemplateAsyncWithHttpInfo (string templateId, AddFieldsData addFieldsData);
        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="requestBody"></param>
        /// <returns>Task of List&lt;CreateSubmissionResponse&gt;</returns>
        System.Threading.Tasks.Task<List<CreateSubmissionResponse>> BatchGeneratePdfV1Async (string templateId, List<Object> requestBody);

        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="requestBody"></param>
        /// <returns>Task of ApiResponse (List&lt;CreateSubmissionResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CreateSubmissionResponse>>> BatchGeneratePdfV1AsyncWithHttpInfo (string templateId, List<Object> requestBody);
        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchData"></param>
        /// <returns>Task of CreateSubmissionBatchResponse</returns>
        System.Threading.Tasks.Task<CreateSubmissionBatchResponse> BatchGeneratePdfsAsync (SubmissionBatchData submissionBatchData);

        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchData"></param>
        /// <returns>Task of ApiResponse (CreateSubmissionBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubmissionBatchResponse>> BatchGeneratePdfsAsyncWithHttpInfo (SubmissionBatchData submissionBatchData);
        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinePdfsData"></param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombinePdfsAsync (CombinePdfsData combinePdfsData);

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinePdfsData"></param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCombinedSubmissionResponse>> CombinePdfsAsyncWithHttpInfo (CombinePdfsData combinePdfsData);
        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"></param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombineSubmissionsAsync (CombinedSubmissionData combinedSubmissionData);

        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"></param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCombinedSubmissionResponse>> CombineSubmissionsAsyncWithHttpInfo (CombinedSubmissionData combinedSubmissionData);
        /// <summary>
        /// Copy a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="copyTemplateData"></param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> CopyTemplateAsync (string templateId, CopyTemplateData copyTemplateData);

        /// <summary>
        /// Copy a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="copyTemplateData"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> CopyTemplateAsyncWithHttpInfo (string templateId, CopyTemplateData copyTemplateData);
        /// <summary>
        /// Create a new custom file from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFileData"></param>
        /// <returns>Task of CreateCustomFileResponse</returns>
        System.Threading.Tasks.Task<CreateCustomFileResponse> CreateCustomFileFromUploadAsync (CreateCustomFileData createCustomFileData);

        /// <summary>
        /// Create a new custom file from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFileData"></param>
        /// <returns>Task of ApiResponse (CreateCustomFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCustomFileResponse>> CreateCustomFileFromUploadAsyncWithHttpInfo (CreateCustomFileData createCustomFileData);
        /// <summary>
        /// Creates a new data request token for form authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>Task of CreateSubmissionDataRequestTokenResponse</returns>
        System.Threading.Tasks.Task<CreateSubmissionDataRequestTokenResponse> CreateDataRequestTokenAsync (string dataRequestId);

        /// <summary>
        /// Creates a new data request token for form authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>Task of ApiResponse (CreateSubmissionDataRequestTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubmissionDataRequestTokenResponse>> CreateDataRequestTokenAsyncWithHttpInfo (string dataRequestId);
        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderData"></param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> CreateFolderAsync (CreateFolderData createFolderData);

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderData"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> CreateFolderAsyncWithHttpInfo (CreateFolderData createFolderData);
        /// <summary>
        /// Create a new HTML template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createHtmlTemplateData"></param>
        /// <returns>Task of PendingTemplate</returns>
        System.Threading.Tasks.Task<PendingTemplate> CreateHTMLTemplateAsync (CreateHtmlTemplateData createHtmlTemplateData);

        /// <summary>
        /// Create a new HTML template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createHtmlTemplateData"></param>
        /// <returns>Task of ApiResponse (PendingTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PendingTemplate>> CreateHTMLTemplateAsyncWithHttpInfo (CreateHtmlTemplateData createHtmlTemplateData);
        /// <summary>
        /// Create a new PDF template with a form POST file upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <returns>Task of PendingTemplate</returns>
        System.Threading.Tasks.Task<PendingTemplate> CreatePDFTemplateAsync (System.IO.Stream templateDocument, string templateName, string templateParentFolderId = null);

        /// <summary>
        /// Create a new PDF template with a form POST file upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <returns>Task of ApiResponse (PendingTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PendingTemplate>> CreatePDFTemplateAsyncWithHttpInfo (System.IO.Stream templateDocument, string templateName, string templateParentFolderId = null);
        /// <summary>
        /// Create a new PDF template from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateFromUploadData"></param>
        /// <returns>Task of PendingTemplate</returns>
        System.Threading.Tasks.Task<PendingTemplate> CreatePDFTemplateFromUploadAsync (CreateTemplateFromUploadData createTemplateFromUploadData);

        /// <summary>
        /// Create a new PDF template from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateFromUploadData"></param>
        /// <returns>Task of ApiResponse (PendingTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PendingTemplate>> CreatePDFTemplateFromUploadAsyncWithHttpInfo (CreateTemplateFromUploadData createTemplateFromUploadData);
        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> DeleteFolderAsync (string folderId);

        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> DeleteFolderAsyncWithHttpInfo (string folderId);
        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of CombinedSubmission</returns>
        System.Threading.Tasks.Task<CombinedSubmission> ExpireCombinedSubmissionAsync (string combinedSubmissionId);

        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        System.Threading.Tasks.Task<ApiResponse<CombinedSubmission>> ExpireCombinedSubmissionAsyncWithHttpInfo (string combinedSubmissionId);
        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of Submission</returns>
        System.Threading.Tasks.Task<Submission> ExpireSubmissionAsync (string submissionId);

        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submission>> ExpireSubmissionAsyncWithHttpInfo (string submissionId);
        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submissionData"></param>
        /// <returns>Task of CreateSubmissionResponse</returns>
        System.Threading.Tasks.Task<CreateSubmissionResponse> GeneratePDFAsync (string templateId, SubmissionData submissionData);

        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submissionData"></param>
        /// <returns>Task of ApiResponse (CreateSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubmissionResponse>> GeneratePDFAsyncWithHttpInfo (string templateId, SubmissionData submissionData);
        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of CombinedSubmission</returns>
        System.Threading.Tasks.Task<CombinedSubmission> GetCombinedSubmissionAsync (string combinedSubmissionId);

        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        System.Threading.Tasks.Task<ApiResponse<CombinedSubmission>> GetCombinedSubmissionAsyncWithHttpInfo (string combinedSubmissionId);
        /// <summary>
        /// Look up a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>Task of SubmissionDataRequest</returns>
        System.Threading.Tasks.Task<SubmissionDataRequest> GetDataRequestAsync (string dataRequestId);

        /// <summary>
        /// Look up a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>Task of ApiResponse (SubmissionDataRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmissionDataRequest>> GetDataRequestAsyncWithHttpInfo (string dataRequestId);
        /// <summary>
        /// Fetch the full template attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of Template1</returns>
        System.Threading.Tasks.Task<Template1> GetFullTemplateAsync (string templateId);

        /// <summary>
        /// Fetch the full template attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse (Template1)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template1>> GetFullTemplateAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GetPresignUrlAsync ();

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetPresignUrlAsyncWithHttpInfo ();
        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Task of Submission</returns>
        System.Threading.Tasks.Task<Submission> GetSubmissionAsync (string submissionId, bool? includeData = null);

        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submission>> GetSubmissionAsyncWithHttpInfo (string submissionId, bool? includeData = null);
        /// <summary>
        /// Check the status of a submission batch job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <returns>Task of SubmissionBatch</returns>
        System.Threading.Tasks.Task<SubmissionBatch> GetSubmissionBatchAsync (string submissionBatchId, bool? includeSubmissions = null);

        /// <summary>
        /// Check the status of a submission batch job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <returns>Task of ApiResponse (SubmissionBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmissionBatch>> GetSubmissionBatchAsyncWithHttpInfo (string submissionBatchId, bool? includeSubmissions = null);
        /// <summary>
        /// Check the status of an uploaded template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> GetTemplateAsync (string templateId);

        /// <summary>
        /// Check the status of an uploaded template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> GetTemplateAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Fetch the JSON schema for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GetTemplateSchemaAsync (string templateId);

        /// <summary>
        /// Fetch the JSON schema for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetTemplateSchemaAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Get a list of all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <returns>Task of List&lt;Folder&gt;</returns>
        System.Threading.Tasks.Task<List<Folder>> ListFoldersAsync (string parentFolderId = null);

        /// <summary>
        /// Get a list of all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Folder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Folder>>> ListFoldersAsyncWithHttpInfo (string parentFolderId = null);
        /// <summary>
        /// List all submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Task of ListSubmissionsResponse</returns>
        System.Threading.Tasks.Task<ListSubmissionsResponse> ListSubmissionsAsync (string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null);

        /// <summary>
        /// List all submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ListSubmissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSubmissionsResponse>> ListSubmissionsAsyncWithHttpInfo (string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null);
        /// <summary>
        /// List all submissions for a given template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Task of ListSubmissionsResponse</returns>
        System.Threading.Tasks.Task<ListSubmissionsResponse> ListSubmissions_0Async (string templateId, string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null);

        /// <summary>
        /// List all submissions for a given template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ListSubmissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSubmissionsResponse>> ListSubmissions_0AsyncWithHttpInfo (string templateId, string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null);
        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> ListTemplatesAsync (string query = null, string parentFolderId = null, int? page = null, int? perPage = null);

        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> ListTemplatesAsyncWithHttpInfo (string query = null, string parentFolderId = null, int? page = null, int? perPage = null);
        /// <summary>
        /// Move a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="moveFolderData"></param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> MoveFolderToFolderAsync (string folderId, MoveFolderData moveFolderData);

        /// <summary>
        /// Move a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="moveFolderData"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> MoveFolderToFolderAsyncWithHttpInfo (string folderId, MoveFolderData moveFolderData);
        /// <summary>
        /// Move Template to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="moveTemplateData"></param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> MoveTemplateToFolderAsync (string templateId, MoveTemplateData moveTemplateData);

        /// <summary>
        /// Move Template to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="moveTemplateData"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> MoveTemplateToFolderAsyncWithHttpInfo (string templateId, MoveTemplateData moveTemplateData);
        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="renameFolderData"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RenameFolderAsync (string folderId, RenameFolderData renameFolderData);

        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="renameFolderData"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RenameFolderAsyncWithHttpInfo (string folderId, RenameFolderData renameFolderData);
        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AuthenticationSuccessResponse</returns>
        System.Threading.Tasks.Task<AuthenticationSuccessResponse> TestAuthenticationAsync ();

        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AuthenticationSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationSuccessResponse>> TestAuthenticationAsyncWithHttpInfo ();
        /// <summary>
        /// Update a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="updateSubmissionDataRequestData"></param>
        /// <returns>Task of UpdateDataRequestResponse</returns>
        System.Threading.Tasks.Task<UpdateDataRequestResponse> UpdateDataRequestAsync (string dataRequestId, UpdateSubmissionDataRequestData updateSubmissionDataRequestData);

        /// <summary>
        /// Update a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="updateSubmissionDataRequestData"></param>
        /// <returns>Task of ApiResponse (UpdateDataRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateDataRequestResponse>> UpdateDataRequestAsyncWithHttpInfo (string dataRequestId, UpdateSubmissionDataRequestData updateSubmissionDataRequestData);
        /// <summary>
        /// Update a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="updateTemplateData"></param>
        /// <returns>Task of UpdateTemplateResponse</returns>
        System.Threading.Tasks.Task<UpdateTemplateResponse> UpdateTemplateAsync (string templateId, UpdateTemplateData updateTemplateData);

        /// <summary>
        /// Update a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="updateTemplateData"></param>
        /// <returns>Task of ApiResponse (UpdateTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTemplateResponse>> UpdateTemplateAsyncWithHttpInfo (string templateId, UpdateTemplateData updateTemplateData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PDFApi : IPDFApi
    {
        private DocSpring.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PDFApi(String basePath)
        {
            this.Configuration = new DocSpring.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = DocSpring.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PDFApi(DocSpring.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = DocSpring.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DocSpring.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DocSpring.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocSpring.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new fields to a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="addFieldsData"></param>
        /// <returns>AddFieldsTemplateResponse</returns>
        public AddFieldsTemplateResponse AddFieldsToTemplate (string templateId, AddFieldsData addFieldsData)
        {
             ApiResponse<AddFieldsTemplateResponse> localVarResponse = AddFieldsToTemplateWithHttpInfo(templateId, addFieldsData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new fields to a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="addFieldsData"></param>
        /// <returns>ApiResponse of AddFieldsTemplateResponse</returns>
        public ApiResponse< AddFieldsTemplateResponse > AddFieldsToTemplateWithHttpInfo (string templateId, AddFieldsData addFieldsData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->AddFieldsToTemplate");
            // verify the required parameter 'addFieldsData' is set
            if (addFieldsData == null)
                throw new ApiException(400, "Missing required parameter 'addFieldsData' when calling PDFApi->AddFieldsToTemplate");

            var localVarPath = "/templates/{template_id}/add_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (addFieldsData != null && addFieldsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addFieldsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addFieldsData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFieldsToTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddFieldsTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddFieldsTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddFieldsTemplateResponse)));
        }

        /// <summary>
        /// Add new fields to a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="addFieldsData"></param>
        /// <returns>Task of AddFieldsTemplateResponse</returns>
        public async System.Threading.Tasks.Task<AddFieldsTemplateResponse> AddFieldsToTemplateAsync (string templateId, AddFieldsData addFieldsData)
        {
             ApiResponse<AddFieldsTemplateResponse> localVarResponse = await AddFieldsToTemplateAsyncWithHttpInfo(templateId, addFieldsData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new fields to a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="addFieldsData"></param>
        /// <returns>Task of ApiResponse (AddFieldsTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddFieldsTemplateResponse>> AddFieldsToTemplateAsyncWithHttpInfo (string templateId, AddFieldsData addFieldsData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->AddFieldsToTemplate");
            // verify the required parameter 'addFieldsData' is set
            if (addFieldsData == null)
                throw new ApiException(400, "Missing required parameter 'addFieldsData' when calling PDFApi->AddFieldsToTemplate");

            var localVarPath = "/templates/{template_id}/add_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (addFieldsData != null && addFieldsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addFieldsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addFieldsData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFieldsToTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddFieldsTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddFieldsTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddFieldsTemplateResponse)));
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="requestBody"></param>
        /// <returns>List&lt;CreateSubmissionResponse&gt;</returns>
        public List<CreateSubmissionResponse> BatchGeneratePdfV1 (string templateId, List<Object> requestBody)
        {
             ApiResponse<List<CreateSubmissionResponse>> localVarResponse = BatchGeneratePdfV1WithHttpInfo(templateId, requestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="requestBody"></param>
        /// <returns>ApiResponse of List&lt;CreateSubmissionResponse&gt;</returns>
        public ApiResponse< List<CreateSubmissionResponse> > BatchGeneratePdfV1WithHttpInfo (string templateId, List<Object> requestBody)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->BatchGeneratePdfV1");
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new ApiException(400, "Missing required parameter 'requestBody' when calling PDFApi->BatchGeneratePdfV1");

            var localVarPath = "/templates/{template_id}/submissions/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (requestBody != null && requestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestBody; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchGeneratePdfV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CreateSubmissionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CreateSubmissionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CreateSubmissionResponse>)));
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="requestBody"></param>
        /// <returns>Task of List&lt;CreateSubmissionResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<CreateSubmissionResponse>> BatchGeneratePdfV1Async (string templateId, List<Object> requestBody)
        {
             ApiResponse<List<CreateSubmissionResponse>> localVarResponse = await BatchGeneratePdfV1AsyncWithHttpInfo(templateId, requestBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="requestBody"></param>
        /// <returns>Task of ApiResponse (List&lt;CreateSubmissionResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CreateSubmissionResponse>>> BatchGeneratePdfV1AsyncWithHttpInfo (string templateId, List<Object> requestBody)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->BatchGeneratePdfV1");
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new ApiException(400, "Missing required parameter 'requestBody' when calling PDFApi->BatchGeneratePdfV1");

            var localVarPath = "/templates/{template_id}/submissions/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (requestBody != null && requestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestBody; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchGeneratePdfV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CreateSubmissionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CreateSubmissionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CreateSubmissionResponse>)));
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchData"></param>
        /// <returns>CreateSubmissionBatchResponse</returns>
        public CreateSubmissionBatchResponse BatchGeneratePdfs (SubmissionBatchData submissionBatchData)
        {
             ApiResponse<CreateSubmissionBatchResponse> localVarResponse = BatchGeneratePdfsWithHttpInfo(submissionBatchData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchData"></param>
        /// <returns>ApiResponse of CreateSubmissionBatchResponse</returns>
        public ApiResponse< CreateSubmissionBatchResponse > BatchGeneratePdfsWithHttpInfo (SubmissionBatchData submissionBatchData)
        {
            // verify the required parameter 'submissionBatchData' is set
            if (submissionBatchData == null)
                throw new ApiException(400, "Missing required parameter 'submissionBatchData' when calling PDFApi->BatchGeneratePdfs");

            var localVarPath = "/submissions/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionBatchData != null && submissionBatchData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(submissionBatchData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = submissionBatchData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchGeneratePdfs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubmissionBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateSubmissionBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubmissionBatchResponse)));
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchData"></param>
        /// <returns>Task of CreateSubmissionBatchResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubmissionBatchResponse> BatchGeneratePdfsAsync (SubmissionBatchData submissionBatchData)
        {
             ApiResponse<CreateSubmissionBatchResponse> localVarResponse = await BatchGeneratePdfsAsyncWithHttpInfo(submissionBatchData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchData"></param>
        /// <returns>Task of ApiResponse (CreateSubmissionBatchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSubmissionBatchResponse>> BatchGeneratePdfsAsyncWithHttpInfo (SubmissionBatchData submissionBatchData)
        {
            // verify the required parameter 'submissionBatchData' is set
            if (submissionBatchData == null)
                throw new ApiException(400, "Missing required parameter 'submissionBatchData' when calling PDFApi->BatchGeneratePdfs");

            var localVarPath = "/submissions/batches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionBatchData != null && submissionBatchData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(submissionBatchData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = submissionBatchData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchGeneratePdfs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubmissionBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateSubmissionBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubmissionBatchResponse)));
        }

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinePdfsData"></param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        public CreateCombinedSubmissionResponse CombinePdfs (CombinePdfsData combinePdfsData)
        {
             ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = CombinePdfsWithHttpInfo(combinePdfsData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinePdfsData"></param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        public ApiResponse< CreateCombinedSubmissionResponse > CombinePdfsWithHttpInfo (CombinePdfsData combinePdfsData)
        {
            // verify the required parameter 'combinePdfsData' is set
            if (combinePdfsData == null)
                throw new ApiException(400, "Missing required parameter 'combinePdfsData' when calling PDFApi->CombinePdfs");

            var localVarPath = "/combined_submissions?v=2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinePdfsData != null && combinePdfsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(combinePdfsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = combinePdfsData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CombinePdfs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCombinedSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCombinedSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCombinedSubmissionResponse)));
        }

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinePdfsData"></param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombinePdfsAsync (CombinePdfsData combinePdfsData)
        {
             ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = await CombinePdfsAsyncWithHttpInfo(combinePdfsData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinePdfsData"></param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateCombinedSubmissionResponse>> CombinePdfsAsyncWithHttpInfo (CombinePdfsData combinePdfsData)
        {
            // verify the required parameter 'combinePdfsData' is set
            if (combinePdfsData == null)
                throw new ApiException(400, "Missing required parameter 'combinePdfsData' when calling PDFApi->CombinePdfs");

            var localVarPath = "/combined_submissions?v=2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinePdfsData != null && combinePdfsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(combinePdfsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = combinePdfsData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CombinePdfs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCombinedSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCombinedSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCombinedSubmissionResponse)));
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"></param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        public CreateCombinedSubmissionResponse CombineSubmissions (CombinedSubmissionData combinedSubmissionData)
        {
             ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = CombineSubmissionsWithHttpInfo(combinedSubmissionData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"></param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        public ApiResponse< CreateCombinedSubmissionResponse > CombineSubmissionsWithHttpInfo (CombinedSubmissionData combinedSubmissionData)
        {
            // verify the required parameter 'combinedSubmissionData' is set
            if (combinedSubmissionData == null)
                throw new ApiException(400, "Missing required parameter 'combinedSubmissionData' when calling PDFApi->CombineSubmissions");

            var localVarPath = "/combined_submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinedSubmissionData != null && combinedSubmissionData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(combinedSubmissionData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = combinedSubmissionData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CombineSubmissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCombinedSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCombinedSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCombinedSubmissionResponse)));
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"></param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombineSubmissionsAsync (CombinedSubmissionData combinedSubmissionData)
        {
             ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = await CombineSubmissionsAsyncWithHttpInfo(combinedSubmissionData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionData"></param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateCombinedSubmissionResponse>> CombineSubmissionsAsyncWithHttpInfo (CombinedSubmissionData combinedSubmissionData)
        {
            // verify the required parameter 'combinedSubmissionData' is set
            if (combinedSubmissionData == null)
                throw new ApiException(400, "Missing required parameter 'combinedSubmissionData' when calling PDFApi->CombineSubmissions");

            var localVarPath = "/combined_submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinedSubmissionData != null && combinedSubmissionData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(combinedSubmissionData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = combinedSubmissionData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CombineSubmissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCombinedSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCombinedSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCombinedSubmissionResponse)));
        }

        /// <summary>
        /// Copy a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="copyTemplateData"></param>
        /// <returns>Template</returns>
        public Template CopyTemplate (string templateId, CopyTemplateData copyTemplateData)
        {
             ApiResponse<Template> localVarResponse = CopyTemplateWithHttpInfo(templateId, copyTemplateData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="copyTemplateData"></param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > CopyTemplateWithHttpInfo (string templateId, CopyTemplateData copyTemplateData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->CopyTemplate");
            // verify the required parameter 'copyTemplateData' is set
            if (copyTemplateData == null)
                throw new ApiException(400, "Missing required parameter 'copyTemplateData' when calling PDFApi->CopyTemplate");

            var localVarPath = "/templates/{template_id}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (copyTemplateData != null && copyTemplateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(copyTemplateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = copyTemplateData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        /// Copy a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="copyTemplateData"></param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> CopyTemplateAsync (string templateId, CopyTemplateData copyTemplateData)
        {
             ApiResponse<Template> localVarResponse = await CopyTemplateAsyncWithHttpInfo(templateId, copyTemplateData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="copyTemplateData"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> CopyTemplateAsyncWithHttpInfo (string templateId, CopyTemplateData copyTemplateData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->CopyTemplate");
            // verify the required parameter 'copyTemplateData' is set
            if (copyTemplateData == null)
                throw new ApiException(400, "Missing required parameter 'copyTemplateData' when calling PDFApi->CopyTemplate");

            var localVarPath = "/templates/{template_id}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (copyTemplateData != null && copyTemplateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(copyTemplateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = copyTemplateData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        /// Create a new custom file from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFileData"></param>
        /// <returns>CreateCustomFileResponse</returns>
        public CreateCustomFileResponse CreateCustomFileFromUpload (CreateCustomFileData createCustomFileData)
        {
             ApiResponse<CreateCustomFileResponse> localVarResponse = CreateCustomFileFromUploadWithHttpInfo(createCustomFileData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new custom file from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFileData"></param>
        /// <returns>ApiResponse of CreateCustomFileResponse</returns>
        public ApiResponse< CreateCustomFileResponse > CreateCustomFileFromUploadWithHttpInfo (CreateCustomFileData createCustomFileData)
        {
            // verify the required parameter 'createCustomFileData' is set
            if (createCustomFileData == null)
                throw new ApiException(400, "Missing required parameter 'createCustomFileData' when calling PDFApi->CreateCustomFileFromUpload");

            var localVarPath = "/custom_files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createCustomFileData != null && createCustomFileData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCustomFileData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCustomFileData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomFileFromUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCustomFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCustomFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCustomFileResponse)));
        }

        /// <summary>
        /// Create a new custom file from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFileData"></param>
        /// <returns>Task of CreateCustomFileResponse</returns>
        public async System.Threading.Tasks.Task<CreateCustomFileResponse> CreateCustomFileFromUploadAsync (CreateCustomFileData createCustomFileData)
        {
             ApiResponse<CreateCustomFileResponse> localVarResponse = await CreateCustomFileFromUploadAsyncWithHttpInfo(createCustomFileData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new custom file from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFileData"></param>
        /// <returns>Task of ApiResponse (CreateCustomFileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateCustomFileResponse>> CreateCustomFileFromUploadAsyncWithHttpInfo (CreateCustomFileData createCustomFileData)
        {
            // verify the required parameter 'createCustomFileData' is set
            if (createCustomFileData == null)
                throw new ApiException(400, "Missing required parameter 'createCustomFileData' when calling PDFApi->CreateCustomFileFromUpload");

            var localVarPath = "/custom_files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createCustomFileData != null && createCustomFileData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCustomFileData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCustomFileData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomFileFromUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCustomFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateCustomFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCustomFileResponse)));
        }

        /// <summary>
        /// Creates a new data request token for form authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>CreateSubmissionDataRequestTokenResponse</returns>
        public CreateSubmissionDataRequestTokenResponse CreateDataRequestToken (string dataRequestId)
        {
             ApiResponse<CreateSubmissionDataRequestTokenResponse> localVarResponse = CreateDataRequestTokenWithHttpInfo(dataRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new data request token for form authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>ApiResponse of CreateSubmissionDataRequestTokenResponse</returns>
        public ApiResponse< CreateSubmissionDataRequestTokenResponse > CreateDataRequestTokenWithHttpInfo (string dataRequestId)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
                throw new ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->CreateDataRequestToken");

            var localVarPath = "/data_requests/{data_request_id}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataRequestId != null) localVarPathParams.Add("data_request_id", this.Configuration.ApiClient.ParameterToString(dataRequestId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDataRequestToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubmissionDataRequestTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateSubmissionDataRequestTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubmissionDataRequestTokenResponse)));
        }

        /// <summary>
        /// Creates a new data request token for form authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>Task of CreateSubmissionDataRequestTokenResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubmissionDataRequestTokenResponse> CreateDataRequestTokenAsync (string dataRequestId)
        {
             ApiResponse<CreateSubmissionDataRequestTokenResponse> localVarResponse = await CreateDataRequestTokenAsyncWithHttpInfo(dataRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new data request token for form authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>Task of ApiResponse (CreateSubmissionDataRequestTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSubmissionDataRequestTokenResponse>> CreateDataRequestTokenAsyncWithHttpInfo (string dataRequestId)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
                throw new ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->CreateDataRequestToken");

            var localVarPath = "/data_requests/{data_request_id}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataRequestId != null) localVarPathParams.Add("data_request_id", this.Configuration.ApiClient.ParameterToString(dataRequestId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDataRequestToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubmissionDataRequestTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateSubmissionDataRequestTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubmissionDataRequestTokenResponse)));
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderData"></param>
        /// <returns>Folder</returns>
        public Folder CreateFolder (CreateFolderData createFolderData)
        {
             ApiResponse<Folder> localVarResponse = CreateFolderWithHttpInfo(createFolderData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderData"></param>
        /// <returns>ApiResponse of Folder</returns>
        public ApiResponse< Folder > CreateFolderWithHttpInfo (CreateFolderData createFolderData)
        {
            // verify the required parameter 'createFolderData' is set
            if (createFolderData == null)
                throw new ApiException(400, "Missing required parameter 'createFolderData' when calling PDFApi->CreateFolder");

            var localVarPath = "/folders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createFolderData != null && createFolderData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createFolderData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createFolderData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderData"></param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> CreateFolderAsync (CreateFolderData createFolderData)
        {
             ApiResponse<Folder> localVarResponse = await CreateFolderAsyncWithHttpInfo(createFolderData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderData"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Folder>> CreateFolderAsyncWithHttpInfo (CreateFolderData createFolderData)
        {
            // verify the required parameter 'createFolderData' is set
            if (createFolderData == null)
                throw new ApiException(400, "Missing required parameter 'createFolderData' when calling PDFApi->CreateFolder");

            var localVarPath = "/folders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createFolderData != null && createFolderData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createFolderData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createFolderData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Create a new HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createHtmlTemplateData"></param>
        /// <returns>PendingTemplate</returns>
        public PendingTemplate CreateHTMLTemplate (CreateHtmlTemplateData createHtmlTemplateData)
        {
             ApiResponse<PendingTemplate> localVarResponse = CreateHTMLTemplateWithHttpInfo(createHtmlTemplateData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createHtmlTemplateData"></param>
        /// <returns>ApiResponse of PendingTemplate</returns>
        public ApiResponse< PendingTemplate > CreateHTMLTemplateWithHttpInfo (CreateHtmlTemplateData createHtmlTemplateData)
        {
            // verify the required parameter 'createHtmlTemplateData' is set
            if (createHtmlTemplateData == null)
                throw new ApiException(400, "Missing required parameter 'createHtmlTemplateData' when calling PDFApi->CreateHTMLTemplate");

            var localVarPath = "/templates?desc=html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createHtmlTemplateData != null && createHtmlTemplateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createHtmlTemplateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createHtmlTemplateData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateHTMLTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTemplate)));
        }

        /// <summary>
        /// Create a new HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createHtmlTemplateData"></param>
        /// <returns>Task of PendingTemplate</returns>
        public async System.Threading.Tasks.Task<PendingTemplate> CreateHTMLTemplateAsync (CreateHtmlTemplateData createHtmlTemplateData)
        {
             ApiResponse<PendingTemplate> localVarResponse = await CreateHTMLTemplateAsyncWithHttpInfo(createHtmlTemplateData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createHtmlTemplateData"></param>
        /// <returns>Task of ApiResponse (PendingTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PendingTemplate>> CreateHTMLTemplateAsyncWithHttpInfo (CreateHtmlTemplateData createHtmlTemplateData)
        {
            // verify the required parameter 'createHtmlTemplateData' is set
            if (createHtmlTemplateData == null)
                throw new ApiException(400, "Missing required parameter 'createHtmlTemplateData' when calling PDFApi->CreateHTMLTemplate");

            var localVarPath = "/templates?desc=html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createHtmlTemplateData != null && createHtmlTemplateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createHtmlTemplateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createHtmlTemplateData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateHTMLTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTemplate)));
        }

        /// <summary>
        /// Create a new PDF template with a form POST file upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <returns>PendingTemplate</returns>
        public PendingTemplate CreatePDFTemplate (System.IO.Stream templateDocument, string templateName, string templateParentFolderId = null)
        {
             ApiResponse<PendingTemplate> localVarResponse = CreatePDFTemplateWithHttpInfo(templateDocument, templateName, templateParentFolderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new PDF template with a form POST file upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <returns>ApiResponse of PendingTemplate</returns>
        public ApiResponse< PendingTemplate > CreatePDFTemplateWithHttpInfo (System.IO.Stream templateDocument, string templateName, string templateParentFolderId = null)
        {
            // verify the required parameter 'templateDocument' is set
            if (templateDocument == null)
                throw new ApiException(400, "Missing required parameter 'templateDocument' when calling PDFApi->CreatePDFTemplate");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling PDFApi->CreatePDFTemplate");

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateDocument != null) localVarFileParams.Add("template[document]", this.Configuration.ApiClient.ParameterToFile("template[document]", templateDocument));
            if (templateName != null) localVarFormParams.Add("template[name]", this.Configuration.ApiClient.ParameterToString(templateName)); // form parameter
            if (templateParentFolderId != null) localVarFormParams.Add("template[parent_folder_id]", this.Configuration.ApiClient.ParameterToString(templateParentFolderId)); // form parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePDFTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTemplate)));
        }

        /// <summary>
        /// Create a new PDF template with a form POST file upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <returns>Task of PendingTemplate</returns>
        public async System.Threading.Tasks.Task<PendingTemplate> CreatePDFTemplateAsync (System.IO.Stream templateDocument, string templateName, string templateParentFolderId = null)
        {
             ApiResponse<PendingTemplate> localVarResponse = await CreatePDFTemplateAsyncWithHttpInfo(templateDocument, templateName, templateParentFolderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new PDF template with a form POST file upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <returns>Task of ApiResponse (PendingTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PendingTemplate>> CreatePDFTemplateAsyncWithHttpInfo (System.IO.Stream templateDocument, string templateName, string templateParentFolderId = null)
        {
            // verify the required parameter 'templateDocument' is set
            if (templateDocument == null)
                throw new ApiException(400, "Missing required parameter 'templateDocument' when calling PDFApi->CreatePDFTemplate");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling PDFApi->CreatePDFTemplate");

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateDocument != null) localVarFileParams.Add("template[document]", this.Configuration.ApiClient.ParameterToFile("template[document]", templateDocument));
            if (templateName != null) localVarFormParams.Add("template[name]", this.Configuration.ApiClient.ParameterToString(templateName)); // form parameter
            if (templateParentFolderId != null) localVarFormParams.Add("template[parent_folder_id]", this.Configuration.ApiClient.ParameterToString(templateParentFolderId)); // form parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePDFTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTemplate)));
        }

        /// <summary>
        /// Create a new PDF template from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateFromUploadData"></param>
        /// <returns>PendingTemplate</returns>
        public PendingTemplate CreatePDFTemplateFromUpload (CreateTemplateFromUploadData createTemplateFromUploadData)
        {
             ApiResponse<PendingTemplate> localVarResponse = CreatePDFTemplateFromUploadWithHttpInfo(createTemplateFromUploadData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new PDF template from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateFromUploadData"></param>
        /// <returns>ApiResponse of PendingTemplate</returns>
        public ApiResponse< PendingTemplate > CreatePDFTemplateFromUploadWithHttpInfo (CreateTemplateFromUploadData createTemplateFromUploadData)
        {
            // verify the required parameter 'createTemplateFromUploadData' is set
            if (createTemplateFromUploadData == null)
                throw new ApiException(400, "Missing required parameter 'createTemplateFromUploadData' when calling PDFApi->CreatePDFTemplateFromUpload");

            var localVarPath = "/templates?desc=cached_upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createTemplateFromUploadData != null && createTemplateFromUploadData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createTemplateFromUploadData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createTemplateFromUploadData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePDFTemplateFromUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTemplate)));
        }

        /// <summary>
        /// Create a new PDF template from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateFromUploadData"></param>
        /// <returns>Task of PendingTemplate</returns>
        public async System.Threading.Tasks.Task<PendingTemplate> CreatePDFTemplateFromUploadAsync (CreateTemplateFromUploadData createTemplateFromUploadData)
        {
             ApiResponse<PendingTemplate> localVarResponse = await CreatePDFTemplateFromUploadAsyncWithHttpInfo(createTemplateFromUploadData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new PDF template from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateFromUploadData"></param>
        /// <returns>Task of ApiResponse (PendingTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PendingTemplate>> CreatePDFTemplateFromUploadAsyncWithHttpInfo (CreateTemplateFromUploadData createTemplateFromUploadData)
        {
            // verify the required parameter 'createTemplateFromUploadData' is set
            if (createTemplateFromUploadData == null)
                throw new ApiException(400, "Missing required parameter 'createTemplateFromUploadData' when calling PDFApi->CreatePDFTemplateFromUpload");

            var localVarPath = "/templates?desc=cached_upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createTemplateFromUploadData != null && createTemplateFromUploadData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createTemplateFromUploadData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createTemplateFromUploadData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePDFTemplateFromUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTemplate)));
        }

        /// <summary>
        /// Delete a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Folder</returns>
        public Folder DeleteFolder (string folderId)
        {
             ApiResponse<Folder> localVarResponse = DeleteFolderWithHttpInfo(folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Folder</returns>
        public ApiResponse< Folder > DeleteFolderWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->DeleteFolder");

            var localVarPath = "/folders/{folder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folder_id", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Delete a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> DeleteFolderAsync (string folderId)
        {
             ApiResponse<Folder> localVarResponse = await DeleteFolderAsyncWithHttpInfo(folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Folder>> DeleteFolderAsyncWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->DeleteFolder");

            var localVarPath = "/folders/{folder_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folder_id", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>CombinedSubmission</returns>
        public CombinedSubmission ExpireCombinedSubmission (string combinedSubmissionId)
        {
             ApiResponse<CombinedSubmission> localVarResponse = ExpireCombinedSubmissionWithHttpInfo(combinedSubmissionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        public ApiResponse< CombinedSubmission > ExpireCombinedSubmissionWithHttpInfo (string combinedSubmissionId)
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
                throw new ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->ExpireCombinedSubmission");

            var localVarPath = "/combined_submissions/{combined_submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinedSubmissionId != null) localVarPathParams.Add("combined_submission_id", this.Configuration.ApiClient.ParameterToString(combinedSubmissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpireCombinedSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CombinedSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CombinedSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CombinedSubmission)));
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of CombinedSubmission</returns>
        public async System.Threading.Tasks.Task<CombinedSubmission> ExpireCombinedSubmissionAsync (string combinedSubmissionId)
        {
             ApiResponse<CombinedSubmission> localVarResponse = await ExpireCombinedSubmissionAsyncWithHttpInfo(combinedSubmissionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CombinedSubmission>> ExpireCombinedSubmissionAsyncWithHttpInfo (string combinedSubmissionId)
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
                throw new ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->ExpireCombinedSubmission");

            var localVarPath = "/combined_submissions/{combined_submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinedSubmissionId != null) localVarPathParams.Add("combined_submission_id", this.Configuration.ApiClient.ParameterToString(combinedSubmissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpireCombinedSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CombinedSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CombinedSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CombinedSubmission)));
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Submission</returns>
        public Submission ExpireSubmission (string submissionId)
        {
             ApiResponse<Submission> localVarResponse = ExpireSubmissionWithHttpInfo(submissionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>ApiResponse of Submission</returns>
        public ApiResponse< Submission > ExpireSubmissionWithHttpInfo (string submissionId)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->ExpireSubmission");

            var localVarPath = "/submissions/{submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpireSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Submission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submission)));
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of Submission</returns>
        public async System.Threading.Tasks.Task<Submission> ExpireSubmissionAsync (string submissionId)
        {
             ApiResponse<Submission> localVarResponse = await ExpireSubmissionAsyncWithHttpInfo(submissionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Submission>> ExpireSubmissionAsyncWithHttpInfo (string submissionId)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->ExpireSubmission");

            var localVarPath = "/submissions/{submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpireSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Submission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submission)));
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submissionData"></param>
        /// <returns>CreateSubmissionResponse</returns>
        public CreateSubmissionResponse GeneratePDF (string templateId, SubmissionData submissionData)
        {
             ApiResponse<CreateSubmissionResponse> localVarResponse = GeneratePDFWithHttpInfo(templateId, submissionData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submissionData"></param>
        /// <returns>ApiResponse of CreateSubmissionResponse</returns>
        public ApiResponse< CreateSubmissionResponse > GeneratePDFWithHttpInfo (string templateId, SubmissionData submissionData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GeneratePDF");
            // verify the required parameter 'submissionData' is set
            if (submissionData == null)
                throw new ApiException(400, "Missing required parameter 'submissionData' when calling PDFApi->GeneratePDF");

            var localVarPath = "/templates/{template_id}/submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (submissionData != null && submissionData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(submissionData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = submissionData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeneratePDF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubmissionResponse)));
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submissionData"></param>
        /// <returns>Task of CreateSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubmissionResponse> GeneratePDFAsync (string templateId, SubmissionData submissionData)
        {
             ApiResponse<CreateSubmissionResponse> localVarResponse = await GeneratePDFAsyncWithHttpInfo(templateId, submissionData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submissionData"></param>
        /// <returns>Task of ApiResponse (CreateSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSubmissionResponse>> GeneratePDFAsyncWithHttpInfo (string templateId, SubmissionData submissionData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GeneratePDF");
            // verify the required parameter 'submissionData' is set
            if (submissionData == null)
                throw new ApiException(400, "Missing required parameter 'submissionData' when calling PDFApi->GeneratePDF");

            var localVarPath = "/templates/{template_id}/submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (submissionData != null && submissionData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(submissionData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = submissionData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeneratePDF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSubmissionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateSubmissionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSubmissionResponse)));
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>CombinedSubmission</returns>
        public CombinedSubmission GetCombinedSubmission (string combinedSubmissionId)
        {
             ApiResponse<CombinedSubmission> localVarResponse = GetCombinedSubmissionWithHttpInfo(combinedSubmissionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        public ApiResponse< CombinedSubmission > GetCombinedSubmissionWithHttpInfo (string combinedSubmissionId)
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
                throw new ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->GetCombinedSubmission");

            var localVarPath = "/combined_submissions/{combined_submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinedSubmissionId != null) localVarPathParams.Add("combined_submission_id", this.Configuration.ApiClient.ParameterToString(combinedSubmissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCombinedSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CombinedSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CombinedSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CombinedSubmission)));
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of CombinedSubmission</returns>
        public async System.Threading.Tasks.Task<CombinedSubmission> GetCombinedSubmissionAsync (string combinedSubmissionId)
        {
             ApiResponse<CombinedSubmission> localVarResponse = await GetCombinedSubmissionAsyncWithHttpInfo(combinedSubmissionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CombinedSubmission>> GetCombinedSubmissionAsyncWithHttpInfo (string combinedSubmissionId)
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
                throw new ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->GetCombinedSubmission");

            var localVarPath = "/combined_submissions/{combined_submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (combinedSubmissionId != null) localVarPathParams.Add("combined_submission_id", this.Configuration.ApiClient.ParameterToString(combinedSubmissionId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCombinedSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CombinedSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CombinedSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CombinedSubmission)));
        }

        /// <summary>
        /// Look up a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>SubmissionDataRequest</returns>
        public SubmissionDataRequest GetDataRequest (string dataRequestId)
        {
             ApiResponse<SubmissionDataRequest> localVarResponse = GetDataRequestWithHttpInfo(dataRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Look up a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>ApiResponse of SubmissionDataRequest</returns>
        public ApiResponse< SubmissionDataRequest > GetDataRequestWithHttpInfo (string dataRequestId)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
                throw new ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->GetDataRequest");

            var localVarPath = "/data_requests/{data_request_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataRequestId != null) localVarPathParams.Add("data_request_id", this.Configuration.ApiClient.ParameterToString(dataRequestId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmissionDataRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubmissionDataRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmissionDataRequest)));
        }

        /// <summary>
        /// Look up a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>Task of SubmissionDataRequest</returns>
        public async System.Threading.Tasks.Task<SubmissionDataRequest> GetDataRequestAsync (string dataRequestId)
        {
             ApiResponse<SubmissionDataRequest> localVarResponse = await GetDataRequestAsyncWithHttpInfo(dataRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Look up a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <returns>Task of ApiResponse (SubmissionDataRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmissionDataRequest>> GetDataRequestAsyncWithHttpInfo (string dataRequestId)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
                throw new ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->GetDataRequest");

            var localVarPath = "/data_requests/{data_request_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataRequestId != null) localVarPathParams.Add("data_request_id", this.Configuration.ApiClient.ParameterToString(dataRequestId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmissionDataRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubmissionDataRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmissionDataRequest)));
        }

        /// <summary>
        /// Fetch the full template attributes 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Template1</returns>
        public Template1 GetFullTemplate (string templateId)
        {
             ApiResponse<Template1> localVarResponse = GetFullTemplateWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the full template attributes 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of Template1</returns>
        public ApiResponse< Template1 > GetFullTemplateWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetFullTemplate");

            var localVarPath = "/templates/{template_id}?full=true";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFullTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template1)));
        }

        /// <summary>
        /// Fetch the full template attributes 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of Template1</returns>
        public async System.Threading.Tasks.Task<Template1> GetFullTemplateAsync (string templateId)
        {
             ApiResponse<Template1> localVarResponse = await GetFullTemplateAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch the full template attributes 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse (Template1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template1>> GetFullTemplateAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetFullTemplate");

            var localVarPath = "/templates/{template_id}?full=true";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFullTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template1)));
        }

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GetPresignUrl ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = GetPresignUrlWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > GetPresignUrlWithHttpInfo ()
        {

            var localVarPath = "/uploads/presign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPresignUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GetPresignUrlAsync ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await GetPresignUrlAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetPresignUrlAsyncWithHttpInfo ()
        {

            var localVarPath = "/uploads/presign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPresignUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Submission</returns>
        public Submission GetSubmission (string submissionId, bool? includeData = null)
        {
             ApiResponse<Submission> localVarResponse = GetSubmissionWithHttpInfo(submissionId, includeData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>ApiResponse of Submission</returns>
        public ApiResponse< Submission > GetSubmissionWithHttpInfo (string submissionId, bool? includeData = null)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->GetSubmission");

            var localVarPath = "/submissions/{submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter
            if (includeData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_data", includeData)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Submission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submission)));
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Task of Submission</returns>
        public async System.Threading.Tasks.Task<Submission> GetSubmissionAsync (string submissionId, bool? includeData = null)
        {
             ApiResponse<Submission> localVarResponse = await GetSubmissionAsyncWithHttpInfo(submissionId, includeData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Submission>> GetSubmissionAsyncWithHttpInfo (string submissionId, bool? includeData = null)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
                throw new ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->GetSubmission");

            var localVarPath = "/submissions/{submission_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionId != null) localVarPathParams.Add("submission_id", this.Configuration.ApiClient.ParameterToString(submissionId)); // path parameter
            if (includeData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_data", includeData)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Submission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submission)));
        }

        /// <summary>
        /// Check the status of a submission batch job 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <returns>SubmissionBatch</returns>
        public SubmissionBatch GetSubmissionBatch (string submissionBatchId, bool? includeSubmissions = null)
        {
             ApiResponse<SubmissionBatch> localVarResponse = GetSubmissionBatchWithHttpInfo(submissionBatchId, includeSubmissions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a submission batch job 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <returns>ApiResponse of SubmissionBatch</returns>
        public ApiResponse< SubmissionBatch > GetSubmissionBatchWithHttpInfo (string submissionBatchId, bool? includeSubmissions = null)
        {
            // verify the required parameter 'submissionBatchId' is set
            if (submissionBatchId == null)
                throw new ApiException(400, "Missing required parameter 'submissionBatchId' when calling PDFApi->GetSubmissionBatch");

            var localVarPath = "/submissions/batches/{submission_batch_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionBatchId != null) localVarPathParams.Add("submission_batch_id", this.Configuration.ApiClient.ParameterToString(submissionBatchId)); // path parameter
            if (includeSubmissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_submissions", includeSubmissions)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmissionBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmissionBatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubmissionBatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmissionBatch)));
        }

        /// <summary>
        /// Check the status of a submission batch job 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <returns>Task of SubmissionBatch</returns>
        public async System.Threading.Tasks.Task<SubmissionBatch> GetSubmissionBatchAsync (string submissionBatchId, bool? includeSubmissions = null)
        {
             ApiResponse<SubmissionBatch> localVarResponse = await GetSubmissionBatchAsyncWithHttpInfo(submissionBatchId, includeSubmissions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the status of a submission batch job 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <returns>Task of ApiResponse (SubmissionBatch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmissionBatch>> GetSubmissionBatchAsyncWithHttpInfo (string submissionBatchId, bool? includeSubmissions = null)
        {
            // verify the required parameter 'submissionBatchId' is set
            if (submissionBatchId == null)
                throw new ApiException(400, "Missing required parameter 'submissionBatchId' when calling PDFApi->GetSubmissionBatch");

            var localVarPath = "/submissions/batches/{submission_batch_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (submissionBatchId != null) localVarPathParams.Add("submission_batch_id", this.Configuration.ApiClient.ParameterToString(submissionBatchId)); // path parameter
            if (includeSubmissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_submissions", includeSubmissions)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmissionBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmissionBatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubmissionBatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmissionBatch)));
        }

        /// <summary>
        /// Check the status of an uploaded template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Template</returns>
        public Template GetTemplate (string templateId)
        {
             ApiResponse<Template> localVarResponse = GetTemplateWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of an uploaded template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > GetTemplateWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetTemplate");

            var localVarPath = "/templates/{template_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        /// Check the status of an uploaded template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> GetTemplateAsync (string templateId)
        {
             ApiResponse<Template> localVarResponse = await GetTemplateAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the status of an uploaded template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> GetTemplateAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetTemplate");

            var localVarPath = "/templates/{template_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        /// Fetch the JSON schema for a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GetTemplateSchema (string templateId)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = GetTemplateSchemaWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the JSON schema for a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > GetTemplateSchemaWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetTemplateSchema");

            var localVarPath = "/templates/{template_id}/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Fetch the JSON schema for a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GetTemplateSchemaAsync (string templateId)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await GetTemplateSchemaAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch the JSON schema for a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetTemplateSchemaAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetTemplateSchema");

            var localVarPath = "/templates/{template_id}/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplateSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Get a list of all folders 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <returns>List&lt;Folder&gt;</returns>
        public List<Folder> ListFolders (string parentFolderId = null)
        {
             ApiResponse<List<Folder>> localVarResponse = ListFoldersWithHttpInfo(parentFolderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all folders 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <returns>ApiResponse of List&lt;Folder&gt;</returns>
        public ApiResponse< List<Folder> > ListFoldersWithHttpInfo (string parentFolderId = null)
        {

            var localVarPath = "/folders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentFolderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_folder_id", parentFolderId)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Folder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Folder>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Folder>)));
        }

        /// <summary>
        /// Get a list of all folders 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <returns>Task of List&lt;Folder&gt;</returns>
        public async System.Threading.Tasks.Task<List<Folder>> ListFoldersAsync (string parentFolderId = null)
        {
             ApiResponse<List<Folder>> localVarResponse = await ListFoldersAsyncWithHttpInfo(parentFolderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all folders 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Folder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Folder>>> ListFoldersAsyncWithHttpInfo (string parentFolderId = null)
        {

            var localVarPath = "/folders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentFolderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_folder_id", parentFolderId)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Folder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Folder>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Folder>)));
        }

        /// <summary>
        /// List all submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>ListSubmissionsResponse</returns>
        public ListSubmissionsResponse ListSubmissions (string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null)
        {
             ApiResponse<ListSubmissionsResponse> localVarResponse = ListSubmissionsWithHttpInfo(cursor, limit, createdAfter, createdBefore, type, includeData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>ApiResponse of ListSubmissionsResponse</returns>
        public ApiResponse< ListSubmissionsResponse > ListSubmissionsWithHttpInfo (string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null)
        {

            var localVarPath = "/submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_after", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_before", createdBefore)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (includeData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_data", includeData)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSubmissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListSubmissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListSubmissionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListSubmissionsResponse)));
        }

        /// <summary>
        /// List all submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Task of ListSubmissionsResponse</returns>
        public async System.Threading.Tasks.Task<ListSubmissionsResponse> ListSubmissionsAsync (string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null)
        {
             ApiResponse<ListSubmissionsResponse> localVarResponse = await ListSubmissionsAsyncWithHttpInfo(cursor, limit, createdAfter, createdBefore, type, includeData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ListSubmissionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListSubmissionsResponse>> ListSubmissionsAsyncWithHttpInfo (string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null)
        {

            var localVarPath = "/submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_after", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_before", createdBefore)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (includeData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_data", includeData)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSubmissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListSubmissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListSubmissionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListSubmissionsResponse)));
        }

        /// <summary>
        /// List all submissions for a given template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>ListSubmissionsResponse</returns>
        public ListSubmissionsResponse ListSubmissions_0 (string templateId, string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null)
        {
             ApiResponse<ListSubmissionsResponse> localVarResponse = ListSubmissions_0WithHttpInfo(templateId, cursor, limit, createdAfter, createdBefore, type, includeData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all submissions for a given template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>ApiResponse of ListSubmissionsResponse</returns>
        public ApiResponse< ListSubmissionsResponse > ListSubmissions_0WithHttpInfo (string templateId, string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->ListSubmissions_0");

            var localVarPath = "/templates/{template_id}/submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_after", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_before", createdBefore)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (includeData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_data", includeData)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSubmissions_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListSubmissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListSubmissionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListSubmissionsResponse)));
        }

        /// <summary>
        /// List all submissions for a given template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Task of ListSubmissionsResponse</returns>
        public async System.Threading.Tasks.Task<ListSubmissionsResponse> ListSubmissions_0Async (string templateId, string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null)
        {
             ApiResponse<ListSubmissionsResponse> localVarResponse = await ListSubmissions_0AsyncWithHttpInfo(templateId, cursor, limit, createdAfter, createdBefore, type, includeData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all submissions for a given template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ListSubmissionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListSubmissionsResponse>> ListSubmissions_0AsyncWithHttpInfo (string templateId, string cursor = null, decimal? limit = null, string createdAfter = null, string createdBefore = null, string type = null, bool? includeData = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->ListSubmissions_0");

            var localVarPath = "/templates/{template_id}/submissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_after", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_before", createdBefore)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (includeData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_data", includeData)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSubmissions_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListSubmissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListSubmissionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListSubmissionsResponse)));
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> ListTemplates (string query = null, string parentFolderId = null, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Template>> localVarResponse = ListTemplatesWithHttpInfo(query, parentFolderId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public ApiResponse< List<Template> > ListTemplatesWithHttpInfo (string query = null, string parentFolderId = null, int? page = null, int? perPage = null)
        {

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (parentFolderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_folder_id", parentFolderId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> ListTemplatesAsync (string query = null, string parentFolderId = null, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Template>> localVarResponse = await ListTemplatesAsyncWithHttpInfo(query, parentFolderId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Template>>> ListTemplatesAsyncWithHttpInfo (string query = null, string parentFolderId = null, int? page = null, int? perPage = null)
        {

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (parentFolderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_folder_id", parentFolderId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
        }

        /// <summary>
        /// Move a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="moveFolderData"></param>
        /// <returns>Folder</returns>
        public Folder MoveFolderToFolder (string folderId, MoveFolderData moveFolderData)
        {
             ApiResponse<Folder> localVarResponse = MoveFolderToFolderWithHttpInfo(folderId, moveFolderData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="moveFolderData"></param>
        /// <returns>ApiResponse of Folder</returns>
        public ApiResponse< Folder > MoveFolderToFolderWithHttpInfo (string folderId, MoveFolderData moveFolderData)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->MoveFolderToFolder");
            // verify the required parameter 'moveFolderData' is set
            if (moveFolderData == null)
                throw new ApiException(400, "Missing required parameter 'moveFolderData' when calling PDFApi->MoveFolderToFolder");

            var localVarPath = "/folders/{folder_id}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folder_id", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (moveFolderData != null && moveFolderData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(moveFolderData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = moveFolderData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveFolderToFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Move a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="moveFolderData"></param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> MoveFolderToFolderAsync (string folderId, MoveFolderData moveFolderData)
        {
             ApiResponse<Folder> localVarResponse = await MoveFolderToFolderAsyncWithHttpInfo(folderId, moveFolderData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="moveFolderData"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Folder>> MoveFolderToFolderAsyncWithHttpInfo (string folderId, MoveFolderData moveFolderData)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->MoveFolderToFolder");
            // verify the required parameter 'moveFolderData' is set
            if (moveFolderData == null)
                throw new ApiException(400, "Missing required parameter 'moveFolderData' when calling PDFApi->MoveFolderToFolder");

            var localVarPath = "/folders/{folder_id}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folder_id", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (moveFolderData != null && moveFolderData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(moveFolderData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = moveFolderData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveFolderToFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Move Template to folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="moveTemplateData"></param>
        /// <returns>Template</returns>
        public Template MoveTemplateToFolder (string templateId, MoveTemplateData moveTemplateData)
        {
             ApiResponse<Template> localVarResponse = MoveTemplateToFolderWithHttpInfo(templateId, moveTemplateData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move Template to folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="moveTemplateData"></param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > MoveTemplateToFolderWithHttpInfo (string templateId, MoveTemplateData moveTemplateData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->MoveTemplateToFolder");
            // verify the required parameter 'moveTemplateData' is set
            if (moveTemplateData == null)
                throw new ApiException(400, "Missing required parameter 'moveTemplateData' when calling PDFApi->MoveTemplateToFolder");

            var localVarPath = "/templates/{template_id}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (moveTemplateData != null && moveTemplateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(moveTemplateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = moveTemplateData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveTemplateToFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        /// Move Template to folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="moveTemplateData"></param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> MoveTemplateToFolderAsync (string templateId, MoveTemplateData moveTemplateData)
        {
             ApiResponse<Template> localVarResponse = await MoveTemplateToFolderAsyncWithHttpInfo(templateId, moveTemplateData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move Template to folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="moveTemplateData"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> MoveTemplateToFolderAsyncWithHttpInfo (string templateId, MoveTemplateData moveTemplateData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->MoveTemplateToFolder");
            // verify the required parameter 'moveTemplateData' is set
            if (moveTemplateData == null)
                throw new ApiException(400, "Missing required parameter 'moveTemplateData' when calling PDFApi->MoveTemplateToFolder");

            var localVarPath = "/templates/{template_id}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (moveTemplateData != null && moveTemplateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(moveTemplateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = moveTemplateData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveTemplateToFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
        }

        /// <summary>
        /// Rename a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="renameFolderData"></param>
        /// <returns></returns>
        public void RenameFolder (string folderId, RenameFolderData renameFolderData)
        {
             RenameFolderWithHttpInfo(folderId, renameFolderData);
        }

        /// <summary>
        /// Rename a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="renameFolderData"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RenameFolderWithHttpInfo (string folderId, RenameFolderData renameFolderData)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->RenameFolder");
            // verify the required parameter 'renameFolderData' is set
            if (renameFolderData == null)
                throw new ApiException(400, "Missing required parameter 'renameFolderData' when calling PDFApi->RenameFolder");

            var localVarPath = "/folders/{folder_id}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folder_id", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (renameFolderData != null && renameFolderData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(renameFolderData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = renameFolderData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenameFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Rename a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="renameFolderData"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RenameFolderAsync (string folderId, RenameFolderData renameFolderData)
        {
             await RenameFolderAsyncWithHttpInfo(folderId, renameFolderData);

        }

        /// <summary>
        /// Rename a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="renameFolderData"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RenameFolderAsyncWithHttpInfo (string folderId, RenameFolderData renameFolderData)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->RenameFolder");
            // verify the required parameter 'renameFolderData' is set
            if (renameFolderData == null)
                throw new ApiException(400, "Missing required parameter 'renameFolderData' when calling PDFApi->RenameFolder");

            var localVarPath = "/folders/{folder_id}/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folder_id", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (renameFolderData != null && renameFolderData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(renameFolderData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = renameFolderData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenameFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthenticationSuccessResponse</returns>
        public AuthenticationSuccessResponse TestAuthentication ()
        {
             ApiResponse<AuthenticationSuccessResponse> localVarResponse = TestAuthenticationWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthenticationSuccessResponse</returns>
        public ApiResponse< AuthenticationSuccessResponse > TestAuthenticationWithHttpInfo ()
        {

            var localVarPath = "/authentication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestAuthentication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationSuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationSuccessResponse)));
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AuthenticationSuccessResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticationSuccessResponse> TestAuthenticationAsync ()
        {
             ApiResponse<AuthenticationSuccessResponse> localVarResponse = await TestAuthenticationAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AuthenticationSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthenticationSuccessResponse>> TestAuthenticationAsyncWithHttpInfo ()
        {

            var localVarPath = "/authentication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestAuthentication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthenticationSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthenticationSuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthenticationSuccessResponse)));
        }

        /// <summary>
        /// Update a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="updateSubmissionDataRequestData"></param>
        /// <returns>UpdateDataRequestResponse</returns>
        public UpdateDataRequestResponse UpdateDataRequest (string dataRequestId, UpdateSubmissionDataRequestData updateSubmissionDataRequestData)
        {
             ApiResponse<UpdateDataRequestResponse> localVarResponse = UpdateDataRequestWithHttpInfo(dataRequestId, updateSubmissionDataRequestData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="updateSubmissionDataRequestData"></param>
        /// <returns>ApiResponse of UpdateDataRequestResponse</returns>
        public ApiResponse< UpdateDataRequestResponse > UpdateDataRequestWithHttpInfo (string dataRequestId, UpdateSubmissionDataRequestData updateSubmissionDataRequestData)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
                throw new ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->UpdateDataRequest");
            // verify the required parameter 'updateSubmissionDataRequestData' is set
            if (updateSubmissionDataRequestData == null)
                throw new ApiException(400, "Missing required parameter 'updateSubmissionDataRequestData' when calling PDFApi->UpdateDataRequest");

            var localVarPath = "/data_requests/{data_request_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataRequestId != null) localVarPathParams.Add("data_request_id", this.Configuration.ApiClient.ParameterToString(dataRequestId)); // path parameter
            if (updateSubmissionDataRequestData != null && updateSubmissionDataRequestData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSubmissionDataRequestData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSubmissionDataRequestData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDataRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDataRequestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateDataRequestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDataRequestResponse)));
        }

        /// <summary>
        /// Update a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="updateSubmissionDataRequestData"></param>
        /// <returns>Task of UpdateDataRequestResponse</returns>
        public async System.Threading.Tasks.Task<UpdateDataRequestResponse> UpdateDataRequestAsync (string dataRequestId, UpdateSubmissionDataRequestData updateSubmissionDataRequestData)
        {
             ApiResponse<UpdateDataRequestResponse> localVarResponse = await UpdateDataRequestAsyncWithHttpInfo(dataRequestId, updateSubmissionDataRequestData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="updateSubmissionDataRequestData"></param>
        /// <returns>Task of ApiResponse (UpdateDataRequestResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateDataRequestResponse>> UpdateDataRequestAsyncWithHttpInfo (string dataRequestId, UpdateSubmissionDataRequestData updateSubmissionDataRequestData)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
                throw new ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->UpdateDataRequest");
            // verify the required parameter 'updateSubmissionDataRequestData' is set
            if (updateSubmissionDataRequestData == null)
                throw new ApiException(400, "Missing required parameter 'updateSubmissionDataRequestData' when calling PDFApi->UpdateDataRequest");

            var localVarPath = "/data_requests/{data_request_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataRequestId != null) localVarPathParams.Add("data_request_id", this.Configuration.ApiClient.ParameterToString(dataRequestId)); // path parameter
            if (updateSubmissionDataRequestData != null && updateSubmissionDataRequestData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSubmissionDataRequestData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSubmissionDataRequestData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDataRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDataRequestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateDataRequestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDataRequestResponse)));
        }

        /// <summary>
        /// Update a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="updateTemplateData"></param>
        /// <returns>UpdateTemplateResponse</returns>
        public UpdateTemplateResponse UpdateTemplate (string templateId, UpdateTemplateData updateTemplateData)
        {
             ApiResponse<UpdateTemplateResponse> localVarResponse = UpdateTemplateWithHttpInfo(templateId, updateTemplateData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="updateTemplateData"></param>
        /// <returns>ApiResponse of UpdateTemplateResponse</returns>
        public ApiResponse< UpdateTemplateResponse > UpdateTemplateWithHttpInfo (string templateId, UpdateTemplateData updateTemplateData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->UpdateTemplate");
            // verify the required parameter 'updateTemplateData' is set
            if (updateTemplateData == null)
                throw new ApiException(400, "Missing required parameter 'updateTemplateData' when calling PDFApi->UpdateTemplate");

            var localVarPath = "/templates/{template_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (updateTemplateData != null && updateTemplateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateTemplateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTemplateData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateTemplateResponse)));
        }

        /// <summary>
        /// Update a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="updateTemplateData"></param>
        /// <returns>Task of UpdateTemplateResponse</returns>
        public async System.Threading.Tasks.Task<UpdateTemplateResponse> UpdateTemplateAsync (string templateId, UpdateTemplateData updateTemplateData)
        {
             ApiResponse<UpdateTemplateResponse> localVarResponse = await UpdateTemplateAsyncWithHttpInfo(templateId, updateTemplateData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="updateTemplateData"></param>
        /// <returns>Task of ApiResponse (UpdateTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateTemplateResponse>> UpdateTemplateAsyncWithHttpInfo (string templateId, UpdateTemplateData updateTemplateData)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->UpdateTemplate");
            // verify the required parameter 'updateTemplateData' is set
            if (updateTemplateData == null)
                throw new ApiException(400, "Missing required parameter 'updateTemplateData' when calling PDFApi->UpdateTemplate");

            var localVarPath = "/templates/{template_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("template_id", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (updateTemplateData != null && updateTemplateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateTemplateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTemplateData; // byte array
            }

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateTemplateResponse)));
        }

    }
}
