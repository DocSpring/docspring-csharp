/*
 * DocSpring API
 *
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DocSpring.Client.Client;
using DocSpring.Client.Model;

namespace DocSpring.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPDFApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new fields to a Template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateAddFieldsResponse</returns>
        TemplateAddFieldsResponse AddFieldsToTemplate(string templateId, AddFieldsData data, int operationIndex = 0);

        /// <summary>
        /// Add new fields to a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateAddFieldsResponse</returns>
        ApiResponse<TemplateAddFieldsResponse> AddFieldsToTemplateWithHttpInfo(string templateId, AddFieldsData data, int operationIndex = 0);
        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for submission batch to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchGeneratePdfs201Response</returns>
        BatchGeneratePdfs201Response BatchGeneratePdfs(SubmissionBatchData data, bool? wait = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for submission batch to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchGeneratePdfs201Response</returns>
        ApiResponse<BatchGeneratePdfs201Response> BatchGeneratePdfsWithHttpInfo(SubmissionBatchData data, bool? wait = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        CreateCombinedSubmissionResponse CombinePdfs(CombinePdfsData data, int operationIndex = 0);

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        ApiResponse<CreateCombinedSubmissionResponse> CombinePdfsWithHttpInfo(CombinePdfsData data, int operationIndex = 0);
        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for combined submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        CreateCombinedSubmissionResponse CombineSubmissions(CombinedSubmissionData data, bool? wait = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for combined submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        ApiResponse<CreateCombinedSubmissionResponse> CombineSubmissionsWithHttpInfo(CombinedSubmissionData data, bool? wait = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Copy a Template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePreview</returns>
        TemplatePreview CopyTemplate(string templateId, CopyTemplateOptions options = default(CopyTemplateOptions), int operationIndex = 0);

        /// <summary>
        /// Copy a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePreview</returns>
        ApiResponse<TemplatePreview> CopyTemplateWithHttpInfo(string templateId, CopyTemplateOptions options = default(CopyTemplateOptions), int operationIndex = 0);
        /// <summary>
        /// Create a new custom file from a cached presign upload
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCustomFileResponse</returns>
        CreateCustomFileResponse CreateCustomFileFromUpload(CreateCustomFileData data, int operationIndex = 0);

        /// <summary>
        /// Create a new custom file from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCustomFileResponse</returns>
        ApiResponse<CreateCustomFileResponse> CreateCustomFileFromUploadWithHttpInfo(CreateCustomFileData data, int operationIndex = 0);
        /// <summary>
        /// Creates a new event for emailing a signee a request for signature
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionDataRequestEventResponse</returns>
        CreateSubmissionDataRequestEventResponse CreateDataRequestEvent(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0);

        /// <summary>
        /// Creates a new event for emailing a signee a request for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionDataRequestEventResponse</returns>
        ApiResponse<CreateSubmissionDataRequestEventResponse> CreateDataRequestEventWithHttpInfo(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0);
        /// <summary>
        /// Creates a new data request token for form authentication
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionDataRequestTokenResponse</returns>
        CreateSubmissionDataRequestTokenResponse CreateDataRequestToken(string dataRequestId, string type = default(string), int operationIndex = 0);

        /// <summary>
        /// Creates a new data request token for form authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionDataRequestTokenResponse</returns>
        ApiResponse<CreateSubmissionDataRequestTokenResponse> CreateDataRequestTokenWithHttpInfo(string dataRequestId, string type = default(string), int operationIndex = 0);
        /// <summary>
        /// Create a folder
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        Folder CreateFolder(CreateFolderData data, int operationIndex = 0);

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> CreateFolderWithHttpInfo(CreateFolderData data, int operationIndex = 0);
        /// <summary>
        /// Create a new HTML template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePreview</returns>
        TemplatePreview CreateHTMLTemplate(CreateHtmlTemplate data, int operationIndex = 0);

        /// <summary>
        /// Create a new HTML template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePreview</returns>
        ApiResponse<TemplatePreview> CreateHTMLTemplateWithHttpInfo(CreateHtmlTemplate data, int operationIndex = 0);
        /// <summary>
        /// Create a new PDF template with a form POST file upload
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="wait">Wait for template document to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="templateDescription"> (optional)</param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePreview</returns>
        TemplatePreview CreatePDFTemplate(System.IO.Stream templateDocument, string templateName, bool? wait = default(bool?), string templateDescription = default(string), string templateParentFolderId = default(string), int operationIndex = 0);

        /// <summary>
        /// Create a new PDF template with a form POST file upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="wait">Wait for template document to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="templateDescription"> (optional)</param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePreview</returns>
        ApiResponse<TemplatePreview> CreatePDFTemplateWithHttpInfo(System.IO.Stream templateDocument, string templateName, bool? wait = default(bool?), string templateDescription = default(string), string templateParentFolderId = default(string), int operationIndex = 0);
        /// <summary>
        /// Create a new PDF template from a cached presign upload
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePreview</returns>
        TemplatePreview CreatePDFTemplateFromUpload(CreatePdfTemplate data, int operationIndex = 0);

        /// <summary>
        /// Create a new PDF template from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePreview</returns>
        ApiResponse<TemplatePreview> CreatePDFTemplateFromUploadWithHttpInfo(CreatePdfTemplate data, int operationIndex = 0);
        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        Folder DeleteFolder(string folderId, int operationIndex = 0);

        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> DeleteFolderWithHttpInfo(string folderId, int operationIndex = 0);
        /// <summary>
        /// Delete a template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateDeleteResponse</returns>
        TemplateDeleteResponse DeleteTemplate(string templateId, string version = default(string), int operationIndex = 0);

        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateDeleteResponse</returns>
        ApiResponse<TemplateDeleteResponse> DeleteTemplateWithHttpInfo(string templateId, string version = default(string), int operationIndex = 0);
        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CombinedSubmission</returns>
        CombinedSubmission ExpireCombinedSubmission(string combinedSubmissionId, int operationIndex = 0);

        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        ApiResponse<CombinedSubmission> ExpireCombinedSubmissionWithHttpInfo(string combinedSubmissionId, int operationIndex = 0);
        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmissionPreview</returns>
        SubmissionPreview ExpireSubmission(string submissionId, int operationIndex = 0);

        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmissionPreview</returns>
        ApiResponse<SubmissionPreview> ExpireSubmissionWithHttpInfo(string submissionId, int operationIndex = 0);
        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionResponse</returns>
        CreateSubmissionResponse GeneratePdf(string templateId, CreatePdfSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionResponse</returns>
        ApiResponse<CreateSubmissionResponse> GeneratePdfWithHttpInfo(string templateId, CreatePdfSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Generates a new PDF for an HTML template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionResponse</returns>
        CreateSubmissionResponse GeneratePdfForHtmlTemplate(string templateId, CreateHtmlSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Generates a new PDF for an HTML template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionResponse</returns>
        ApiResponse<CreateSubmissionResponse> GeneratePdfForHtmlTemplateWithHttpInfo(string templateId, CreateHtmlSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Generated a preview PDF for partially completed data requests
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessErrorResponse</returns>
        SuccessErrorResponse GeneratePreview(string submissionId, int operationIndex = 0);

        /// <summary>
        /// Generated a preview PDF for partially completed data requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessErrorResponse</returns>
        ApiResponse<SuccessErrorResponse> GeneratePreviewWithHttpInfo(string submissionId, int operationIndex = 0);
        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CombinedSubmission</returns>
        CombinedSubmission GetCombinedSubmission(string combinedSubmissionId, int operationIndex = 0);

        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        ApiResponse<CombinedSubmission> GetCombinedSubmissionWithHttpInfo(string combinedSubmissionId, int operationIndex = 0);
        /// <summary>
        /// Look up a submission data request
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmissionDataRequestShow</returns>
        SubmissionDataRequestShow GetDataRequest(string dataRequestId, int operationIndex = 0);

        /// <summary>
        /// Look up a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmissionDataRequestShow</returns>
        ApiResponse<SubmissionDataRequestShow> GetDataRequestWithHttpInfo(string dataRequestId, int operationIndex = 0);
        /// <summary>
        /// Fetch the full attributes for a PDF template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Template</returns>
        Template GetFullTemplate(string templateId, int operationIndex = 0);

        /// <summary>
        /// Fetch the full attributes for a PDF template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> GetFullTemplateWithHttpInfo(string templateId, int operationIndex = 0);
        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadPresignResponse</returns>
        UploadPresignResponse GetPresignUrl(int operationIndex = 0);

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadPresignResponse</returns>
        ApiResponse<UploadPresignResponse> GetPresignUrlWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Submission</returns>
        Submission GetSubmission(string submissionId, bool? includeData = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Submission</returns>
        ApiResponse<Submission> GetSubmissionWithHttpInfo(string submissionId, bool? includeData = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Check the status of a submission batch job
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmissionBatchWithSubmissions</returns>
        SubmissionBatchWithSubmissions GetSubmissionBatch(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Check the status of a submission batch job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmissionBatchWithSubmissions</returns>
        ApiResponse<SubmissionBatchWithSubmissions> GetSubmissionBatchWithHttpInfo(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Check the status of an uploaded template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePreview</returns>
        TemplatePreview GetTemplate(string templateId, int operationIndex = 0);

        /// <summary>
        /// Check the status of an uploaded template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePreview</returns>
        ApiResponse<TemplatePreview> GetTemplateWithHttpInfo(string templateId, int operationIndex = 0);
        /// <summary>
        /// Fetch the JSON schema for a template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonSchema</returns>
        JsonSchema GetTemplateSchema(string templateId, int operationIndex = 0);

        /// <summary>
        /// Fetch the JSON schema for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonSchema</returns>
        ApiResponse<JsonSchema> GetTemplateSchemaWithHttpInfo(string templateId, int operationIndex = 0);
        /// <summary>
        /// Get a list of all combined submissions
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CombinedSubmission&gt;</returns>
        List<CombinedSubmission> ListCombinedSubmissions(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a list of all combined submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CombinedSubmission&gt;</returns>
        ApiResponse<List<CombinedSubmission>> ListCombinedSubmissionsWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a list of all folders
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Folder&gt;</returns>
        List<Folder> ListFolders(string parentFolderId = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a list of all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Folder&gt;</returns>
        ApiResponse<List<Folder>> ListFoldersWithHttpInfo(string parentFolderId = default(string), int operationIndex = 0);
        /// <summary>
        /// List all submissions
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubmissionsResponse</returns>
        ListSubmissionsResponse ListSubmissions(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List all submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubmissionsResponse</returns>
        ApiResponse<ListSubmissionsResponse> ListSubmissionsWithHttpInfo(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0);
        /// <summary>
        /// List all submissions for a given template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubmissionsResponse</returns>
        ListSubmissionsResponse ListTemplateSubmissions(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List all submissions for a given template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubmissionsResponse</returns>
        ApiResponse<ListSubmissionsResponse> ListTemplateSubmissionsWithHttpInfo(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TemplatePreview&gt;</returns>
        List<TemplatePreview> ListTemplates(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TemplatePreview&gt;</returns>
        ApiResponse<List<TemplatePreview>> ListTemplatesWithHttpInfo(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Move a folder
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        Folder MoveFolderToFolder(string folderId, MoveFolderData data, int operationIndex = 0);

        /// <summary>
        /// Move a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> MoveFolderToFolderWithHttpInfo(string folderId, MoveFolderData data, int operationIndex = 0);
        /// <summary>
        /// Move Template to folder
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePreview</returns>
        TemplatePreview MoveTemplateToFolder(string templateId, MoveTemplateData data, int operationIndex = 0);

        /// <summary>
        /// Move Template to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePreview</returns>
        ApiResponse<TemplatePreview> MoveTemplateToFolderWithHttpInfo(string templateId, MoveTemplateData data, int operationIndex = 0);
        /// <summary>
        /// Publish a template version
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePublishVersionResponse</returns>
        TemplatePublishVersionResponse PublishTemplateVersion(string templateId, PublishVersionData data, int operationIndex = 0);

        /// <summary>
        /// Publish a template version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePublishVersionResponse</returns>
        ApiResponse<TemplatePublishVersionResponse> PublishTemplateVersionWithHttpInfo(string templateId, PublishVersionData data, int operationIndex = 0);
        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        Folder RenameFolder(string folderId, RenameFolderData data, int operationIndex = 0);

        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> RenameFolderWithHttpInfo(string folderId, RenameFolderData data, int operationIndex = 0);
        /// <summary>
        /// Restore a template version
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessErrorResponse</returns>
        SuccessErrorResponse RestoreTemplateVersion(string templateId, RestoreVersionData data, int operationIndex = 0);

        /// <summary>
        /// Restore a template version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessErrorResponse</returns>
        ApiResponse<SuccessErrorResponse> RestoreTemplateVersionWithHttpInfo(string templateId, RestoreVersionData data, int operationIndex = 0);
        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessErrorResponse</returns>
        SuccessErrorResponse TestAuthentication(int operationIndex = 0);

        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessErrorResponse</returns>
        ApiResponse<SuccessErrorResponse> TestAuthenticationWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update a submission data request
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionDataRequestResponse</returns>
        CreateSubmissionDataRequestResponse UpdateDataRequest(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0);

        /// <summary>
        /// Update a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionDataRequestResponse</returns>
        ApiResponse<CreateSubmissionDataRequestResponse> UpdateDataRequestWithHttpInfo(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0);
        /// <summary>
        /// Update a Template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessMultipleErrorsResponse</returns>
        SuccessMultipleErrorsResponse UpdateTemplate(string templateId, UpdateHtmlTemplate data, int operationIndex = 0);

        /// <summary>
        /// Update a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessMultipleErrorsResponse</returns>
        ApiResponse<SuccessMultipleErrorsResponse> UpdateTemplateWithHttpInfo(string templateId, UpdateHtmlTemplate data, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPDFApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add new fields to a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateAddFieldsResponse</returns>
        System.Threading.Tasks.Task<TemplateAddFieldsResponse> AddFieldsToTemplateAsync(string templateId, AddFieldsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add new fields to a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateAddFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateAddFieldsResponse>> AddFieldsToTemplateWithHttpInfoAsync(string templateId, AddFieldsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for submission batch to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchGeneratePdfs201Response</returns>
        System.Threading.Tasks.Task<BatchGeneratePdfs201Response> BatchGeneratePdfsAsync(SubmissionBatchData data, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for submission batch to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchGeneratePdfs201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchGeneratePdfs201Response>> BatchGeneratePdfsWithHttpInfoAsync(SubmissionBatchData data, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombinePdfsAsync(CombinePdfsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCombinedSubmissionResponse>> CombinePdfsWithHttpInfoAsync(CombinePdfsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for combined submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombineSubmissionsAsync(CombinedSubmissionData data, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for combined submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCombinedSubmissionResponse>> CombineSubmissionsWithHttpInfoAsync(CombinedSubmissionData data, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Copy a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePreview</returns>
        System.Threading.Tasks.Task<TemplatePreview> CopyTemplateAsync(string templateId, CopyTemplateOptions options = default(CopyTemplateOptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Copy a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatePreview>> CopyTemplateWithHttpInfoAsync(string templateId, CopyTemplateOptions options = default(CopyTemplateOptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new custom file from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCustomFileResponse</returns>
        System.Threading.Tasks.Task<CreateCustomFileResponse> CreateCustomFileFromUploadAsync(CreateCustomFileData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new custom file from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCustomFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCustomFileResponse>> CreateCustomFileFromUploadWithHttpInfoAsync(CreateCustomFileData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new event for emailing a signee a request for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionDataRequestEventResponse</returns>
        System.Threading.Tasks.Task<CreateSubmissionDataRequestEventResponse> CreateDataRequestEventAsync(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new event for emailing a signee a request for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionDataRequestEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubmissionDataRequestEventResponse>> CreateDataRequestEventWithHttpInfoAsync(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new data request token for form authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionDataRequestTokenResponse</returns>
        System.Threading.Tasks.Task<CreateSubmissionDataRequestTokenResponse> CreateDataRequestTokenAsync(string dataRequestId, string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new data request token for form authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionDataRequestTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubmissionDataRequestTokenResponse>> CreateDataRequestTokenWithHttpInfoAsync(string dataRequestId, string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> CreateFolderAsync(CreateFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> CreateFolderWithHttpInfoAsync(CreateFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new HTML template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePreview</returns>
        System.Threading.Tasks.Task<TemplatePreview> CreateHTMLTemplateAsync(CreateHtmlTemplate data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new HTML template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatePreview>> CreateHTMLTemplateWithHttpInfoAsync(CreateHtmlTemplate data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new PDF template with a form POST file upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="wait">Wait for template document to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="templateDescription"> (optional)</param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePreview</returns>
        System.Threading.Tasks.Task<TemplatePreview> CreatePDFTemplateAsync(System.IO.Stream templateDocument, string templateName, bool? wait = default(bool?), string templateDescription = default(string), string templateParentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new PDF template with a form POST file upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="wait">Wait for template document to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="templateDescription"> (optional)</param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatePreview>> CreatePDFTemplateWithHttpInfoAsync(System.IO.Stream templateDocument, string templateName, bool? wait = default(bool?), string templateDescription = default(string), string templateParentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new PDF template from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePreview</returns>
        System.Threading.Tasks.Task<TemplatePreview> CreatePDFTemplateFromUploadAsync(CreatePdfTemplate data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new PDF template from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatePreview>> CreatePDFTemplateFromUploadWithHttpInfoAsync(CreatePdfTemplate data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> DeleteFolderAsync(string folderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> DeleteFolderWithHttpInfoAsync(string folderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateDeleteResponse</returns>
        System.Threading.Tasks.Task<TemplateDeleteResponse> DeleteTemplateAsync(string templateId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateDeleteResponse>> DeleteTemplateWithHttpInfoAsync(string templateId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CombinedSubmission</returns>
        System.Threading.Tasks.Task<CombinedSubmission> ExpireCombinedSubmissionAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        System.Threading.Tasks.Task<ApiResponse<CombinedSubmission>> ExpireCombinedSubmissionWithHttpInfoAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmissionPreview</returns>
        System.Threading.Tasks.Task<SubmissionPreview> ExpireSubmissionAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmissionPreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmissionPreview>> ExpireSubmissionWithHttpInfoAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionResponse</returns>
        System.Threading.Tasks.Task<CreateSubmissionResponse> GeneratePdfAsync(string templateId, CreatePdfSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubmissionResponse>> GeneratePdfWithHttpInfoAsync(string templateId, CreatePdfSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Generates a new PDF for an HTML template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionResponse</returns>
        System.Threading.Tasks.Task<CreateSubmissionResponse> GeneratePdfForHtmlTemplateAsync(string templateId, CreateHtmlSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Generates a new PDF for an HTML template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubmissionResponse>> GeneratePdfForHtmlTemplateWithHttpInfoAsync(string templateId, CreateHtmlSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Generated a preview PDF for partially completed data requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessErrorResponse</returns>
        System.Threading.Tasks.Task<SuccessErrorResponse> GeneratePreviewAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Generated a preview PDF for partially completed data requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessErrorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessErrorResponse>> GeneratePreviewWithHttpInfoAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CombinedSubmission</returns>
        System.Threading.Tasks.Task<CombinedSubmission> GetCombinedSubmissionAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        System.Threading.Tasks.Task<ApiResponse<CombinedSubmission>> GetCombinedSubmissionWithHttpInfoAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Look up a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmissionDataRequestShow</returns>
        System.Threading.Tasks.Task<SubmissionDataRequestShow> GetDataRequestAsync(string dataRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Look up a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmissionDataRequestShow)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmissionDataRequestShow>> GetDataRequestWithHttpInfoAsync(string dataRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetch the full attributes for a PDF template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> GetFullTemplateAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetch the full attributes for a PDF template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> GetFullTemplateWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadPresignResponse</returns>
        System.Threading.Tasks.Task<UploadPresignResponse> GetPresignUrlAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadPresignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadPresignResponse>> GetPresignUrlWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Submission</returns>
        System.Threading.Tasks.Task<Submission> GetSubmissionAsync(string submissionId, bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submission>> GetSubmissionWithHttpInfoAsync(string submissionId, bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Check the status of a submission batch job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmissionBatchWithSubmissions</returns>
        System.Threading.Tasks.Task<SubmissionBatchWithSubmissions> GetSubmissionBatchAsync(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Check the status of a submission batch job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmissionBatchWithSubmissions)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmissionBatchWithSubmissions>> GetSubmissionBatchWithHttpInfoAsync(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Check the status of an uploaded template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePreview</returns>
        System.Threading.Tasks.Task<TemplatePreview> GetTemplateAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Check the status of an uploaded template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatePreview>> GetTemplateWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetch the JSON schema for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonSchema</returns>
        System.Threading.Tasks.Task<JsonSchema> GetTemplateSchemaAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetch the JSON schema for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSchema>> GetTemplateSchemaWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of all combined submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CombinedSubmission&gt;</returns>
        System.Threading.Tasks.Task<List<CombinedSubmission>> ListCombinedSubmissionsAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of all combined submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CombinedSubmission&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CombinedSubmission>>> ListCombinedSubmissionsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Folder&gt;</returns>
        System.Threading.Tasks.Task<List<Folder>> ListFoldersAsync(string parentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Folder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Folder>>> ListFoldersWithHttpInfoAsync(string parentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubmissionsResponse</returns>
        System.Threading.Tasks.Task<ListSubmissionsResponse> ListSubmissionsAsync(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubmissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSubmissionsResponse>> ListSubmissionsWithHttpInfoAsync(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all submissions for a given template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubmissionsResponse</returns>
        System.Threading.Tasks.Task<ListSubmissionsResponse> ListTemplateSubmissionsAsync(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all submissions for a given template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubmissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSubmissionsResponse>> ListTemplateSubmissionsWithHttpInfoAsync(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TemplatePreview&gt;</returns>
        System.Threading.Tasks.Task<List<TemplatePreview>> ListTemplatesAsync(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TemplatePreview&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TemplatePreview>>> ListTemplatesWithHttpInfoAsync(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Move a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> MoveFolderToFolderAsync(string folderId, MoveFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Move a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> MoveFolderToFolderWithHttpInfoAsync(string folderId, MoveFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Move Template to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePreview</returns>
        System.Threading.Tasks.Task<TemplatePreview> MoveTemplateToFolderAsync(string templateId, MoveTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Move Template to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatePreview>> MoveTemplateToFolderWithHttpInfoAsync(string templateId, MoveTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Publish a template version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePublishVersionResponse</returns>
        System.Threading.Tasks.Task<TemplatePublishVersionResponse> PublishTemplateVersionAsync(string templateId, PublishVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Publish a template version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePublishVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatePublishVersionResponse>> PublishTemplateVersionWithHttpInfoAsync(string templateId, PublishVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> RenameFolderAsync(string folderId, RenameFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> RenameFolderWithHttpInfoAsync(string folderId, RenameFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Restore a template version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessErrorResponse</returns>
        System.Threading.Tasks.Task<SuccessErrorResponse> RestoreTemplateVersionAsync(string templateId, RestoreVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Restore a template version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessErrorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessErrorResponse>> RestoreTemplateVersionWithHttpInfoAsync(string templateId, RestoreVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessErrorResponse</returns>
        System.Threading.Tasks.Task<SuccessErrorResponse> TestAuthenticationAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessErrorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessErrorResponse>> TestAuthenticationWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionDataRequestResponse</returns>
        System.Threading.Tasks.Task<CreateSubmissionDataRequestResponse> UpdateDataRequestAsync(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionDataRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubmissionDataRequestResponse>> UpdateDataRequestWithHttpInfoAsync(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessMultipleErrorsResponse</returns>
        System.Threading.Tasks.Task<SuccessMultipleErrorsResponse> UpdateTemplateAsync(string templateId, UpdateHtmlTemplate data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessMultipleErrorsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessMultipleErrorsResponse>> UpdateTemplateWithHttpInfoAsync(string templateId, UpdateHtmlTemplate data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPDFApi : IPDFApiSync, IPDFApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PDFApi : IPDFApi
    {
        private DocSpring.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PDFApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PDFApi(string basePath)
        {
            this.Configuration = DocSpring.Client.Client.Configuration.MergeConfigurations(
                DocSpring.Client.Client.GlobalConfiguration.Instance,
                new DocSpring.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DocSpring.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DocSpring.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DocSpring.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PDFApi(DocSpring.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DocSpring.Client.Client.Configuration.MergeConfigurations(
                DocSpring.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DocSpring.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DocSpring.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DocSpring.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PDFApi(DocSpring.Client.Client.ISynchronousClient client, DocSpring.Client.Client.IAsynchronousClient asyncClient, DocSpring.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DocSpring.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DocSpring.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DocSpring.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DocSpring.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocSpring.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add new fields to a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateAddFieldsResponse</returns>
        public TemplateAddFieldsResponse AddFieldsToTemplate(string templateId, AddFieldsData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<TemplateAddFieldsResponse> localVarResponse = AddFieldsToTemplateWithHttpInfo(templateId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new fields to a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateAddFieldsResponse</returns>
        public DocSpring.Client.Client.ApiResponse<TemplateAddFieldsResponse> AddFieldsToTemplateWithHttpInfo(string templateId, AddFieldsData data, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->AddFieldsToTemplate");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->AddFieldsToTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.AddFieldsToTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TemplateAddFieldsResponse>("/templates/{template_id}/add_fields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFieldsToTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new fields to a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateAddFieldsResponse</returns>
        public async System.Threading.Tasks.Task<TemplateAddFieldsResponse> AddFieldsToTemplateAsync(string templateId, AddFieldsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<TemplateAddFieldsResponse> localVarResponse = await AddFieldsToTemplateWithHttpInfoAsync(templateId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new fields to a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateAddFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<TemplateAddFieldsResponse>> AddFieldsToTemplateWithHttpInfoAsync(string templateId, AddFieldsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->AddFieldsToTemplate");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->AddFieldsToTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.AddFieldsToTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TemplateAddFieldsResponse>("/templates/{template_id}/add_fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFieldsToTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for submission batch to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchGeneratePdfs201Response</returns>
        public BatchGeneratePdfs201Response BatchGeneratePdfs(SubmissionBatchData data, bool? wait = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<BatchGeneratePdfs201Response> localVarResponse = BatchGeneratePdfsWithHttpInfo(data, wait);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for submission batch to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchGeneratePdfs201Response</returns>
        public DocSpring.Client.Client.ApiResponse<BatchGeneratePdfs201Response> BatchGeneratePdfsWithHttpInfo(SubmissionBatchData data, bool? wait = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->BatchGeneratePdfs");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.BatchGeneratePdfs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchGeneratePdfs201Response>("/submissions/batches", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGeneratePdfs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for submission batch to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchGeneratePdfs201Response</returns>
        public async System.Threading.Tasks.Task<BatchGeneratePdfs201Response> BatchGeneratePdfsAsync(SubmissionBatchData data, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<BatchGeneratePdfs201Response> localVarResponse = await BatchGeneratePdfsWithHttpInfoAsync(data, wait, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for submission batch to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchGeneratePdfs201Response)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<BatchGeneratePdfs201Response>> BatchGeneratePdfsWithHttpInfoAsync(SubmissionBatchData data, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->BatchGeneratePdfs");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.BatchGeneratePdfs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchGeneratePdfs201Response>("/submissions/batches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGeneratePdfs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        public CreateCombinedSubmissionResponse CombinePdfs(CombinePdfsData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = CombinePdfsWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse> CombinePdfsWithHttpInfo(CombinePdfsData data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CombinePdfs");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CombinePdfs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCombinedSubmissionResponse>("/combined_submissions?v=2", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CombinePdfs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombinePdfsAsync(CombinePdfsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = await CombinePdfsWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse>> CombinePdfsWithHttpInfoAsync(CombinePdfsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CombinePdfs");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CombinePdfs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCombinedSubmissionResponse>("/combined_submissions?v=2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CombinePdfs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for combined submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        public CreateCombinedSubmissionResponse CombineSubmissions(CombinedSubmissionData data, bool? wait = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = CombineSubmissionsWithHttpInfo(data, wait);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for combined submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse> CombineSubmissionsWithHttpInfo(CombinedSubmissionData data, bool? wait = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CombineSubmissions");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CombineSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCombinedSubmissionResponse>("/combined_submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CombineSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for combined submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombineSubmissionsAsync(CombinedSubmissionData data, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = await CombineSubmissionsWithHttpInfoAsync(data, wait, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="wait">Wait for combined submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse>> CombineSubmissionsWithHttpInfoAsync(CombinedSubmissionData data, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CombineSubmissions");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CombineSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCombinedSubmissionResponse>("/combined_submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CombineSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePreview</returns>
        public TemplatePreview CopyTemplate(string templateId, CopyTemplateOptions options = default(CopyTemplateOptions), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<TemplatePreview> localVarResponse = CopyTemplateWithHttpInfo(templateId, options);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePreview</returns>
        public DocSpring.Client.Client.ApiResponse<TemplatePreview> CopyTemplateWithHttpInfo(string templateId, CopyTemplateOptions options = default(CopyTemplateOptions), int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->CopyTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = options;

            localVarRequestOptions.Operation = "PDFApi.CopyTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TemplatePreview>("/templates/{template_id}/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePreview</returns>
        public async System.Threading.Tasks.Task<TemplatePreview> CopyTemplateAsync(string templateId, CopyTemplateOptions options = default(CopyTemplateOptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<TemplatePreview> localVarResponse = await CopyTemplateWithHttpInfoAsync(templateId, options, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="options"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePreview)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<TemplatePreview>> CopyTemplateWithHttpInfoAsync(string templateId, CopyTemplateOptions options = default(CopyTemplateOptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->CopyTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = options;

            localVarRequestOptions.Operation = "PDFApi.CopyTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TemplatePreview>("/templates/{template_id}/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new custom file from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCustomFileResponse</returns>
        public CreateCustomFileResponse CreateCustomFileFromUpload(CreateCustomFileData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateCustomFileResponse> localVarResponse = CreateCustomFileFromUploadWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new custom file from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCustomFileResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateCustomFileResponse> CreateCustomFileFromUploadWithHttpInfo(CreateCustomFileData data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreateCustomFileFromUpload");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreateCustomFileFromUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCustomFileResponse>("/custom_files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomFileFromUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new custom file from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCustomFileResponse</returns>
        public async System.Threading.Tasks.Task<CreateCustomFileResponse> CreateCustomFileFromUploadAsync(CreateCustomFileData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateCustomFileResponse> localVarResponse = await CreateCustomFileFromUploadWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new custom file from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCustomFileResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateCustomFileResponse>> CreateCustomFileFromUploadWithHttpInfoAsync(CreateCustomFileData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreateCustomFileFromUpload");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreateCustomFileFromUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCustomFileResponse>("/custom_files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomFileFromUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new event for emailing a signee a request for signature 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionDataRequestEventResponse</returns>
        public CreateSubmissionDataRequestEventResponse CreateDataRequestEvent(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestEventResponse> localVarResponse = CreateDataRequestEventWithHttpInfo(dataRequestId, varEvent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new event for emailing a signee a request for signature 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionDataRequestEventResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestEventResponse> CreateDataRequestEventWithHttpInfo(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->CreateDataRequestEvent");
            }

            // verify the required parameter 'varEvent' is set
            if (varEvent == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'varEvent' when calling PDFApi->CreateDataRequestEvent");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter
            localVarRequestOptions.Data = varEvent;

            localVarRequestOptions.Operation = "PDFApi.CreateDataRequestEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSubmissionDataRequestEventResponse>("/data_requests/{data_request_id}/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataRequestEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new event for emailing a signee a request for signature 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionDataRequestEventResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubmissionDataRequestEventResponse> CreateDataRequestEventAsync(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestEventResponse> localVarResponse = await CreateDataRequestEventWithHttpInfoAsync(dataRequestId, varEvent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new event for emailing a signee a request for signature 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionDataRequestEventResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestEventResponse>> CreateDataRequestEventWithHttpInfoAsync(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->CreateDataRequestEvent");
            }

            // verify the required parameter 'varEvent' is set
            if (varEvent == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'varEvent' when calling PDFApi->CreateDataRequestEvent");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter
            localVarRequestOptions.Data = varEvent;

            localVarRequestOptions.Operation = "PDFApi.CreateDataRequestEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSubmissionDataRequestEventResponse>("/data_requests/{data_request_id}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataRequestEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new data request token for form authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionDataRequestTokenResponse</returns>
        public CreateSubmissionDataRequestTokenResponse CreateDataRequestToken(string dataRequestId, string type = default(string), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestTokenResponse> localVarResponse = CreateDataRequestTokenWithHttpInfo(dataRequestId, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new data request token for form authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionDataRequestTokenResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestTokenResponse> CreateDataRequestTokenWithHttpInfo(string dataRequestId, string type = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->CreateDataRequestToken");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "PDFApi.CreateDataRequestToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSubmissionDataRequestTokenResponse>("/data_requests/{data_request_id}/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataRequestToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new data request token for form authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionDataRequestTokenResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubmissionDataRequestTokenResponse> CreateDataRequestTokenAsync(string dataRequestId, string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestTokenResponse> localVarResponse = await CreateDataRequestTokenWithHttpInfoAsync(dataRequestId, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new data request token for form authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionDataRequestTokenResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestTokenResponse>> CreateDataRequestTokenWithHttpInfoAsync(string dataRequestId, string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->CreateDataRequestToken");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "PDFApi.CreateDataRequestToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSubmissionDataRequestTokenResponse>("/data_requests/{data_request_id}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataRequestToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        public Folder CreateFolder(CreateFolderData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = CreateFolderWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        public DocSpring.Client.Client.ApiResponse<Folder> CreateFolderWithHttpInfo(CreateFolderData data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreateFolder");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreateFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Folder>("/folders/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> CreateFolderAsync(CreateFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = await CreateFolderWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Folder>> CreateFolderWithHttpInfoAsync(CreateFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreateFolder");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreateFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Folder>("/folders/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePreview</returns>
        public TemplatePreview CreateHTMLTemplate(CreateHtmlTemplate data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<TemplatePreview> localVarResponse = CreateHTMLTemplateWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePreview</returns>
        public DocSpring.Client.Client.ApiResponse<TemplatePreview> CreateHTMLTemplateWithHttpInfo(CreateHtmlTemplate data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreateHTMLTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreateHTMLTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TemplatePreview>("/templates?endpoint_description=html", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateHTMLTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePreview</returns>
        public async System.Threading.Tasks.Task<TemplatePreview> CreateHTMLTemplateAsync(CreateHtmlTemplate data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<TemplatePreview> localVarResponse = await CreateHTMLTemplateWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePreview)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<TemplatePreview>> CreateHTMLTemplateWithHttpInfoAsync(CreateHtmlTemplate data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreateHTMLTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreateHTMLTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TemplatePreview>("/templates?endpoint_description=html", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateHTMLTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new PDF template with a form POST file upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="wait">Wait for template document to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="templateDescription"> (optional)</param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePreview</returns>
        public TemplatePreview CreatePDFTemplate(System.IO.Stream templateDocument, string templateName, bool? wait = default(bool?), string templateDescription = default(string), string templateParentFolderId = default(string), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<TemplatePreview> localVarResponse = CreatePDFTemplateWithHttpInfo(templateDocument, templateName, wait, templateDescription, templateParentFolderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new PDF template with a form POST file upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="wait">Wait for template document to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="templateDescription"> (optional)</param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePreview</returns>
        public DocSpring.Client.Client.ApiResponse<TemplatePreview> CreatePDFTemplateWithHttpInfo(System.IO.Stream templateDocument, string templateName, bool? wait = default(bool?), string templateDescription = default(string), string templateParentFolderId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'templateDocument' is set
            if (templateDocument == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateDocument' when calling PDFApi->CreatePDFTemplate");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateName' when calling PDFApi->CreatePDFTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            localVarRequestOptions.FileParameters.Add("template[document]", templateDocument);
            localVarRequestOptions.FormParameters.Add("template[name]", DocSpring.Client.Client.ClientUtils.ParameterToString(templateName)); // form parameter
            if (templateDescription != null)
            {
                localVarRequestOptions.FormParameters.Add("template[description]", DocSpring.Client.Client.ClientUtils.ParameterToString(templateDescription)); // form parameter
            }
            if (templateParentFolderId != null)
            {
                localVarRequestOptions.FormParameters.Add("template[parent_folder_id]", DocSpring.Client.Client.ClientUtils.ParameterToString(templateParentFolderId)); // form parameter
            }

            localVarRequestOptions.Operation = "PDFApi.CreatePDFTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TemplatePreview>("/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePDFTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new PDF template with a form POST file upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="wait">Wait for template document to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="templateDescription"> (optional)</param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePreview</returns>
        public async System.Threading.Tasks.Task<TemplatePreview> CreatePDFTemplateAsync(System.IO.Stream templateDocument, string templateName, bool? wait = default(bool?), string templateDescription = default(string), string templateParentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<TemplatePreview> localVarResponse = await CreatePDFTemplateWithHttpInfoAsync(templateDocument, templateName, wait, templateDescription, templateParentFolderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new PDF template with a form POST file upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="wait">Wait for template document to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="templateDescription"> (optional)</param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePreview)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<TemplatePreview>> CreatePDFTemplateWithHttpInfoAsync(System.IO.Stream templateDocument, string templateName, bool? wait = default(bool?), string templateDescription = default(string), string templateParentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateDocument' is set
            if (templateDocument == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateDocument' when calling PDFApi->CreatePDFTemplate");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateName' when calling PDFApi->CreatePDFTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            localVarRequestOptions.FileParameters.Add("template[document]", templateDocument);
            localVarRequestOptions.FormParameters.Add("template[name]", DocSpring.Client.Client.ClientUtils.ParameterToString(templateName)); // form parameter
            if (templateDescription != null)
            {
                localVarRequestOptions.FormParameters.Add("template[description]", DocSpring.Client.Client.ClientUtils.ParameterToString(templateDescription)); // form parameter
            }
            if (templateParentFolderId != null)
            {
                localVarRequestOptions.FormParameters.Add("template[parent_folder_id]", DocSpring.Client.Client.ClientUtils.ParameterToString(templateParentFolderId)); // form parameter
            }

            localVarRequestOptions.Operation = "PDFApi.CreatePDFTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TemplatePreview>("/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePDFTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new PDF template from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePreview</returns>
        public TemplatePreview CreatePDFTemplateFromUpload(CreatePdfTemplate data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<TemplatePreview> localVarResponse = CreatePDFTemplateFromUploadWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new PDF template from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePreview</returns>
        public DocSpring.Client.Client.ApiResponse<TemplatePreview> CreatePDFTemplateFromUploadWithHttpInfo(CreatePdfTemplate data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreatePDFTemplateFromUpload");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreatePDFTemplateFromUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TemplatePreview>("/templates?endpoint_description=cached_upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePDFTemplateFromUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new PDF template from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePreview</returns>
        public async System.Threading.Tasks.Task<TemplatePreview> CreatePDFTemplateFromUploadAsync(CreatePdfTemplate data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<TemplatePreview> localVarResponse = await CreatePDFTemplateFromUploadWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new PDF template from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePreview)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<TemplatePreview>> CreatePDFTemplateFromUploadWithHttpInfoAsync(CreatePdfTemplate data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreatePDFTemplateFromUpload");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreatePDFTemplateFromUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TemplatePreview>("/templates?endpoint_description=cached_upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePDFTemplateFromUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        public Folder DeleteFolder(string folderId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = DeleteFolderWithHttpInfo(folderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        public DocSpring.Client.Client.ApiResponse<Folder> DeleteFolderWithHttpInfo(string folderId, int operationIndex = 0)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->DeleteFolder");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("folder_id", DocSpring.Client.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.DeleteFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Folder>("/folders/{folder_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> DeleteFolderAsync(string folderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = await DeleteFolderWithHttpInfoAsync(folderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Folder>> DeleteFolderWithHttpInfoAsync(string folderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->DeleteFolder");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("folder_id", DocSpring.Client.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.DeleteFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Folder>("/folders/{folder_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateDeleteResponse</returns>
        public TemplateDeleteResponse DeleteTemplate(string templateId, string version = default(string), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<TemplateDeleteResponse> localVarResponse = DeleteTemplateWithHttpInfo(templateId, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateDeleteResponse</returns>
        public DocSpring.Client.Client.ApiResponse<TemplateDeleteResponse> DeleteTemplateWithHttpInfo(string templateId, string version = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->DeleteTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }

            localVarRequestOptions.Operation = "PDFApi.DeleteTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<TemplateDeleteResponse>("/templates/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateDeleteResponse</returns>
        public async System.Threading.Tasks.Task<TemplateDeleteResponse> DeleteTemplateAsync(string templateId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<TemplateDeleteResponse> localVarResponse = await DeleteTemplateWithHttpInfoAsync(templateId, version, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<TemplateDeleteResponse>> DeleteTemplateWithHttpInfoAsync(string templateId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->DeleteTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }

            localVarRequestOptions.Operation = "PDFApi.DeleteTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<TemplateDeleteResponse>("/templates/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CombinedSubmission</returns>
        public CombinedSubmission ExpireCombinedSubmission(string combinedSubmissionId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CombinedSubmission> localVarResponse = ExpireCombinedSubmissionWithHttpInfo(combinedSubmissionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        public DocSpring.Client.Client.ApiResponse<CombinedSubmission> ExpireCombinedSubmissionWithHttpInfo(string combinedSubmissionId, int operationIndex = 0)
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->ExpireCombinedSubmission");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("combined_submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(combinedSubmissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.ExpireCombinedSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CombinedSubmission>("/combined_submissions/{combined_submission_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExpireCombinedSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CombinedSubmission</returns>
        public async System.Threading.Tasks.Task<CombinedSubmission> ExpireCombinedSubmissionAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CombinedSubmission> localVarResponse = await ExpireCombinedSubmissionWithHttpInfoAsync(combinedSubmissionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CombinedSubmission>> ExpireCombinedSubmissionWithHttpInfoAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->ExpireCombinedSubmission");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("combined_submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(combinedSubmissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.ExpireCombinedSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CombinedSubmission>("/combined_submissions/{combined_submission_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExpireCombinedSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmissionPreview</returns>
        public SubmissionPreview ExpireSubmission(string submissionId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<SubmissionPreview> localVarResponse = ExpireSubmissionWithHttpInfo(submissionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmissionPreview</returns>
        public DocSpring.Client.Client.ApiResponse<SubmissionPreview> ExpireSubmissionWithHttpInfo(string submissionId, int operationIndex = 0)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->ExpireSubmission");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.ExpireSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SubmissionPreview>("/submissions/{submission_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExpireSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmissionPreview</returns>
        public async System.Threading.Tasks.Task<SubmissionPreview> ExpireSubmissionAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<SubmissionPreview> localVarResponse = await ExpireSubmissionWithHttpInfoAsync(submissionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmissionPreview)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<SubmissionPreview>> ExpireSubmissionWithHttpInfoAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->ExpireSubmission");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.ExpireSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SubmissionPreview>("/submissions/{submission_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExpireSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionResponse</returns>
        public CreateSubmissionResponse GeneratePdf(string templateId, CreatePdfSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionResponse> localVarResponse = GeneratePdfWithHttpInfo(templateId, submission, wait);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateSubmissionResponse> GeneratePdfWithHttpInfo(string templateId, CreatePdfSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GeneratePdf");
            }

            // verify the required parameter 'submission' is set
            if (submission == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submission' when calling PDFApi->GeneratePdf");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            localVarRequestOptions.Data = submission;

            localVarRequestOptions.Operation = "PDFApi.GeneratePdf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSubmissionResponse>("/templates/{template_id}/submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubmissionResponse> GeneratePdfAsync(string templateId, CreatePdfSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionResponse> localVarResponse = await GeneratePdfWithHttpInfoAsync(templateId, submission, wait, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateSubmissionResponse>> GeneratePdfWithHttpInfoAsync(string templateId, CreatePdfSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GeneratePdf");
            }

            // verify the required parameter 'submission' is set
            if (submission == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submission' when calling PDFApi->GeneratePdf");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            localVarRequestOptions.Data = submission;

            localVarRequestOptions.Operation = "PDFApi.GeneratePdf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSubmissionResponse>("/templates/{template_id}/submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates a new PDF for an HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionResponse</returns>
        public CreateSubmissionResponse GeneratePdfForHtmlTemplate(string templateId, CreateHtmlSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionResponse> localVarResponse = GeneratePdfForHtmlTemplateWithHttpInfo(templateId, submission, wait);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a new PDF for an HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateSubmissionResponse> GeneratePdfForHtmlTemplateWithHttpInfo(string templateId, CreateHtmlSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GeneratePdfForHtmlTemplate");
            }

            // verify the required parameter 'submission' is set
            if (submission == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submission' when calling PDFApi->GeneratePdfForHtmlTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            localVarRequestOptions.Data = submission;

            localVarRequestOptions.Operation = "PDFApi.GeneratePdfForHtmlTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSubmissionResponse>("/templates/{template_id}/submissions?endpoint_description=html_templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePdfForHtmlTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates a new PDF for an HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubmissionResponse> GeneratePdfForHtmlTemplateAsync(string templateId, CreateHtmlSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionResponse> localVarResponse = await GeneratePdfForHtmlTemplateWithHttpInfoAsync(templateId, submission, wait, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a new PDF for an HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="wait">Wait for submission to be processed before returning. Set to false to return immediately. Default: true (on sync.* subdomain) (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateSubmissionResponse>> GeneratePdfForHtmlTemplateWithHttpInfoAsync(string templateId, CreateHtmlSubmissionData submission, bool? wait = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GeneratePdfForHtmlTemplate");
            }

            // verify the required parameter 'submission' is set
            if (submission == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submission' when calling PDFApi->GeneratePdfForHtmlTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            localVarRequestOptions.Data = submission;

            localVarRequestOptions.Operation = "PDFApi.GeneratePdfForHtmlTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSubmissionResponse>("/templates/{template_id}/submissions?endpoint_description=html_templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePdfForHtmlTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generated a preview PDF for partially completed data requests 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessErrorResponse</returns>
        public SuccessErrorResponse GeneratePreview(string submissionId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<SuccessErrorResponse> localVarResponse = GeneratePreviewWithHttpInfo(submissionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generated a preview PDF for partially completed data requests 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessErrorResponse</returns>
        public DocSpring.Client.Client.ApiResponse<SuccessErrorResponse> GeneratePreviewWithHttpInfo(string submissionId, int operationIndex = 0)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->GeneratePreview");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GeneratePreview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SuccessErrorResponse>("/submissions/{submission_id}/generate_preview", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generated a preview PDF for partially completed data requests 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessErrorResponse</returns>
        public async System.Threading.Tasks.Task<SuccessErrorResponse> GeneratePreviewAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<SuccessErrorResponse> localVarResponse = await GeneratePreviewWithHttpInfoAsync(submissionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generated a preview PDF for partially completed data requests 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessErrorResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<SuccessErrorResponse>> GeneratePreviewWithHttpInfoAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->GeneratePreview");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GeneratePreview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SuccessErrorResponse>("/submissions/{submission_id}/generate_preview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CombinedSubmission</returns>
        public CombinedSubmission GetCombinedSubmission(string combinedSubmissionId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CombinedSubmission> localVarResponse = GetCombinedSubmissionWithHttpInfo(combinedSubmissionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        public DocSpring.Client.Client.ApiResponse<CombinedSubmission> GetCombinedSubmissionWithHttpInfo(string combinedSubmissionId, int operationIndex = 0)
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->GetCombinedSubmission");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("combined_submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(combinedSubmissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetCombinedSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CombinedSubmission>("/combined_submissions/{combined_submission_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCombinedSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CombinedSubmission</returns>
        public async System.Threading.Tasks.Task<CombinedSubmission> GetCombinedSubmissionAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CombinedSubmission> localVarResponse = await GetCombinedSubmissionWithHttpInfoAsync(combinedSubmissionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CombinedSubmission>> GetCombinedSubmissionWithHttpInfoAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->GetCombinedSubmission");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("combined_submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(combinedSubmissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetCombinedSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CombinedSubmission>("/combined_submissions/{combined_submission_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCombinedSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Look up a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmissionDataRequestShow</returns>
        public SubmissionDataRequestShow GetDataRequest(string dataRequestId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<SubmissionDataRequestShow> localVarResponse = GetDataRequestWithHttpInfo(dataRequestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Look up a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmissionDataRequestShow</returns>
        public DocSpring.Client.Client.ApiResponse<SubmissionDataRequestShow> GetDataRequestWithHttpInfo(string dataRequestId, int operationIndex = 0)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->GetDataRequest");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubmissionDataRequestShow>("/data_requests/{data_request_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Look up a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmissionDataRequestShow</returns>
        public async System.Threading.Tasks.Task<SubmissionDataRequestShow> GetDataRequestAsync(string dataRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<SubmissionDataRequestShow> localVarResponse = await GetDataRequestWithHttpInfoAsync(dataRequestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Look up a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmissionDataRequestShow)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<SubmissionDataRequestShow>> GetDataRequestWithHttpInfoAsync(string dataRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->GetDataRequest");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubmissionDataRequestShow>("/data_requests/{data_request_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the full attributes for a PDF template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Template</returns>
        public Template GetFullTemplate(string templateId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Template> localVarResponse = GetFullTemplateWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the full attributes for a PDF template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Template</returns>
        public DocSpring.Client.Client.ApiResponse<Template> GetFullTemplateWithHttpInfo(string templateId, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetFullTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetFullTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Template>("/templates/{template_id}?full=true", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the full attributes for a PDF template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> GetFullTemplateAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Template> localVarResponse = await GetFullTemplateWithHttpInfoAsync(templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the full attributes for a PDF template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Template>> GetFullTemplateWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetFullTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetFullTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Template>("/templates/{template_id}?full=true", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadPresignResponse</returns>
        public UploadPresignResponse GetPresignUrl(int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<UploadPresignResponse> localVarResponse = GetPresignUrlWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadPresignResponse</returns>
        public DocSpring.Client.Client.ApiResponse<UploadPresignResponse> GetPresignUrlWithHttpInfo(int operationIndex = 0)
        {
            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PDFApi.GetPresignUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UploadPresignResponse>("/uploads/presign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPresignUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadPresignResponse</returns>
        public async System.Threading.Tasks.Task<UploadPresignResponse> GetPresignUrlAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<UploadPresignResponse> localVarResponse = await GetPresignUrlWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadPresignResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<UploadPresignResponse>> GetPresignUrlWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PDFApi.GetPresignUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UploadPresignResponse>("/uploads/presign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPresignUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Submission</returns>
        public Submission GetSubmission(string submissionId, bool? includeData = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Submission> localVarResponse = GetSubmissionWithHttpInfo(submissionId, includeData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Submission</returns>
        public DocSpring.Client.Client.ApiResponse<Submission> GetSubmissionWithHttpInfo(string submissionId, bool? includeData = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->GetSubmission");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionId)); // path parameter
            if (includeData != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_data", includeData));
            }

            localVarRequestOptions.Operation = "PDFApi.GetSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Submission>("/submissions/{submission_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Submission</returns>
        public async System.Threading.Tasks.Task<Submission> GetSubmissionAsync(string submissionId, bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Submission> localVarResponse = await GetSubmissionWithHttpInfoAsync(submissionId, includeData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Submission>> GetSubmissionWithHttpInfoAsync(string submissionId, bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->GetSubmission");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionId)); // path parameter
            if (includeData != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_data", includeData));
            }

            localVarRequestOptions.Operation = "PDFApi.GetSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Submission>("/submissions/{submission_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of a submission batch job 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmissionBatchWithSubmissions</returns>
        public SubmissionBatchWithSubmissions GetSubmissionBatch(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<SubmissionBatchWithSubmissions> localVarResponse = GetSubmissionBatchWithHttpInfo(submissionBatchId, includeSubmissions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a submission batch job 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmissionBatchWithSubmissions</returns>
        public DocSpring.Client.Client.ApiResponse<SubmissionBatchWithSubmissions> GetSubmissionBatchWithHttpInfo(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'submissionBatchId' is set
            if (submissionBatchId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionBatchId' when calling PDFApi->GetSubmissionBatch");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_batch_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionBatchId)); // path parameter
            if (includeSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_submissions", includeSubmissions));
            }

            localVarRequestOptions.Operation = "PDFApi.GetSubmissionBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubmissionBatchWithSubmissions>("/submissions/batches/{submission_batch_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubmissionBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of a submission batch job 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmissionBatchWithSubmissions</returns>
        public async System.Threading.Tasks.Task<SubmissionBatchWithSubmissions> GetSubmissionBatchAsync(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<SubmissionBatchWithSubmissions> localVarResponse = await GetSubmissionBatchWithHttpInfoAsync(submissionBatchId, includeSubmissions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a submission batch job 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmissionBatchWithSubmissions)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<SubmissionBatchWithSubmissions>> GetSubmissionBatchWithHttpInfoAsync(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'submissionBatchId' is set
            if (submissionBatchId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionBatchId' when calling PDFApi->GetSubmissionBatch");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_batch_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionBatchId)); // path parameter
            if (includeSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_submissions", includeSubmissions));
            }

            localVarRequestOptions.Operation = "PDFApi.GetSubmissionBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubmissionBatchWithSubmissions>("/submissions/batches/{submission_batch_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubmissionBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of an uploaded template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePreview</returns>
        public TemplatePreview GetTemplate(string templateId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<TemplatePreview> localVarResponse = GetTemplateWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of an uploaded template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePreview</returns>
        public DocSpring.Client.Client.ApiResponse<TemplatePreview> GetTemplateWithHttpInfo(string templateId, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TemplatePreview>("/templates/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of an uploaded template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePreview</returns>
        public async System.Threading.Tasks.Task<TemplatePreview> GetTemplateAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<TemplatePreview> localVarResponse = await GetTemplateWithHttpInfoAsync(templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of an uploaded template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePreview)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<TemplatePreview>> GetTemplateWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TemplatePreview>("/templates/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the JSON schema for a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JsonSchema</returns>
        public JsonSchema GetTemplateSchema(string templateId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<JsonSchema> localVarResponse = GetTemplateSchemaWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the JSON schema for a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JsonSchema</returns>
        public DocSpring.Client.Client.ApiResponse<JsonSchema> GetTemplateSchemaWithHttpInfo(string templateId, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetTemplateSchema");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetTemplateSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JsonSchema>("/templates/{template_id}/schema", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplateSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the JSON schema for a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JsonSchema</returns>
        public async System.Threading.Tasks.Task<JsonSchema> GetTemplateSchemaAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<JsonSchema> localVarResponse = await GetTemplateSchemaWithHttpInfoAsync(templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the JSON schema for a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JsonSchema)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<JsonSchema>> GetTemplateSchemaWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetTemplateSchema");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetTemplateSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JsonSchema>("/templates/{template_id}/schema", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplateSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all combined submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CombinedSubmission&gt;</returns>
        public List<CombinedSubmission> ListCombinedSubmissions(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<List<CombinedSubmission>> localVarResponse = ListCombinedSubmissionsWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all combined submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CombinedSubmission&gt;</returns>
        public DocSpring.Client.Client.ApiResponse<List<CombinedSubmission>> ListCombinedSubmissionsWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "PDFApi.ListCombinedSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CombinedSubmission>>("/combined_submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCombinedSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all combined submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CombinedSubmission&gt;</returns>
        public async System.Threading.Tasks.Task<List<CombinedSubmission>> ListCombinedSubmissionsAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<List<CombinedSubmission>> localVarResponse = await ListCombinedSubmissionsWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all combined submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CombinedSubmission&gt;)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<List<CombinedSubmission>>> ListCombinedSubmissionsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "PDFApi.ListCombinedSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CombinedSubmission>>("/combined_submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCombinedSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all folders 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Folder&gt;</returns>
        public List<Folder> ListFolders(string parentFolderId = default(string), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<List<Folder>> localVarResponse = ListFoldersWithHttpInfo(parentFolderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all folders 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Folder&gt;</returns>
        public DocSpring.Client.Client.ApiResponse<List<Folder>> ListFoldersWithHttpInfo(string parentFolderId = default(string), int operationIndex = 0)
        {
            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (parentFolderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "parent_folder_id", parentFolderId));
            }

            localVarRequestOptions.Operation = "PDFApi.ListFolders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Folder>>("/folders/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all folders 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Folder&gt;</returns>
        public async System.Threading.Tasks.Task<List<Folder>> ListFoldersAsync(string parentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<List<Folder>> localVarResponse = await ListFoldersWithHttpInfoAsync(parentFolderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all folders 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Folder&gt;)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<List<Folder>>> ListFoldersWithHttpInfoAsync(string parentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (parentFolderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "parent_folder_id", parentFolderId));
            }

            localVarRequestOptions.Operation = "PDFApi.ListFolders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Folder>>("/folders/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubmissionsResponse</returns>
        public ListSubmissionsResponse ListSubmissions(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse> localVarResponse = ListSubmissionsWithHttpInfo(cursor, limit, createdAfter, createdBefore, type, includeData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubmissionsResponse</returns>
        public DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse> ListSubmissionsWithHttpInfo(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (includeData != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_data", includeData));
            }

            localVarRequestOptions.Operation = "PDFApi.ListSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSubmissionsResponse>("/submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubmissionsResponse</returns>
        public async System.Threading.Tasks.Task<ListSubmissionsResponse> ListSubmissionsAsync(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse> localVarResponse = await ListSubmissionsWithHttpInfoAsync(cursor, limit, createdAfter, createdBefore, type, includeData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubmissionsResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse>> ListSubmissionsWithHttpInfoAsync(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (includeData != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_data", includeData));
            }

            localVarRequestOptions.Operation = "PDFApi.ListSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSubmissionsResponse>("/submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all submissions for a given template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubmissionsResponse</returns>
        public ListSubmissionsResponse ListTemplateSubmissions(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse> localVarResponse = ListTemplateSubmissionsWithHttpInfo(templateId, cursor, limit, createdAfter, createdBefore, type, includeData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all submissions for a given template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubmissionsResponse</returns>
        public DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse> ListTemplateSubmissionsWithHttpInfo(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->ListTemplateSubmissions");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (includeData != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_data", includeData));
            }

            localVarRequestOptions.Operation = "PDFApi.ListTemplateSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSubmissionsResponse>("/templates/{template_id}/submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTemplateSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all submissions for a given template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubmissionsResponse</returns>
        public async System.Threading.Tasks.Task<ListSubmissionsResponse> ListTemplateSubmissionsAsync(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse> localVarResponse = await ListTemplateSubmissionsWithHttpInfoAsync(templateId, cursor, limit, createdAfter, createdBefore, type, includeData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all submissions for a given template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubmissionsResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse>> ListTemplateSubmissionsWithHttpInfoAsync(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->ListTemplateSubmissions");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (includeData != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_data", includeData));
            }

            localVarRequestOptions.Operation = "PDFApi.ListTemplateSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSubmissionsResponse>("/templates/{template_id}/submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTemplateSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TemplatePreview&gt;</returns>
        public List<TemplatePreview> ListTemplates(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<List<TemplatePreview>> localVarResponse = ListTemplatesWithHttpInfo(query, parentFolderId, page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TemplatePreview&gt;</returns>
        public DocSpring.Client.Client.ApiResponse<List<TemplatePreview>> ListTemplatesWithHttpInfo(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (parentFolderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "parent_folder_id", parentFolderId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "PDFApi.ListTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TemplatePreview>>("/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TemplatePreview&gt;</returns>
        public async System.Threading.Tasks.Task<List<TemplatePreview>> ListTemplatesAsync(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<List<TemplatePreview>> localVarResponse = await ListTemplatesWithHttpInfoAsync(query, parentFolderId, page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TemplatePreview&gt;)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<List<TemplatePreview>>> ListTemplatesWithHttpInfoAsync(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (parentFolderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "parent_folder_id", parentFolderId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "PDFApi.ListTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TemplatePreview>>("/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        public Folder MoveFolderToFolder(string folderId, MoveFolderData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = MoveFolderToFolderWithHttpInfo(folderId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Move a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        public DocSpring.Client.Client.ApiResponse<Folder> MoveFolderToFolderWithHttpInfo(string folderId, MoveFolderData data, int operationIndex = 0)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->MoveFolderToFolder");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->MoveFolderToFolder");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("folder_id", DocSpring.Client.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.MoveFolderToFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Folder>("/folders/{folder_id}/move", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveFolderToFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> MoveFolderToFolderAsync(string folderId, MoveFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = await MoveFolderToFolderWithHttpInfoAsync(folderId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Move a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Folder>> MoveFolderToFolderWithHttpInfoAsync(string folderId, MoveFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->MoveFolderToFolder");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->MoveFolderToFolder");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("folder_id", DocSpring.Client.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.MoveFolderToFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Folder>("/folders/{folder_id}/move", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveFolderToFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move Template to folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePreview</returns>
        public TemplatePreview MoveTemplateToFolder(string templateId, MoveTemplateData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<TemplatePreview> localVarResponse = MoveTemplateToFolderWithHttpInfo(templateId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Move Template to folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePreview</returns>
        public DocSpring.Client.Client.ApiResponse<TemplatePreview> MoveTemplateToFolderWithHttpInfo(string templateId, MoveTemplateData data, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->MoveTemplateToFolder");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->MoveTemplateToFolder");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.MoveTemplateToFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TemplatePreview>("/templates/{template_id}/move", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveTemplateToFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move Template to folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePreview</returns>
        public async System.Threading.Tasks.Task<TemplatePreview> MoveTemplateToFolderAsync(string templateId, MoveTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<TemplatePreview> localVarResponse = await MoveTemplateToFolderWithHttpInfoAsync(templateId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Move Template to folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePreview)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<TemplatePreview>> MoveTemplateToFolderWithHttpInfoAsync(string templateId, MoveTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->MoveTemplateToFolder");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->MoveTemplateToFolder");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.MoveTemplateToFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TemplatePreview>("/templates/{template_id}/move", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveTemplateToFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplatePublishVersionResponse</returns>
        public TemplatePublishVersionResponse PublishTemplateVersion(string templateId, PublishVersionData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<TemplatePublishVersionResponse> localVarResponse = PublishTemplateVersionWithHttpInfo(templateId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Publish a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplatePublishVersionResponse</returns>
        public DocSpring.Client.Client.ApiResponse<TemplatePublishVersionResponse> PublishTemplateVersionWithHttpInfo(string templateId, PublishVersionData data, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->PublishTemplateVersion");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->PublishTemplateVersion");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.PublishTemplateVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TemplatePublishVersionResponse>("/templates/{template_id}/publish_version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublishTemplateVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplatePublishVersionResponse</returns>
        public async System.Threading.Tasks.Task<TemplatePublishVersionResponse> PublishTemplateVersionAsync(string templateId, PublishVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<TemplatePublishVersionResponse> localVarResponse = await PublishTemplateVersionWithHttpInfoAsync(templateId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Publish a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplatePublishVersionResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<TemplatePublishVersionResponse>> PublishTemplateVersionWithHttpInfoAsync(string templateId, PublishVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->PublishTemplateVersion");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->PublishTemplateVersion");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.PublishTemplateVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TemplatePublishVersionResponse>("/templates/{template_id}/publish_version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublishTemplateVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        public Folder RenameFolder(string folderId, RenameFolderData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = RenameFolderWithHttpInfo(folderId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rename a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        public DocSpring.Client.Client.ApiResponse<Folder> RenameFolderWithHttpInfo(string folderId, RenameFolderData data, int operationIndex = 0)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->RenameFolder");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->RenameFolder");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("folder_id", DocSpring.Client.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.RenameFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Folder>("/folders/{folder_id}/rename", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> RenameFolderAsync(string folderId, RenameFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = await RenameFolderWithHttpInfoAsync(folderId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rename a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Folder>> RenameFolderWithHttpInfoAsync(string folderId, RenameFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->RenameFolder");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->RenameFolder");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("folder_id", DocSpring.Client.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.RenameFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Folder>("/folders/{folder_id}/rename", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessErrorResponse</returns>
        public SuccessErrorResponse RestoreTemplateVersion(string templateId, RestoreVersionData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<SuccessErrorResponse> localVarResponse = RestoreTemplateVersionWithHttpInfo(templateId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessErrorResponse</returns>
        public DocSpring.Client.Client.ApiResponse<SuccessErrorResponse> RestoreTemplateVersionWithHttpInfo(string templateId, RestoreVersionData data, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->RestoreTemplateVersion");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->RestoreTemplateVersion");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.RestoreTemplateVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SuccessErrorResponse>("/templates/{template_id}/restore_version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreTemplateVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessErrorResponse</returns>
        public async System.Threading.Tasks.Task<SuccessErrorResponse> RestoreTemplateVersionAsync(string templateId, RestoreVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<SuccessErrorResponse> localVarResponse = await RestoreTemplateVersionWithHttpInfoAsync(templateId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessErrorResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<SuccessErrorResponse>> RestoreTemplateVersionWithHttpInfoAsync(string templateId, RestoreVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->RestoreTemplateVersion");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->RestoreTemplateVersion");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.RestoreTemplateVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SuccessErrorResponse>("/templates/{template_id}/restore_version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreTemplateVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessErrorResponse</returns>
        public SuccessErrorResponse TestAuthentication(int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<SuccessErrorResponse> localVarResponse = TestAuthenticationWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessErrorResponse</returns>
        public DocSpring.Client.Client.ApiResponse<SuccessErrorResponse> TestAuthenticationWithHttpInfo(int operationIndex = 0)
        {
            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PDFApi.TestAuthentication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SuccessErrorResponse>("/authentication", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestAuthentication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessErrorResponse</returns>
        public async System.Threading.Tasks.Task<SuccessErrorResponse> TestAuthenticationAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<SuccessErrorResponse> localVarResponse = await TestAuthenticationWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessErrorResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<SuccessErrorResponse>> TestAuthenticationWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PDFApi.TestAuthentication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SuccessErrorResponse>("/authentication", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestAuthentication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionDataRequestResponse</returns>
        public CreateSubmissionDataRequestResponse UpdateDataRequest(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestResponse> localVarResponse = UpdateDataRequestWithHttpInfo(dataRequestId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionDataRequestResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestResponse> UpdateDataRequestWithHttpInfo(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->UpdateDataRequest");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->UpdateDataRequest");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.UpdateDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CreateSubmissionDataRequestResponse>("/data_requests/{data_request_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionDataRequestResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubmissionDataRequestResponse> UpdateDataRequestAsync(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestResponse> localVarResponse = await UpdateDataRequestWithHttpInfoAsync(dataRequestId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionDataRequestResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestResponse>> UpdateDataRequestWithHttpInfoAsync(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->UpdateDataRequest");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->UpdateDataRequest");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.UpdateDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CreateSubmissionDataRequestResponse>("/data_requests/{data_request_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessMultipleErrorsResponse</returns>
        public SuccessMultipleErrorsResponse UpdateTemplate(string templateId, UpdateHtmlTemplate data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<SuccessMultipleErrorsResponse> localVarResponse = UpdateTemplateWithHttpInfo(templateId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessMultipleErrorsResponse</returns>
        public DocSpring.Client.Client.ApiResponse<SuccessMultipleErrorsResponse> UpdateTemplateWithHttpInfo(string templateId, UpdateHtmlTemplate data, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->UpdateTemplate");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->UpdateTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.UpdateTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SuccessMultipleErrorsResponse>("/templates/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessMultipleErrorsResponse</returns>
        public async System.Threading.Tasks.Task<SuccessMultipleErrorsResponse> UpdateTemplateAsync(string templateId, UpdateHtmlTemplate data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<SuccessMultipleErrorsResponse> localVarResponse = await UpdateTemplateWithHttpInfoAsync(templateId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessMultipleErrorsResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<SuccessMultipleErrorsResponse>> UpdateTemplateWithHttpInfoAsync(string templateId, UpdateHtmlTemplate data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->UpdateTemplate");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->UpdateTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.UpdateTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SuccessMultipleErrorsResponse>("/templates/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
