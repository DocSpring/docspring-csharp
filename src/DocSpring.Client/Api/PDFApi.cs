/*
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DocSpring.Client.Client;
using DocSpring.Client.Model;

namespace DocSpring.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPDFApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new fields to a Template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddFieldsTemplateResponse</returns>
        AddFieldsTemplateResponse AddFieldsToTemplate(string templateId, AddFieldsData data, int operationIndex = 0);

        /// <summary>
        /// Add new fields to a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddFieldsTemplateResponse</returns>
        ApiResponse<AddFieldsTemplateResponse> AddFieldsToTemplateWithHttpInfo(string templateId, AddFieldsData data, int operationIndex = 0);
        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CreateSubmissionResponse&gt;</returns>
        List<CreateSubmissionResponse> BatchGeneratePdfV1(string templateId, List<SubmissionData> data, int operationIndex = 0);

        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CreateSubmissionResponse&gt;</returns>
        ApiResponse<List<CreateSubmissionResponse>> BatchGeneratePdfV1WithHttpInfo(string templateId, List<SubmissionData> data, int operationIndex = 0);
        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionBatchResponse</returns>
        CreateSubmissionBatchResponse BatchGeneratePdfs(SubmissionBatchData data, int operationIndex = 0);

        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionBatchResponse</returns>
        ApiResponse<CreateSubmissionBatchResponse> BatchGeneratePdfsWithHttpInfo(SubmissionBatchData data, int operationIndex = 0);
        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        CreateCombinedSubmissionResponse CombinePdfs(CombinePdfsData data, int operationIndex = 0);

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        ApiResponse<CreateCombinedSubmissionResponse> CombinePdfsWithHttpInfo(CombinePdfsData data, int operationIndex = 0);
        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        CreateCombinedSubmissionResponse CombineSubmissions(CombinedSubmissionData data, int operationIndex = 0);

        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        ApiResponse<CreateCombinedSubmissionResponse> CombineSubmissionsWithHttpInfo(CombinedSubmissionData data, int operationIndex = 0);
        /// <summary>
        /// Copy a Template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Template</returns>
        Template CopyTemplate(string templateId, CopyTemplateData data, int operationIndex = 0);

        /// <summary>
        /// Copy a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> CopyTemplateWithHttpInfo(string templateId, CopyTemplateData data, int operationIndex = 0);
        /// <summary>
        /// Create a new custom file from a cached presign upload
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCustomFileResponse</returns>
        CreateCustomFileResponse CreateCustomFileFromUpload(CreateCustomFileData data, int operationIndex = 0);

        /// <summary>
        /// Create a new custom file from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCustomFileResponse</returns>
        ApiResponse<CreateCustomFileResponse> CreateCustomFileFromUploadWithHttpInfo(CreateCustomFileData data, int operationIndex = 0);
        /// <summary>
        /// Creates a new event for emailing a signee a request for signature
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionDataRequestEventResponse</returns>
        CreateSubmissionDataRequestEventResponse CreateDataRequestEvent(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0);

        /// <summary>
        /// Creates a new event for emailing a signee a request for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionDataRequestEventResponse</returns>
        ApiResponse<CreateSubmissionDataRequestEventResponse> CreateDataRequestEventWithHttpInfo(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0);
        /// <summary>
        /// Creates a new data request token for form authentication
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionDataRequestTokenResponse</returns>
        CreateSubmissionDataRequestTokenResponse CreateDataRequestToken(string dataRequestId, int operationIndex = 0);

        /// <summary>
        /// Creates a new data request token for form authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionDataRequestTokenResponse</returns>
        ApiResponse<CreateSubmissionDataRequestTokenResponse> CreateDataRequestTokenWithHttpInfo(string dataRequestId, int operationIndex = 0);
        /// <summary>
        /// Create a folder
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        Folder CreateFolder(CreateFolderData data, int operationIndex = 0);

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> CreateFolderWithHttpInfo(CreateFolderData data, int operationIndex = 0);
        /// <summary>
        /// Create a new HTML template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PendingTemplate</returns>
        PendingTemplate CreateHTMLTemplate(CreateHtmlTemplateData data, int operationIndex = 0);

        /// <summary>
        /// Create a new HTML template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PendingTemplate</returns>
        ApiResponse<PendingTemplate> CreateHTMLTemplateWithHttpInfo(CreateHtmlTemplateData data, int operationIndex = 0);
        /// <summary>
        /// Create a new PDF template with a form POST file upload
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PendingTemplate</returns>
        PendingTemplate CreatePDFTemplate(System.IO.Stream templateDocument, string templateName, string templateParentFolderId = default(string), int operationIndex = 0);

        /// <summary>
        /// Create a new PDF template with a form POST file upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PendingTemplate</returns>
        ApiResponse<PendingTemplate> CreatePDFTemplateWithHttpInfo(System.IO.Stream templateDocument, string templateName, string templateParentFolderId = default(string), int operationIndex = 0);
        /// <summary>
        /// Create a new PDF template from a cached presign upload
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PendingTemplate</returns>
        PendingTemplate CreatePDFTemplateFromUpload(CreateTemplateFromUploadData data, int operationIndex = 0);

        /// <summary>
        /// Create a new PDF template from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PendingTemplate</returns>
        ApiResponse<PendingTemplate> CreatePDFTemplateFromUploadWithHttpInfo(CreateTemplateFromUploadData data, int operationIndex = 0);
        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        Folder DeleteFolder(string folderId, int operationIndex = 0);

        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> DeleteFolderWithHttpInfo(string folderId, int operationIndex = 0);
        /// <summary>
        /// Delete a template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTemplateResponse</returns>
        DeleteTemplateResponse DeleteTemplate(string templateId, string version = default(string), int operationIndex = 0);

        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTemplateResponse</returns>
        ApiResponse<DeleteTemplateResponse> DeleteTemplateWithHttpInfo(string templateId, string version = default(string), int operationIndex = 0);
        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CombinedSubmission</returns>
        CombinedSubmission ExpireCombinedSubmission(string combinedSubmissionId, int operationIndex = 0);

        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        ApiResponse<CombinedSubmission> ExpireCombinedSubmissionWithHttpInfo(string combinedSubmissionId, int operationIndex = 0);
        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Submission</returns>
        Submission ExpireSubmission(string submissionId, int operationIndex = 0);

        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Submission</returns>
        ApiResponse<Submission> ExpireSubmissionWithHttpInfo(string submissionId, int operationIndex = 0);
        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionResponse</returns>
        CreateSubmissionResponse GeneratePDF(string templateId, CreateSubmissionData submission, int operationIndex = 0);

        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionResponse</returns>
        ApiResponse<CreateSubmissionResponse> GeneratePDFWithHttpInfo(string templateId, CreateSubmissionData submission, int operationIndex = 0);
        /// <summary>
        /// Generated a preview PDF for partially completed data requests
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PreviewPdfResponse</returns>
        PreviewPdfResponse GeneratePreview(string submissionId, int operationIndex = 0);

        /// <summary>
        /// Generated a preview PDF for partially completed data requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PreviewPdfResponse</returns>
        ApiResponse<PreviewPdfResponse> GeneratePreviewWithHttpInfo(string submissionId, int operationIndex = 0);
        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CombinedSubmission</returns>
        CombinedSubmission GetCombinedSubmission(string combinedSubmissionId, int operationIndex = 0);

        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        ApiResponse<CombinedSubmission> GetCombinedSubmissionWithHttpInfo(string combinedSubmissionId, int operationIndex = 0);
        /// <summary>
        /// Look up a submission data request
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmissionDataRequest</returns>
        SubmissionDataRequest GetDataRequest(string dataRequestId, int operationIndex = 0);

        /// <summary>
        /// Look up a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmissionDataRequest</returns>
        ApiResponse<SubmissionDataRequest> GetDataRequestWithHttpInfo(string dataRequestId, int operationIndex = 0);
        /// <summary>
        /// Fetch the full template attributes
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FullTemplate</returns>
        FullTemplate GetFullTemplate(string templateId, int operationIndex = 0);

        /// <summary>
        /// Fetch the full template attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FullTemplate</returns>
        ApiResponse<FullTemplate> GetFullTemplateWithHttpInfo(string templateId, int operationIndex = 0);
        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadPresign</returns>
        UploadPresign GetPresignUrl(int operationIndex = 0);

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadPresign</returns>
        ApiResponse<UploadPresign> GetPresignUrlWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Submission</returns>
        Submission GetSubmission(string submissionId, bool? includeData = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Submission</returns>
        ApiResponse<Submission> GetSubmissionWithHttpInfo(string submissionId, bool? includeData = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Check the status of a submission batch job
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmissionBatch</returns>
        SubmissionBatch GetSubmissionBatch(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Check the status of a submission batch job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmissionBatch</returns>
        ApiResponse<SubmissionBatch> GetSubmissionBatchWithHttpInfo(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Check the status of an uploaded template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Template</returns>
        Template GetTemplate(string templateId, int operationIndex = 0);

        /// <summary>
        /// Check the status of an uploaded template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> GetTemplateWithHttpInfo(string templateId, int operationIndex = 0);
        /// <summary>
        /// Fetch the JSON schema for a template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateSchema</returns>
        TemplateSchema GetTemplateSchema(string templateId, int operationIndex = 0);

        /// <summary>
        /// Fetch the JSON schema for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateSchema</returns>
        ApiResponse<TemplateSchema> GetTemplateSchemaWithHttpInfo(string templateId, int operationIndex = 0);
        /// <summary>
        /// Get a list of all combined submissions
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CombinedSubmission&gt;</returns>
        List<CombinedSubmission> ListCombinedSubmissions(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a list of all combined submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CombinedSubmission&gt;</returns>
        ApiResponse<List<CombinedSubmission>> ListCombinedSubmissionsWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a list of all folders
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Folder&gt;</returns>
        List<Folder> ListFolders(string parentFolderId = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a list of all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Folder&gt;</returns>
        ApiResponse<List<Folder>> ListFoldersWithHttpInfo(string parentFolderId = default(string), int operationIndex = 0);
        /// <summary>
        /// List all submissions
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubmissionsResponse</returns>
        ListSubmissionsResponse ListSubmissions(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List all submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubmissionsResponse</returns>
        ApiResponse<ListSubmissionsResponse> ListSubmissionsWithHttpInfo(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0);
        /// <summary>
        /// List all submissions for a given template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubmissionsResponse</returns>
        ListSubmissionsResponse ListTemplateSubmissions(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List all submissions for a given template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubmissionsResponse</returns>
        ApiResponse<ListSubmissionsResponse> ListTemplateSubmissionsWithHttpInfo(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> ListTemplates(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> ListTemplatesWithHttpInfo(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Move a folder
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        Folder MoveFolderToFolder(string folderId, MoveFolderData data, int operationIndex = 0);

        /// <summary>
        /// Move a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> MoveFolderToFolderWithHttpInfo(string folderId, MoveFolderData data, int operationIndex = 0);
        /// <summary>
        /// Move Template to folder
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Template</returns>
        Template MoveTemplateToFolder(string templateId, MoveTemplateData data, int operationIndex = 0);

        /// <summary>
        /// Move Template to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> MoveTemplateToFolderWithHttpInfo(string templateId, MoveTemplateData data, int operationIndex = 0);
        /// <summary>
        /// Publish a template version
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublishTemplateVersionResponse</returns>
        PublishTemplateVersionResponse PublishTemplateVersion(string templateId, PublishVersionData data, int operationIndex = 0);

        /// <summary>
        /// Publish a template version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublishTemplateVersionResponse</returns>
        ApiResponse<PublishTemplateVersionResponse> PublishTemplateVersionWithHttpInfo(string templateId, PublishVersionData data, int operationIndex = 0);
        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RenameFolder(string folderId, RenameFolderData data, int operationIndex = 0);

        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RenameFolderWithHttpInfo(string folderId, RenameFolderData data, int operationIndex = 0);
        /// <summary>
        /// Restore a template version
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestoreTemplateVersionResponse</returns>
        RestoreTemplateVersionResponse RestoreTemplateVersion(string templateId, RestoreVersionData data, int operationIndex = 0);

        /// <summary>
        /// Restore a template version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestoreTemplateVersionResponse</returns>
        ApiResponse<RestoreTemplateVersionResponse> RestoreTemplateVersionWithHttpInfo(string templateId, RestoreVersionData data, int operationIndex = 0);
        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthenticationSuccessResponse</returns>
        AuthenticationSuccessResponse TestAuthentication(int operationIndex = 0);

        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthenticationSuccessResponse</returns>
        ApiResponse<AuthenticationSuccessResponse> TestAuthenticationWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update a submission data request
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateDataRequestResponse</returns>
        UpdateDataRequestResponse UpdateDataRequest(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0);

        /// <summary>
        /// Update a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateDataRequestResponse</returns>
        ApiResponse<UpdateDataRequestResponse> UpdateDataRequestWithHttpInfo(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0);
        /// <summary>
        /// Update a Template
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateTemplateResponse</returns>
        UpdateTemplateResponse UpdateTemplate(string templateId, UpdateTemplateData data, int operationIndex = 0);

        /// <summary>
        /// Update a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateTemplateResponse</returns>
        ApiResponse<UpdateTemplateResponse> UpdateTemplateWithHttpInfo(string templateId, UpdateTemplateData data, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPDFApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add new fields to a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddFieldsTemplateResponse</returns>
        System.Threading.Tasks.Task<AddFieldsTemplateResponse> AddFieldsToTemplateAsync(string templateId, AddFieldsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add new fields to a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddFieldsTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddFieldsTemplateResponse>> AddFieldsToTemplateWithHttpInfoAsync(string templateId, AddFieldsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CreateSubmissionResponse&gt;</returns>
        System.Threading.Tasks.Task<List<CreateSubmissionResponse>> BatchGeneratePdfV1Async(string templateId, List<SubmissionData> data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CreateSubmissionResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CreateSubmissionResponse>>> BatchGeneratePdfV1WithHttpInfoAsync(string templateId, List<SubmissionData> data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionBatchResponse</returns>
        System.Threading.Tasks.Task<CreateSubmissionBatchResponse> BatchGeneratePdfsAsync(SubmissionBatchData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Generates multiple PDFs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubmissionBatchResponse>> BatchGeneratePdfsWithHttpInfoAsync(SubmissionBatchData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombinePdfsAsync(CombinePdfsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCombinedSubmissionResponse>> CombinePdfsWithHttpInfoAsync(CombinePdfsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombineSubmissionsAsync(CombinedSubmissionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Merge generated PDFs together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCombinedSubmissionResponse>> CombineSubmissionsWithHttpInfoAsync(CombinedSubmissionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Copy a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> CopyTemplateAsync(string templateId, CopyTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Copy a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> CopyTemplateWithHttpInfoAsync(string templateId, CopyTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new custom file from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCustomFileResponse</returns>
        System.Threading.Tasks.Task<CreateCustomFileResponse> CreateCustomFileFromUploadAsync(CreateCustomFileData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new custom file from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCustomFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCustomFileResponse>> CreateCustomFileFromUploadWithHttpInfoAsync(CreateCustomFileData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new event for emailing a signee a request for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionDataRequestEventResponse</returns>
        System.Threading.Tasks.Task<CreateSubmissionDataRequestEventResponse> CreateDataRequestEventAsync(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new event for emailing a signee a request for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionDataRequestEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubmissionDataRequestEventResponse>> CreateDataRequestEventWithHttpInfoAsync(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new data request token for form authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionDataRequestTokenResponse</returns>
        System.Threading.Tasks.Task<CreateSubmissionDataRequestTokenResponse> CreateDataRequestTokenAsync(string dataRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new data request token for form authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionDataRequestTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubmissionDataRequestTokenResponse>> CreateDataRequestTokenWithHttpInfoAsync(string dataRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> CreateFolderAsync(CreateFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> CreateFolderWithHttpInfoAsync(CreateFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new HTML template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PendingTemplate</returns>
        System.Threading.Tasks.Task<PendingTemplate> CreateHTMLTemplateAsync(CreateHtmlTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new HTML template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PendingTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PendingTemplate>> CreateHTMLTemplateWithHttpInfoAsync(CreateHtmlTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new PDF template with a form POST file upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PendingTemplate</returns>
        System.Threading.Tasks.Task<PendingTemplate> CreatePDFTemplateAsync(System.IO.Stream templateDocument, string templateName, string templateParentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new PDF template with a form POST file upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PendingTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PendingTemplate>> CreatePDFTemplateWithHttpInfoAsync(System.IO.Stream templateDocument, string templateName, string templateParentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new PDF template from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PendingTemplate</returns>
        System.Threading.Tasks.Task<PendingTemplate> CreatePDFTemplateFromUploadAsync(CreateTemplateFromUploadData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new PDF template from a cached presign upload
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PendingTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PendingTemplate>> CreatePDFTemplateFromUploadWithHttpInfoAsync(CreateTemplateFromUploadData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> DeleteFolderAsync(string folderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> DeleteFolderWithHttpInfoAsync(string folderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTemplateResponse</returns>
        System.Threading.Tasks.Task<DeleteTemplateResponse> DeleteTemplateAsync(string templateId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteTemplateResponse>> DeleteTemplateWithHttpInfoAsync(string templateId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CombinedSubmission</returns>
        System.Threading.Tasks.Task<CombinedSubmission> ExpireCombinedSubmissionAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Expire a combined submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        System.Threading.Tasks.Task<ApiResponse<CombinedSubmission>> ExpireCombinedSubmissionWithHttpInfoAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Submission</returns>
        System.Threading.Tasks.Task<Submission> ExpireSubmissionAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Expire a PDF submission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submission>> ExpireSubmissionWithHttpInfoAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionResponse</returns>
        System.Threading.Tasks.Task<CreateSubmissionResponse> GeneratePDFAsync(string templateId, CreateSubmissionData submission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Generates a new PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubmissionResponse>> GeneratePDFWithHttpInfoAsync(string templateId, CreateSubmissionData submission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Generated a preview PDF for partially completed data requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreviewPdfResponse</returns>
        System.Threading.Tasks.Task<PreviewPdfResponse> GeneratePreviewAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Generated a preview PDF for partially completed data requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreviewPdfResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreviewPdfResponse>> GeneratePreviewWithHttpInfoAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CombinedSubmission</returns>
        System.Threading.Tasks.Task<CombinedSubmission> GetCombinedSubmissionAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Check the status of a combined submission (merged PDFs)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        System.Threading.Tasks.Task<ApiResponse<CombinedSubmission>> GetCombinedSubmissionWithHttpInfoAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Look up a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmissionDataRequest</returns>
        System.Threading.Tasks.Task<SubmissionDataRequest> GetDataRequestAsync(string dataRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Look up a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmissionDataRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmissionDataRequest>> GetDataRequestWithHttpInfoAsync(string dataRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetch the full template attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FullTemplate</returns>
        System.Threading.Tasks.Task<FullTemplate> GetFullTemplateAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetch the full template attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FullTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<FullTemplate>> GetFullTemplateWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadPresign</returns>
        System.Threading.Tasks.Task<UploadPresign> GetPresignUrlAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadPresign)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadPresign>> GetPresignUrlWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Submission</returns>
        System.Threading.Tasks.Task<Submission> GetSubmissionAsync(string submissionId, bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Check the status of a PDF
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submission>> GetSubmissionWithHttpInfoAsync(string submissionId, bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Check the status of a submission batch job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmissionBatch</returns>
        System.Threading.Tasks.Task<SubmissionBatch> GetSubmissionBatchAsync(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Check the status of a submission batch job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmissionBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmissionBatch>> GetSubmissionBatchWithHttpInfoAsync(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Check the status of an uploaded template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> GetTemplateAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Check the status of an uploaded template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> GetTemplateWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetch the JSON schema for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateSchema</returns>
        System.Threading.Tasks.Task<TemplateSchema> GetTemplateSchemaAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetch the JSON schema for a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateSchema>> GetTemplateSchemaWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of all combined submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CombinedSubmission&gt;</returns>
        System.Threading.Tasks.Task<List<CombinedSubmission>> ListCombinedSubmissionsAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of all combined submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CombinedSubmission&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CombinedSubmission>>> ListCombinedSubmissionsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Folder&gt;</returns>
        System.Threading.Tasks.Task<List<Folder>> ListFoldersAsync(string parentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Folder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Folder>>> ListFoldersWithHttpInfoAsync(string parentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubmissionsResponse</returns>
        System.Threading.Tasks.Task<ListSubmissionsResponse> ListSubmissionsAsync(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all submissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubmissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSubmissionsResponse>> ListSubmissionsWithHttpInfoAsync(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all submissions for a given template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubmissionsResponse</returns>
        System.Threading.Tasks.Task<ListSubmissionsResponse> ListTemplateSubmissionsAsync(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all submissions for a given template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubmissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSubmissionsResponse>> ListTemplateSubmissionsWithHttpInfoAsync(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> ListTemplatesAsync(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> ListTemplatesWithHttpInfoAsync(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Move a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> MoveFolderToFolderAsync(string folderId, MoveFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Move a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> MoveFolderToFolderWithHttpInfoAsync(string folderId, MoveFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Move Template to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> MoveTemplateToFolderAsync(string templateId, MoveTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Move Template to folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> MoveTemplateToFolderWithHttpInfoAsync(string templateId, MoveTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Publish a template version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublishTemplateVersionResponse</returns>
        System.Threading.Tasks.Task<PublishTemplateVersionResponse> PublishTemplateVersionAsync(string templateId, PublishVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Publish a template version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublishTemplateVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublishTemplateVersionResponse>> PublishTemplateVersionWithHttpInfoAsync(string templateId, PublishVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RenameFolderAsync(string folderId, RenameFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Rename a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RenameFolderWithHttpInfoAsync(string folderId, RenameFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Restore a template version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestoreTemplateVersionResponse</returns>
        System.Threading.Tasks.Task<RestoreTemplateVersionResponse> RestoreTemplateVersionAsync(string templateId, RestoreVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Restore a template version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestoreTemplateVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestoreTemplateVersionResponse>> RestoreTemplateVersionWithHttpInfoAsync(string templateId, RestoreVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationSuccessResponse</returns>
        System.Threading.Tasks.Task<AuthenticationSuccessResponse> TestAuthenticationAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Test Authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationSuccessResponse>> TestAuthenticationWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateDataRequestResponse</returns>
        System.Threading.Tasks.Task<UpdateDataRequestResponse> UpdateDataRequestAsync(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a submission data request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateDataRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateDataRequestResponse>> UpdateDataRequestWithHttpInfoAsync(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTemplateResponse</returns>
        System.Threading.Tasks.Task<UpdateTemplateResponse> UpdateTemplateAsync(string templateId, UpdateTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTemplateResponse>> UpdateTemplateWithHttpInfoAsync(string templateId, UpdateTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPDFApi : IPDFApiSync, IPDFApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PDFApi : IPDFApi
    {
        private DocSpring.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PDFApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PDFApi(string basePath)
        {
            this.Configuration = DocSpring.Client.Client.Configuration.MergeConfigurations(
                DocSpring.Client.Client.GlobalConfiguration.Instance,
                new DocSpring.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DocSpring.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DocSpring.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DocSpring.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PDFApi(DocSpring.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DocSpring.Client.Client.Configuration.MergeConfigurations(
                DocSpring.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DocSpring.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DocSpring.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DocSpring.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PDFApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PDFApi(DocSpring.Client.Client.ISynchronousClient client, DocSpring.Client.Client.IAsynchronousClient asyncClient, DocSpring.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DocSpring.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DocSpring.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DocSpring.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DocSpring.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocSpring.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add new fields to a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddFieldsTemplateResponse</returns>
        public AddFieldsTemplateResponse AddFieldsToTemplate(string templateId, AddFieldsData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<AddFieldsTemplateResponse> localVarResponse = AddFieldsToTemplateWithHttpInfo(templateId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new fields to a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddFieldsTemplateResponse</returns>
        public DocSpring.Client.Client.ApiResponse<AddFieldsTemplateResponse> AddFieldsToTemplateWithHttpInfo(string templateId, AddFieldsData data, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->AddFieldsToTemplate");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->AddFieldsToTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.AddFieldsToTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AddFieldsTemplateResponse>("/templates/{template_id}/add_fields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFieldsToTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new fields to a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddFieldsTemplateResponse</returns>
        public async System.Threading.Tasks.Task<AddFieldsTemplateResponse> AddFieldsToTemplateAsync(string templateId, AddFieldsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<AddFieldsTemplateResponse> localVarResponse = await AddFieldsToTemplateWithHttpInfoAsync(templateId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new fields to a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddFieldsTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<AddFieldsTemplateResponse>> AddFieldsToTemplateWithHttpInfoAsync(string templateId, AddFieldsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->AddFieldsToTemplate");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->AddFieldsToTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.AddFieldsToTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AddFieldsTemplateResponse>("/templates/{template_id}/add_fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFieldsToTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CreateSubmissionResponse&gt;</returns>
        public List<CreateSubmissionResponse> BatchGeneratePdfV1(string templateId, List<SubmissionData> data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<List<CreateSubmissionResponse>> localVarResponse = BatchGeneratePdfV1WithHttpInfo(templateId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CreateSubmissionResponse&gt;</returns>
        public DocSpring.Client.Client.ApiResponse<List<CreateSubmissionResponse>> BatchGeneratePdfV1WithHttpInfo(string templateId, List<SubmissionData> data, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->BatchGeneratePdfV1");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->BatchGeneratePdfV1");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.BatchGeneratePdfV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CreateSubmissionResponse>>("/templates/{template_id}/submissions/batch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGeneratePdfV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CreateSubmissionResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<CreateSubmissionResponse>> BatchGeneratePdfV1Async(string templateId, List<SubmissionData> data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<List<CreateSubmissionResponse>> localVarResponse = await BatchGeneratePdfV1WithHttpInfoAsync(templateId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CreateSubmissionResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<List<CreateSubmissionResponse>>> BatchGeneratePdfV1WithHttpInfoAsync(string templateId, List<SubmissionData> data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->BatchGeneratePdfV1");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->BatchGeneratePdfV1");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.BatchGeneratePdfV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CreateSubmissionResponse>>("/templates/{template_id}/submissions/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGeneratePdfV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionBatchResponse</returns>
        public CreateSubmissionBatchResponse BatchGeneratePdfs(SubmissionBatchData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionBatchResponse> localVarResponse = BatchGeneratePdfsWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionBatchResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateSubmissionBatchResponse> BatchGeneratePdfsWithHttpInfo(SubmissionBatchData data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->BatchGeneratePdfs");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.BatchGeneratePdfs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSubmissionBatchResponse>("/submissions/batches", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGeneratePdfs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionBatchResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubmissionBatchResponse> BatchGeneratePdfsAsync(SubmissionBatchData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionBatchResponse> localVarResponse = await BatchGeneratePdfsWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates multiple PDFs 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionBatchResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateSubmissionBatchResponse>> BatchGeneratePdfsWithHttpInfoAsync(SubmissionBatchData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->BatchGeneratePdfs");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.BatchGeneratePdfs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSubmissionBatchResponse>("/submissions/batches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGeneratePdfs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        public CreateCombinedSubmissionResponse CombinePdfs(CombinePdfsData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = CombinePdfsWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse> CombinePdfsWithHttpInfo(CombinePdfsData data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CombinePdfs");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CombinePdfs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCombinedSubmissionResponse>("/combined_submissions?v=2", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CombinePdfs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombinePdfsAsync(CombinePdfsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = await CombinePdfsWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Merge submission PDFs, template PDFs, or custom files 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse>> CombinePdfsWithHttpInfoAsync(CombinePdfsData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CombinePdfs");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CombinePdfs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCombinedSubmissionResponse>("/combined_submissions?v=2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CombinePdfs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCombinedSubmissionResponse</returns>
        public CreateCombinedSubmissionResponse CombineSubmissions(CombinedSubmissionData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = CombineSubmissionsWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCombinedSubmissionResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse> CombineSubmissionsWithHttpInfo(CombinedSubmissionData data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CombineSubmissions");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CombineSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCombinedSubmissionResponse>("/combined_submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CombineSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCombinedSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<CreateCombinedSubmissionResponse> CombineSubmissionsAsync(CombinedSubmissionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse> localVarResponse = await CombineSubmissionsWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Merge generated PDFs together 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCombinedSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateCombinedSubmissionResponse>> CombineSubmissionsWithHttpInfoAsync(CombinedSubmissionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CombineSubmissions");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CombineSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCombinedSubmissionResponse>("/combined_submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CombineSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Template</returns>
        public Template CopyTemplate(string templateId, CopyTemplateData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Template> localVarResponse = CopyTemplateWithHttpInfo(templateId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Template</returns>
        public DocSpring.Client.Client.ApiResponse<Template> CopyTemplateWithHttpInfo(string templateId, CopyTemplateData data, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->CopyTemplate");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CopyTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CopyTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Template>("/templates/{template_id}/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> CopyTemplateAsync(string templateId, CopyTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Template> localVarResponse = await CopyTemplateWithHttpInfoAsync(templateId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Template>> CopyTemplateWithHttpInfoAsync(string templateId, CopyTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->CopyTemplate");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CopyTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CopyTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Template>("/templates/{template_id}/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new custom file from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCustomFileResponse</returns>
        public CreateCustomFileResponse CreateCustomFileFromUpload(CreateCustomFileData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateCustomFileResponse> localVarResponse = CreateCustomFileFromUploadWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new custom file from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCustomFileResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateCustomFileResponse> CreateCustomFileFromUploadWithHttpInfo(CreateCustomFileData data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreateCustomFileFromUpload");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreateCustomFileFromUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCustomFileResponse>("/custom_files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomFileFromUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new custom file from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCustomFileResponse</returns>
        public async System.Threading.Tasks.Task<CreateCustomFileResponse> CreateCustomFileFromUploadAsync(CreateCustomFileData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateCustomFileResponse> localVarResponse = await CreateCustomFileFromUploadWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new custom file from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCustomFileResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateCustomFileResponse>> CreateCustomFileFromUploadWithHttpInfoAsync(CreateCustomFileData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreateCustomFileFromUpload");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreateCustomFileFromUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCustomFileResponse>("/custom_files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomFileFromUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new event for emailing a signee a request for signature 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionDataRequestEventResponse</returns>
        public CreateSubmissionDataRequestEventResponse CreateDataRequestEvent(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestEventResponse> localVarResponse = CreateDataRequestEventWithHttpInfo(dataRequestId, varEvent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new event for emailing a signee a request for signature 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionDataRequestEventResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestEventResponse> CreateDataRequestEventWithHttpInfo(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->CreateDataRequestEvent");
            }

            // verify the required parameter 'varEvent' is set
            if (varEvent == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'varEvent' when calling PDFApi->CreateDataRequestEvent");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter
            localVarRequestOptions.Data = varEvent;

            localVarRequestOptions.Operation = "PDFApi.CreateDataRequestEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSubmissionDataRequestEventResponse>("/data_requests/{data_request_id}/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataRequestEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new event for emailing a signee a request for signature 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionDataRequestEventResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubmissionDataRequestEventResponse> CreateDataRequestEventAsync(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestEventResponse> localVarResponse = await CreateDataRequestEventWithHttpInfoAsync(dataRequestId, varEvent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new event for emailing a signee a request for signature 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="varEvent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionDataRequestEventResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestEventResponse>> CreateDataRequestEventWithHttpInfoAsync(string dataRequestId, CreateSubmissionDataRequestEventRequest varEvent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->CreateDataRequestEvent");
            }

            // verify the required parameter 'varEvent' is set
            if (varEvent == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'varEvent' when calling PDFApi->CreateDataRequestEvent");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter
            localVarRequestOptions.Data = varEvent;

            localVarRequestOptions.Operation = "PDFApi.CreateDataRequestEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSubmissionDataRequestEventResponse>("/data_requests/{data_request_id}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataRequestEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new data request token for form authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionDataRequestTokenResponse</returns>
        public CreateSubmissionDataRequestTokenResponse CreateDataRequestToken(string dataRequestId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestTokenResponse> localVarResponse = CreateDataRequestTokenWithHttpInfo(dataRequestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new data request token for form authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionDataRequestTokenResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestTokenResponse> CreateDataRequestTokenWithHttpInfo(string dataRequestId, int operationIndex = 0)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->CreateDataRequestToken");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.CreateDataRequestToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSubmissionDataRequestTokenResponse>("/data_requests/{data_request_id}/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataRequestToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new data request token for form authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionDataRequestTokenResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubmissionDataRequestTokenResponse> CreateDataRequestTokenAsync(string dataRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestTokenResponse> localVarResponse = await CreateDataRequestTokenWithHttpInfoAsync(dataRequestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new data request token for form authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionDataRequestTokenResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateSubmissionDataRequestTokenResponse>> CreateDataRequestTokenWithHttpInfoAsync(string dataRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->CreateDataRequestToken");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.CreateDataRequestToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSubmissionDataRequestTokenResponse>("/data_requests/{data_request_id}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataRequestToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        public Folder CreateFolder(CreateFolderData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = CreateFolderWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        public DocSpring.Client.Client.ApiResponse<Folder> CreateFolderWithHttpInfo(CreateFolderData data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreateFolder");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreateFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Folder>("/folders/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> CreateFolderAsync(CreateFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = await CreateFolderWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Folder>> CreateFolderWithHttpInfoAsync(CreateFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreateFolder");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreateFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Folder>("/folders/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PendingTemplate</returns>
        public PendingTemplate CreateHTMLTemplate(CreateHtmlTemplateData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<PendingTemplate> localVarResponse = CreateHTMLTemplateWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PendingTemplate</returns>
        public DocSpring.Client.Client.ApiResponse<PendingTemplate> CreateHTMLTemplateWithHttpInfo(CreateHtmlTemplateData data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreateHTMLTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreateHTMLTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PendingTemplate>("/templates?desc=html", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateHTMLTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PendingTemplate</returns>
        public async System.Threading.Tasks.Task<PendingTemplate> CreateHTMLTemplateAsync(CreateHtmlTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<PendingTemplate> localVarResponse = await CreateHTMLTemplateWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new HTML template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PendingTemplate)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<PendingTemplate>> CreateHTMLTemplateWithHttpInfoAsync(CreateHtmlTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreateHTMLTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreateHTMLTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PendingTemplate>("/templates?desc=html", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateHTMLTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new PDF template with a form POST file upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PendingTemplate</returns>
        public PendingTemplate CreatePDFTemplate(System.IO.Stream templateDocument, string templateName, string templateParentFolderId = default(string), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<PendingTemplate> localVarResponse = CreatePDFTemplateWithHttpInfo(templateDocument, templateName, templateParentFolderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new PDF template with a form POST file upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PendingTemplate</returns>
        public DocSpring.Client.Client.ApiResponse<PendingTemplate> CreatePDFTemplateWithHttpInfo(System.IO.Stream templateDocument, string templateName, string templateParentFolderId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'templateDocument' is set
            if (templateDocument == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateDocument' when calling PDFApi->CreatePDFTemplate");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateName' when calling PDFApi->CreatePDFTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("template[document]", templateDocument);
            localVarRequestOptions.FormParameters.Add("template[name]", DocSpring.Client.Client.ClientUtils.ParameterToString(templateName)); // form parameter
            if (templateParentFolderId != null)
            {
                localVarRequestOptions.FormParameters.Add("template[parent_folder_id]", DocSpring.Client.Client.ClientUtils.ParameterToString(templateParentFolderId)); // form parameter
            }

            localVarRequestOptions.Operation = "PDFApi.CreatePDFTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PendingTemplate>("/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePDFTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new PDF template with a form POST file upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PendingTemplate</returns>
        public async System.Threading.Tasks.Task<PendingTemplate> CreatePDFTemplateAsync(System.IO.Stream templateDocument, string templateName, string templateParentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<PendingTemplate> localVarResponse = await CreatePDFTemplateWithHttpInfoAsync(templateDocument, templateName, templateParentFolderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new PDF template with a form POST file upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDocument"></param>
        /// <param name="templateName"></param>
        /// <param name="templateParentFolderId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PendingTemplate)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<PendingTemplate>> CreatePDFTemplateWithHttpInfoAsync(System.IO.Stream templateDocument, string templateName, string templateParentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateDocument' is set
            if (templateDocument == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateDocument' when calling PDFApi->CreatePDFTemplate");
            }

            // verify the required parameter 'templateName' is set
            if (templateName == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateName' when calling PDFApi->CreatePDFTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("template[document]", templateDocument);
            localVarRequestOptions.FormParameters.Add("template[name]", DocSpring.Client.Client.ClientUtils.ParameterToString(templateName)); // form parameter
            if (templateParentFolderId != null)
            {
                localVarRequestOptions.FormParameters.Add("template[parent_folder_id]", DocSpring.Client.Client.ClientUtils.ParameterToString(templateParentFolderId)); // form parameter
            }

            localVarRequestOptions.Operation = "PDFApi.CreatePDFTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PendingTemplate>("/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePDFTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new PDF template from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PendingTemplate</returns>
        public PendingTemplate CreatePDFTemplateFromUpload(CreateTemplateFromUploadData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<PendingTemplate> localVarResponse = CreatePDFTemplateFromUploadWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new PDF template from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PendingTemplate</returns>
        public DocSpring.Client.Client.ApiResponse<PendingTemplate> CreatePDFTemplateFromUploadWithHttpInfo(CreateTemplateFromUploadData data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreatePDFTemplateFromUpload");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreatePDFTemplateFromUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PendingTemplate>("/templates?desc=cached_upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePDFTemplateFromUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new PDF template from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PendingTemplate</returns>
        public async System.Threading.Tasks.Task<PendingTemplate> CreatePDFTemplateFromUploadAsync(CreateTemplateFromUploadData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<PendingTemplate> localVarResponse = await CreatePDFTemplateFromUploadWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new PDF template from a cached presign upload 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PendingTemplate)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<PendingTemplate>> CreatePDFTemplateFromUploadWithHttpInfoAsync(CreateTemplateFromUploadData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->CreatePDFTemplateFromUpload");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.CreatePDFTemplateFromUpload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PendingTemplate>("/templates?desc=cached_upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePDFTemplateFromUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        public Folder DeleteFolder(string folderId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = DeleteFolderWithHttpInfo(folderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        public DocSpring.Client.Client.ApiResponse<Folder> DeleteFolderWithHttpInfo(string folderId, int operationIndex = 0)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->DeleteFolder");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("folder_id", DocSpring.Client.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.DeleteFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Folder>("/folders/{folder_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> DeleteFolderAsync(string folderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = await DeleteFolderWithHttpInfoAsync(folderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Folder>> DeleteFolderWithHttpInfoAsync(string folderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->DeleteFolder");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("folder_id", DocSpring.Client.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.DeleteFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Folder>("/folders/{folder_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTemplateResponse</returns>
        public DeleteTemplateResponse DeleteTemplate(string templateId, string version = default(string), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<DeleteTemplateResponse> localVarResponse = DeleteTemplateWithHttpInfo(templateId, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTemplateResponse</returns>
        public DocSpring.Client.Client.ApiResponse<DeleteTemplateResponse> DeleteTemplateWithHttpInfo(string templateId, string version = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->DeleteTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }

            localVarRequestOptions.Operation = "PDFApi.DeleteTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteTemplateResponse>("/templates/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTemplateResponse</returns>
        public async System.Threading.Tasks.Task<DeleteTemplateResponse> DeleteTemplateAsync(string templateId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<DeleteTemplateResponse> localVarResponse = await DeleteTemplateWithHttpInfoAsync(templateId, version, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<DeleteTemplateResponse>> DeleteTemplateWithHttpInfoAsync(string templateId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->DeleteTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }

            localVarRequestOptions.Operation = "PDFApi.DeleteTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteTemplateResponse>("/templates/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CombinedSubmission</returns>
        public CombinedSubmission ExpireCombinedSubmission(string combinedSubmissionId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CombinedSubmission> localVarResponse = ExpireCombinedSubmissionWithHttpInfo(combinedSubmissionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        public DocSpring.Client.Client.ApiResponse<CombinedSubmission> ExpireCombinedSubmissionWithHttpInfo(string combinedSubmissionId, int operationIndex = 0)
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->ExpireCombinedSubmission");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("combined_submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(combinedSubmissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.ExpireCombinedSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CombinedSubmission>("/combined_submissions/{combined_submission_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExpireCombinedSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CombinedSubmission</returns>
        public async System.Threading.Tasks.Task<CombinedSubmission> ExpireCombinedSubmissionAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CombinedSubmission> localVarResponse = await ExpireCombinedSubmissionWithHttpInfoAsync(combinedSubmissionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Expire a combined submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CombinedSubmission>> ExpireCombinedSubmissionWithHttpInfoAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->ExpireCombinedSubmission");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("combined_submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(combinedSubmissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.ExpireCombinedSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CombinedSubmission>("/combined_submissions/{combined_submission_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExpireCombinedSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Submission</returns>
        public Submission ExpireSubmission(string submissionId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Submission> localVarResponse = ExpireSubmissionWithHttpInfo(submissionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Submission</returns>
        public DocSpring.Client.Client.ApiResponse<Submission> ExpireSubmissionWithHttpInfo(string submissionId, int operationIndex = 0)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->ExpireSubmission");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.ExpireSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Submission>("/submissions/{submission_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExpireSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Submission</returns>
        public async System.Threading.Tasks.Task<Submission> ExpireSubmissionAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Submission> localVarResponse = await ExpireSubmissionWithHttpInfoAsync(submissionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Expire a PDF submission 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Submission>> ExpireSubmissionWithHttpInfoAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->ExpireSubmission");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.ExpireSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Submission>("/submissions/{submission_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExpireSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubmissionResponse</returns>
        public CreateSubmissionResponse GeneratePDF(string templateId, CreateSubmissionData submission, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionResponse> localVarResponse = GeneratePDFWithHttpInfo(templateId, submission);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubmissionResponse</returns>
        public DocSpring.Client.Client.ApiResponse<CreateSubmissionResponse> GeneratePDFWithHttpInfo(string templateId, CreateSubmissionData submission, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GeneratePDF");
            }

            // verify the required parameter 'submission' is set
            if (submission == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submission' when calling PDFApi->GeneratePDF");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = submission;

            localVarRequestOptions.Operation = "PDFApi.GeneratePDF";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSubmissionResponse>("/templates/{template_id}/submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePDF", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubmissionResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubmissionResponse> GeneratePDFAsync(string templateId, CreateSubmissionData submission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CreateSubmissionResponse> localVarResponse = await GeneratePDFWithHttpInfoAsync(templateId, submission, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a new PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="submission"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubmissionResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CreateSubmissionResponse>> GeneratePDFWithHttpInfoAsync(string templateId, CreateSubmissionData submission, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GeneratePDF");
            }

            // verify the required parameter 'submission' is set
            if (submission == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submission' when calling PDFApi->GeneratePDF");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = submission;

            localVarRequestOptions.Operation = "PDFApi.GeneratePDF";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSubmissionResponse>("/templates/{template_id}/submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePDF", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generated a preview PDF for partially completed data requests 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PreviewPdfResponse</returns>
        public PreviewPdfResponse GeneratePreview(string submissionId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<PreviewPdfResponse> localVarResponse = GeneratePreviewWithHttpInfo(submissionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generated a preview PDF for partially completed data requests 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PreviewPdfResponse</returns>
        public DocSpring.Client.Client.ApiResponse<PreviewPdfResponse> GeneratePreviewWithHttpInfo(string submissionId, int operationIndex = 0)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->GeneratePreview");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GeneratePreview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PreviewPdfResponse>("/submissions/{submission_id}/generate_preview", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generated a preview PDF for partially completed data requests 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreviewPdfResponse</returns>
        public async System.Threading.Tasks.Task<PreviewPdfResponse> GeneratePreviewAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<PreviewPdfResponse> localVarResponse = await GeneratePreviewWithHttpInfoAsync(submissionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generated a preview PDF for partially completed data requests 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreviewPdfResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<PreviewPdfResponse>> GeneratePreviewWithHttpInfoAsync(string submissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->GeneratePreview");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GeneratePreview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PreviewPdfResponse>("/submissions/{submission_id}/generate_preview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeneratePreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CombinedSubmission</returns>
        public CombinedSubmission GetCombinedSubmission(string combinedSubmissionId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<CombinedSubmission> localVarResponse = GetCombinedSubmissionWithHttpInfo(combinedSubmissionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CombinedSubmission</returns>
        public DocSpring.Client.Client.ApiResponse<CombinedSubmission> GetCombinedSubmissionWithHttpInfo(string combinedSubmissionId, int operationIndex = 0)
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->GetCombinedSubmission");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("combined_submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(combinedSubmissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetCombinedSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CombinedSubmission>("/combined_submissions/{combined_submission_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCombinedSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CombinedSubmission</returns>
        public async System.Threading.Tasks.Task<CombinedSubmission> GetCombinedSubmissionAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<CombinedSubmission> localVarResponse = await GetCombinedSubmissionWithHttpInfoAsync(combinedSubmissionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a combined submission (merged PDFs) 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="combinedSubmissionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CombinedSubmission)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<CombinedSubmission>> GetCombinedSubmissionWithHttpInfoAsync(string combinedSubmissionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'combinedSubmissionId' is set
            if (combinedSubmissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'combinedSubmissionId' when calling PDFApi->GetCombinedSubmission");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("combined_submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(combinedSubmissionId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetCombinedSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CombinedSubmission>("/combined_submissions/{combined_submission_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCombinedSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Look up a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmissionDataRequest</returns>
        public SubmissionDataRequest GetDataRequest(string dataRequestId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<SubmissionDataRequest> localVarResponse = GetDataRequestWithHttpInfo(dataRequestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Look up a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmissionDataRequest</returns>
        public DocSpring.Client.Client.ApiResponse<SubmissionDataRequest> GetDataRequestWithHttpInfo(string dataRequestId, int operationIndex = 0)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->GetDataRequest");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubmissionDataRequest>("/data_requests/{data_request_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Look up a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmissionDataRequest</returns>
        public async System.Threading.Tasks.Task<SubmissionDataRequest> GetDataRequestAsync(string dataRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<SubmissionDataRequest> localVarResponse = await GetDataRequestWithHttpInfoAsync(dataRequestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Look up a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmissionDataRequest)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<SubmissionDataRequest>> GetDataRequestWithHttpInfoAsync(string dataRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->GetDataRequest");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubmissionDataRequest>("/data_requests/{data_request_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the full template attributes 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FullTemplate</returns>
        public FullTemplate GetFullTemplate(string templateId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<FullTemplate> localVarResponse = GetFullTemplateWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the full template attributes 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FullTemplate</returns>
        public DocSpring.Client.Client.ApiResponse<FullTemplate> GetFullTemplateWithHttpInfo(string templateId, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetFullTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetFullTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FullTemplate>("/templates/{template_id}?full=true", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the full template attributes 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FullTemplate</returns>
        public async System.Threading.Tasks.Task<FullTemplate> GetFullTemplateAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<FullTemplate> localVarResponse = await GetFullTemplateWithHttpInfoAsync(templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the full template attributes 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FullTemplate)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<FullTemplate>> GetFullTemplateWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetFullTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetFullTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FullTemplate>("/templates/{template_id}?full=true", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadPresign</returns>
        public UploadPresign GetPresignUrl(int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<UploadPresign> localVarResponse = GetPresignUrlWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadPresign</returns>
        public DocSpring.Client.Client.ApiResponse<UploadPresign> GetPresignUrlWithHttpInfo(int operationIndex = 0)
        {
            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PDFApi.GetPresignUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UploadPresign>("/uploads/presign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPresignUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadPresign</returns>
        public async System.Threading.Tasks.Task<UploadPresign> GetPresignUrlAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<UploadPresign> localVarResponse = await GetPresignUrlWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a presigned URL so that you can upload a file to our AWS S3 bucket 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadPresign)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<UploadPresign>> GetPresignUrlWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PDFApi.GetPresignUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UploadPresign>("/uploads/presign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPresignUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Submission</returns>
        public Submission GetSubmission(string submissionId, bool? includeData = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Submission> localVarResponse = GetSubmissionWithHttpInfo(submissionId, includeData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Submission</returns>
        public DocSpring.Client.Client.ApiResponse<Submission> GetSubmissionWithHttpInfo(string submissionId, bool? includeData = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->GetSubmission");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionId)); // path parameter
            if (includeData != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_data", includeData));
            }

            localVarRequestOptions.Operation = "PDFApi.GetSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Submission>("/submissions/{submission_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Submission</returns>
        public async System.Threading.Tasks.Task<Submission> GetSubmissionAsync(string submissionId, bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Submission> localVarResponse = await GetSubmissionWithHttpInfoAsync(submissionId, includeData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a PDF 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionId"></param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Submission)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Submission>> GetSubmissionWithHttpInfoAsync(string submissionId, bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'submissionId' is set
            if (submissionId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionId' when calling PDFApi->GetSubmission");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionId)); // path parameter
            if (includeData != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_data", includeData));
            }

            localVarRequestOptions.Operation = "PDFApi.GetSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Submission>("/submissions/{submission_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of a submission batch job 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubmissionBatch</returns>
        public SubmissionBatch GetSubmissionBatch(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<SubmissionBatch> localVarResponse = GetSubmissionBatchWithHttpInfo(submissionBatchId, includeSubmissions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a submission batch job 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubmissionBatch</returns>
        public DocSpring.Client.Client.ApiResponse<SubmissionBatch> GetSubmissionBatchWithHttpInfo(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'submissionBatchId' is set
            if (submissionBatchId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionBatchId' when calling PDFApi->GetSubmissionBatch");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_batch_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionBatchId)); // path parameter
            if (includeSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_submissions", includeSubmissions));
            }

            localVarRequestOptions.Operation = "PDFApi.GetSubmissionBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubmissionBatch>("/submissions/batches/{submission_batch_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubmissionBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of a submission batch job 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmissionBatch</returns>
        public async System.Threading.Tasks.Task<SubmissionBatch> GetSubmissionBatchAsync(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<SubmissionBatch> localVarResponse = await GetSubmissionBatchWithHttpInfoAsync(submissionBatchId, includeSubmissions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of a submission batch job 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submissionBatchId"></param>
        /// <param name="includeSubmissions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmissionBatch)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<SubmissionBatch>> GetSubmissionBatchWithHttpInfoAsync(string submissionBatchId, bool? includeSubmissions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'submissionBatchId' is set
            if (submissionBatchId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'submissionBatchId' when calling PDFApi->GetSubmissionBatch");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("submission_batch_id", DocSpring.Client.Client.ClientUtils.ParameterToString(submissionBatchId)); // path parameter
            if (includeSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_submissions", includeSubmissions));
            }

            localVarRequestOptions.Operation = "PDFApi.GetSubmissionBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubmissionBatch>("/submissions/batches/{submission_batch_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubmissionBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of an uploaded template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Template</returns>
        public Template GetTemplate(string templateId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Template> localVarResponse = GetTemplateWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of an uploaded template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Template</returns>
        public DocSpring.Client.Client.ApiResponse<Template> GetTemplateWithHttpInfo(string templateId, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Template>("/templates/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of an uploaded template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> GetTemplateAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Template> localVarResponse = await GetTemplateWithHttpInfoAsync(templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of an uploaded template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Template>> GetTemplateWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Template>("/templates/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the JSON schema for a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TemplateSchema</returns>
        public TemplateSchema GetTemplateSchema(string templateId, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<TemplateSchema> localVarResponse = GetTemplateSchemaWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the JSON schema for a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TemplateSchema</returns>
        public DocSpring.Client.Client.ApiResponse<TemplateSchema> GetTemplateSchemaWithHttpInfo(string templateId, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetTemplateSchema");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetTemplateSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TemplateSchema>("/templates/{template_id}/schema", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplateSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the JSON schema for a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateSchema</returns>
        public async System.Threading.Tasks.Task<TemplateSchema> GetTemplateSchemaAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<TemplateSchema> localVarResponse = await GetTemplateSchemaWithHttpInfoAsync(templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the JSON schema for a template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateSchema)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<TemplateSchema>> GetTemplateSchemaWithHttpInfoAsync(string templateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->GetTemplateSchema");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            localVarRequestOptions.Operation = "PDFApi.GetTemplateSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TemplateSchema>("/templates/{template_id}/schema", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplateSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all combined submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CombinedSubmission&gt;</returns>
        public List<CombinedSubmission> ListCombinedSubmissions(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<List<CombinedSubmission>> localVarResponse = ListCombinedSubmissionsWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all combined submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CombinedSubmission&gt;</returns>
        public DocSpring.Client.Client.ApiResponse<List<CombinedSubmission>> ListCombinedSubmissionsWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "PDFApi.ListCombinedSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CombinedSubmission>>("/combined_submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCombinedSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all combined submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CombinedSubmission&gt;</returns>
        public async System.Threading.Tasks.Task<List<CombinedSubmission>> ListCombinedSubmissionsAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<List<CombinedSubmission>> localVarResponse = await ListCombinedSubmissionsWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all combined submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CombinedSubmission&gt;)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<List<CombinedSubmission>>> ListCombinedSubmissionsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "PDFApi.ListCombinedSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CombinedSubmission>>("/combined_submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCombinedSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all folders 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Folder&gt;</returns>
        public List<Folder> ListFolders(string parentFolderId = default(string), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<List<Folder>> localVarResponse = ListFoldersWithHttpInfo(parentFolderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all folders 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Folder&gt;</returns>
        public DocSpring.Client.Client.ApiResponse<List<Folder>> ListFoldersWithHttpInfo(string parentFolderId = default(string), int operationIndex = 0)
        {
            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (parentFolderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "parent_folder_id", parentFolderId));
            }

            localVarRequestOptions.Operation = "PDFApi.ListFolders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Folder>>("/folders/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all folders 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Folder&gt;</returns>
        public async System.Threading.Tasks.Task<List<Folder>> ListFoldersAsync(string parentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<List<Folder>> localVarResponse = await ListFoldersWithHttpInfoAsync(parentFolderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all folders 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Folder&gt;)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<List<Folder>>> ListFoldersWithHttpInfoAsync(string parentFolderId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (parentFolderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "parent_folder_id", parentFolderId));
            }

            localVarRequestOptions.Operation = "PDFApi.ListFolders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Folder>>("/folders/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubmissionsResponse</returns>
        public ListSubmissionsResponse ListSubmissions(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse> localVarResponse = ListSubmissionsWithHttpInfo(cursor, limit, createdAfter, createdBefore, type, includeData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubmissionsResponse</returns>
        public DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse> ListSubmissionsWithHttpInfo(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (includeData != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_data", includeData));
            }

            localVarRequestOptions.Operation = "PDFApi.ListSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSubmissionsResponse>("/submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubmissionsResponse</returns>
        public async System.Threading.Tasks.Task<ListSubmissionsResponse> ListSubmissionsAsync(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse> localVarResponse = await ListSubmissionsWithHttpInfoAsync(cursor, limit, createdAfter, createdBefore, type, includeData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all submissions 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubmissionsResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse>> ListSubmissionsWithHttpInfoAsync(string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (includeData != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_data", includeData));
            }

            localVarRequestOptions.Operation = "PDFApi.ListSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSubmissionsResponse>("/submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all submissions for a given template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubmissionsResponse</returns>
        public ListSubmissionsResponse ListTemplateSubmissions(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse> localVarResponse = ListTemplateSubmissionsWithHttpInfo(templateId, cursor, limit, createdAfter, createdBefore, type, includeData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all submissions for a given template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubmissionsResponse</returns>
        public DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse> ListTemplateSubmissionsWithHttpInfo(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->ListTemplateSubmissions");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (includeData != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_data", includeData));
            }

            localVarRequestOptions.Operation = "PDFApi.ListTemplateSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSubmissionsResponse>("/templates/{template_id}/submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTemplateSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all submissions for a given template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubmissionsResponse</returns>
        public async System.Threading.Tasks.Task<ListSubmissionsResponse> ListTemplateSubmissionsAsync(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse> localVarResponse = await ListTemplateSubmissionsWithHttpInfoAsync(templateId, cursor, limit, createdAfter, createdBefore, type, includeData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all submissions for a given template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="includeData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubmissionsResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<ListSubmissionsResponse>> ListTemplateSubmissionsWithHttpInfoAsync(string templateId, string cursor = default(string), decimal? limit = default(decimal?), string createdAfter = default(string), string createdBefore = default(string), string type = default(string), bool? includeData = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->ListTemplateSubmissions");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (includeData != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "include_data", includeData));
            }

            localVarRequestOptions.Operation = "PDFApi.ListTemplateSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSubmissionsResponse>("/templates/{template_id}/submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTemplateSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> ListTemplates(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<List<Template>> localVarResponse = ListTemplatesWithHttpInfo(query, parentFolderId, page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public DocSpring.Client.Client.ApiResponse<List<Template>> ListTemplatesWithHttpInfo(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (parentFolderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "parent_folder_id", parentFolderId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "PDFApi.ListTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Template>>("/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> ListTemplatesAsync(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<List<Template>> localVarResponse = await ListTemplatesWithHttpInfoAsync(query, parentFolderId, page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all templates 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Search By Name (optional)</param>
        /// <param name="parentFolderId">Filter By Folder Id (optional)</param>
        /// <param name="page">Default: 1 (optional)</param>
        /// <param name="perPage">Default: 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<List<Template>>> ListTemplatesWithHttpInfoAsync(string query = default(string), string parentFolderId = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (parentFolderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "parent_folder_id", parentFolderId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DocSpring.Client.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "PDFApi.ListTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Template>>("/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Folder</returns>
        public Folder MoveFolderToFolder(string folderId, MoveFolderData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = MoveFolderToFolderWithHttpInfo(folderId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Move a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Folder</returns>
        public DocSpring.Client.Client.ApiResponse<Folder> MoveFolderToFolderWithHttpInfo(string folderId, MoveFolderData data, int operationIndex = 0)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->MoveFolderToFolder");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->MoveFolderToFolder");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("folder_id", DocSpring.Client.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.MoveFolderToFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Folder>("/folders/{folder_id}/move", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveFolderToFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> MoveFolderToFolderAsync(string folderId, MoveFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Folder> localVarResponse = await MoveFolderToFolderWithHttpInfoAsync(folderId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Move a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Folder>> MoveFolderToFolderWithHttpInfoAsync(string folderId, MoveFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->MoveFolderToFolder");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->MoveFolderToFolder");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("folder_id", DocSpring.Client.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.MoveFolderToFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Folder>("/folders/{folder_id}/move", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveFolderToFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move Template to folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Template</returns>
        public Template MoveTemplateToFolder(string templateId, MoveTemplateData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<Template> localVarResponse = MoveTemplateToFolderWithHttpInfo(templateId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Move Template to folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Template</returns>
        public DocSpring.Client.Client.ApiResponse<Template> MoveTemplateToFolderWithHttpInfo(string templateId, MoveTemplateData data, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->MoveTemplateToFolder");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->MoveTemplateToFolder");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.MoveTemplateToFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Template>("/templates/{template_id}/move", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveTemplateToFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move Template to folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> MoveTemplateToFolderAsync(string templateId, MoveTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<Template> localVarResponse = await MoveTemplateToFolderWithHttpInfoAsync(templateId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Move Template to folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Template>> MoveTemplateToFolderWithHttpInfoAsync(string templateId, MoveTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->MoveTemplateToFolder");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->MoveTemplateToFolder");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.MoveTemplateToFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Template>("/templates/{template_id}/move", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveTemplateToFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublishTemplateVersionResponse</returns>
        public PublishTemplateVersionResponse PublishTemplateVersion(string templateId, PublishVersionData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<PublishTemplateVersionResponse> localVarResponse = PublishTemplateVersionWithHttpInfo(templateId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Publish a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublishTemplateVersionResponse</returns>
        public DocSpring.Client.Client.ApiResponse<PublishTemplateVersionResponse> PublishTemplateVersionWithHttpInfo(string templateId, PublishVersionData data, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->PublishTemplateVersion");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->PublishTemplateVersion");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.PublishTemplateVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PublishTemplateVersionResponse>("/templates/{template_id}/publish_version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublishTemplateVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublishTemplateVersionResponse</returns>
        public async System.Threading.Tasks.Task<PublishTemplateVersionResponse> PublishTemplateVersionAsync(string templateId, PublishVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<PublishTemplateVersionResponse> localVarResponse = await PublishTemplateVersionWithHttpInfoAsync(templateId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Publish a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublishTemplateVersionResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<PublishTemplateVersionResponse>> PublishTemplateVersionWithHttpInfoAsync(string templateId, PublishVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->PublishTemplateVersion");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->PublishTemplateVersion");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.PublishTemplateVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PublishTemplateVersionResponse>("/templates/{template_id}/publish_version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublishTemplateVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RenameFolder(string folderId, RenameFolderData data, int operationIndex = 0)
        {
            RenameFolderWithHttpInfo(folderId, data);
        }

        /// <summary>
        /// Rename a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DocSpring.Client.Client.ApiResponse<Object> RenameFolderWithHttpInfo(string folderId, RenameFolderData data, int operationIndex = 0)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->RenameFolder");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->RenameFolder");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("folder_id", DocSpring.Client.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.RenameFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/folders/{folder_id}/rename", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RenameFolderAsync(string folderId, RenameFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RenameFolderWithHttpInfoAsync(folderId, data, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Rename a folder 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<Object>> RenameFolderWithHttpInfoAsync(string folderId, RenameFolderData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'folderId' when calling PDFApi->RenameFolder");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->RenameFolder");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("folder_id", DocSpring.Client.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.RenameFolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/folders/{folder_id}/rename", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestoreTemplateVersionResponse</returns>
        public RestoreTemplateVersionResponse RestoreTemplateVersion(string templateId, RestoreVersionData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<RestoreTemplateVersionResponse> localVarResponse = RestoreTemplateVersionWithHttpInfo(templateId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestoreTemplateVersionResponse</returns>
        public DocSpring.Client.Client.ApiResponse<RestoreTemplateVersionResponse> RestoreTemplateVersionWithHttpInfo(string templateId, RestoreVersionData data, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->RestoreTemplateVersion");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->RestoreTemplateVersion");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.RestoreTemplateVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestoreTemplateVersionResponse>("/templates/{template_id}/restore_version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreTemplateVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestoreTemplateVersionResponse</returns>
        public async System.Threading.Tasks.Task<RestoreTemplateVersionResponse> RestoreTemplateVersionAsync(string templateId, RestoreVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<RestoreTemplateVersionResponse> localVarResponse = await RestoreTemplateVersionWithHttpInfoAsync(templateId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore a template version 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestoreTemplateVersionResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<RestoreTemplateVersionResponse>> RestoreTemplateVersionWithHttpInfoAsync(string templateId, RestoreVersionData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->RestoreTemplateVersion");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->RestoreTemplateVersion");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.RestoreTemplateVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestoreTemplateVersionResponse>("/templates/{template_id}/restore_version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreTemplateVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthenticationSuccessResponse</returns>
        public AuthenticationSuccessResponse TestAuthentication(int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<AuthenticationSuccessResponse> localVarResponse = TestAuthenticationWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthenticationSuccessResponse</returns>
        public DocSpring.Client.Client.ApiResponse<AuthenticationSuccessResponse> TestAuthenticationWithHttpInfo(int operationIndex = 0)
        {
            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PDFApi.TestAuthentication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthenticationSuccessResponse>("/authentication", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestAuthentication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationSuccessResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticationSuccessResponse> TestAuthenticationAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<AuthenticationSuccessResponse> localVarResponse = await TestAuthenticationWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test Authentication 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<AuthenticationSuccessResponse>> TestAuthenticationWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PDFApi.TestAuthentication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthenticationSuccessResponse>("/authentication", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestAuthentication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateDataRequestResponse</returns>
        public UpdateDataRequestResponse UpdateDataRequest(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<UpdateDataRequestResponse> localVarResponse = UpdateDataRequestWithHttpInfo(dataRequestId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateDataRequestResponse</returns>
        public DocSpring.Client.Client.ApiResponse<UpdateDataRequestResponse> UpdateDataRequestWithHttpInfo(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0)
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->UpdateDataRequest");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->UpdateDataRequest");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.UpdateDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateDataRequestResponse>("/data_requests/{data_request_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateDataRequestResponse</returns>
        public async System.Threading.Tasks.Task<UpdateDataRequestResponse> UpdateDataRequestAsync(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<UpdateDataRequestResponse> localVarResponse = await UpdateDataRequestWithHttpInfoAsync(dataRequestId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a submission data request 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequestId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateDataRequestResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<UpdateDataRequestResponse>> UpdateDataRequestWithHttpInfoAsync(string dataRequestId, UpdateSubmissionDataRequestData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'dataRequestId' is set
            if (dataRequestId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'dataRequestId' when calling PDFApi->UpdateDataRequest");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->UpdateDataRequest");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_request_id", DocSpring.Client.Client.ClientUtils.ParameterToString(dataRequestId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.UpdateDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateDataRequestResponse>("/data_requests/{data_request_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateTemplateResponse</returns>
        public UpdateTemplateResponse UpdateTemplate(string templateId, UpdateTemplateData data, int operationIndex = 0)
        {
            DocSpring.Client.Client.ApiResponse<UpdateTemplateResponse> localVarResponse = UpdateTemplateWithHttpInfo(templateId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateTemplateResponse</returns>
        public DocSpring.Client.Client.ApiResponse<UpdateTemplateResponse> UpdateTemplateWithHttpInfo(string templateId, UpdateTemplateData data, int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->UpdateTemplate");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->UpdateTemplate");
            }

            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.UpdateTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateTemplateResponse>("/templates/{template_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTemplateResponse</returns>
        public async System.Threading.Tasks.Task<UpdateTemplateResponse> UpdateTemplateAsync(string templateId, UpdateTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DocSpring.Client.Client.ApiResponse<UpdateTemplateResponse> localVarResponse = await UpdateTemplateWithHttpInfoAsync(templateId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Template 
        /// </summary>
        /// <exception cref="DocSpring.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="data"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<DocSpring.Client.Client.ApiResponse<UpdateTemplateResponse>> UpdateTemplateWithHttpInfoAsync(string templateId, UpdateTemplateData data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'templateId' when calling PDFApi->UpdateTemplate");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new DocSpring.Client.Client.ApiException(400, "Missing required parameter 'data' when calling PDFApi->UpdateTemplate");
            }


            DocSpring.Client.Client.RequestOptions localVarRequestOptions = new DocSpring.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DocSpring.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DocSpring.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("template_id", DocSpring.Client.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "PDFApi.UpdateTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_token_basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + DocSpring.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateTemplateResponse>("/templates/{template_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
