/* 
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using DocSpring.Client.Client;
using DocSpring.Client.Api;
using DocSpring.Client.Model;

namespace DocSpring.Client.Test
{
    /// <summary>
    ///  Class for testing PDFApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PDFApiTests
    {
        private PDFApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PDFApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PDFApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PDFApi
            //Assert.IsInstanceOfType(typeof(PDFApi), instance, "instance is a PDFApi");
        }

        
        /// <summary>
        /// Test BatchGeneratePdfV1
        /// </summary>
        [Test]
        public void BatchGeneratePdfV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //List<Object> requestBody = null;
            //var response = instance.BatchGeneratePdfV1(templateId, requestBody);
            //Assert.IsInstanceOf<List<CreateSubmissionResponse>> (response, "response is List<CreateSubmissionResponse>");
        }
        
        /// <summary>
        /// Test BatchGeneratePdfs
        /// </summary>
        [Test]
        public void BatchGeneratePdfsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubmissionBatchData submissionBatchData = null;
            //var response = instance.BatchGeneratePdfs(submissionBatchData);
            //Assert.IsInstanceOf<CreateSubmissionBatchResponse> (response, "response is CreateSubmissionBatchResponse");
        }
        
        /// <summary>
        /// Test CombinePdfs
        /// </summary>
        [Test]
        public void CombinePdfsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CombinePdfsData combinePdfsData = null;
            //var response = instance.CombinePdfs(combinePdfsData);
            //Assert.IsInstanceOf<CreateCombinedSubmissionResponse> (response, "response is CreateCombinedSubmissionResponse");
        }
        
        /// <summary>
        /// Test CombineSubmissions
        /// </summary>
        [Test]
        public void CombineSubmissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CombinedSubmissionData combinedSubmissionData = null;
            //var response = instance.CombineSubmissions(combinedSubmissionData);
            //Assert.IsInstanceOf<CreateCombinedSubmissionResponse> (response, "response is CreateCombinedSubmissionResponse");
        }
        
        /// <summary>
        /// Test CreateCustomFileFromUpload
        /// </summary>
        [Test]
        public void CreateCustomFileFromUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateCustomFileData createCustomFileData = null;
            //var response = instance.CreateCustomFileFromUpload(createCustomFileData);
            //Assert.IsInstanceOf<CreateCustomFileResponse> (response, "response is CreateCustomFileResponse");
        }
        
        /// <summary>
        /// Test CreateDataRequestToken
        /// </summary>
        [Test]
        public void CreateDataRequestTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataRequestId = null;
            //var response = instance.CreateDataRequestToken(dataRequestId);
            //Assert.IsInstanceOf<CreateSubmissionDataRequestTokenResponse> (response, "response is CreateSubmissionDataRequestTokenResponse");
        }
        
        /// <summary>
        /// Test CreateFolder
        /// </summary>
        [Test]
        public void CreateFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateFolderData createFolderData = null;
            //var response = instance.CreateFolder(createFolderData);
            //Assert.IsInstanceOf<Folder> (response, "response is Folder");
        }
        
        /// <summary>
        /// Test CreateTemplate
        /// </summary>
        [Test]
        public void CreateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream templateDocument = null;
            //string templateName = null;
            //string templateParentFolderId = null;
            //var response = instance.CreateTemplate(templateDocument, templateName, templateParentFolderId);
            //Assert.IsInstanceOf<PendingTemplate> (response, "response is PendingTemplate");
        }
        
        /// <summary>
        /// Test CreateTemplateFromUpload
        /// </summary>
        [Test]
        public void CreateTemplateFromUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateTemplateData createTemplateData = null;
            //var response = instance.CreateTemplateFromUpload(createTemplateData);
            //Assert.IsInstanceOf<PendingTemplate> (response, "response is PendingTemplate");
        }
        
        /// <summary>
        /// Test DeleteFolder
        /// </summary>
        [Test]
        public void DeleteFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string folderId = null;
            //var response = instance.DeleteFolder(folderId);
            //Assert.IsInstanceOf<Folder> (response, "response is Folder");
        }
        
        /// <summary>
        /// Test ExpireCombinedSubmission
        /// </summary>
        [Test]
        public void ExpireCombinedSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string combinedSubmissionId = null;
            //var response = instance.ExpireCombinedSubmission(combinedSubmissionId);
            //Assert.IsInstanceOf<CombinedSubmission> (response, "response is CombinedSubmission");
        }
        
        /// <summary>
        /// Test ExpireSubmission
        /// </summary>
        [Test]
        public void ExpireSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string submissionId = null;
            //var response = instance.ExpireSubmission(submissionId);
            //Assert.IsInstanceOf<Submission> (response, "response is Submission");
        }
        
        /// <summary>
        /// Test GeneratePDF
        /// </summary>
        [Test]
        public void GeneratePDFTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //SubmissionData submissionData = null;
            //var response = instance.GeneratePDF(templateId, submissionData);
            //Assert.IsInstanceOf<CreateSubmissionResponse> (response, "response is CreateSubmissionResponse");
        }
        
        /// <summary>
        /// Test GetCombinedSubmission
        /// </summary>
        [Test]
        public void GetCombinedSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string combinedSubmissionId = null;
            //var response = instance.GetCombinedSubmission(combinedSubmissionId);
            //Assert.IsInstanceOf<CombinedSubmission> (response, "response is CombinedSubmission");
        }
        
        /// <summary>
        /// Test GetDataRequest
        /// </summary>
        [Test]
        public void GetDataRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataRequestId = null;
            //var response = instance.GetDataRequest(dataRequestId);
            //Assert.IsInstanceOf<SubmissionDataRequest> (response, "response is SubmissionDataRequest");
        }
        
        /// <summary>
        /// Test GetPresignUrl
        /// </summary>
        [Test]
        public void GetPresignUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPresignUrl();
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test GetSubmission
        /// </summary>
        [Test]
        public void GetSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string submissionId = null;
            //bool? includeData = null;
            //var response = instance.GetSubmission(submissionId, includeData);
            //Assert.IsInstanceOf<Submission> (response, "response is Submission");
        }
        
        /// <summary>
        /// Test GetSubmissionBatch
        /// </summary>
        [Test]
        public void GetSubmissionBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string submissionBatchId = null;
            //bool? includeSubmissions = null;
            //var response = instance.GetSubmissionBatch(submissionBatchId, includeSubmissions);
            //Assert.IsInstanceOf<SubmissionBatch> (response, "response is SubmissionBatch");
        }
        
        /// <summary>
        /// Test GetTemplate
        /// </summary>
        [Test]
        public void GetTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //var response = instance.GetTemplate(templateId);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test GetTemplateSchema
        /// </summary>
        [Test]
        public void GetTemplateSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //var response = instance.GetTemplateSchema(templateId);
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test ListFolders
        /// </summary>
        [Test]
        public void ListFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentFolderId = null;
            //var response = instance.ListFolders(parentFolderId);
            //Assert.IsInstanceOf<List<Folder>> (response, "response is List<Folder>");
        }
        
        /// <summary>
        /// Test ListTemplates
        /// </summary>
        [Test]
        public void ListTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //string parentFolderId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListTemplates(query, parentFolderId, page, perPage);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test MoveFolderToFolder
        /// </summary>
        [Test]
        public void MoveFolderToFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string folderId = null;
            //MoveFolderData moveFolderData = null;
            //var response = instance.MoveFolderToFolder(folderId, moveFolderData);
            //Assert.IsInstanceOf<Folder> (response, "response is Folder");
        }
        
        /// <summary>
        /// Test MoveTemplateToFolder
        /// </summary>
        [Test]
        public void MoveTemplateToFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //MoveTemplateData moveTemplateData = null;
            //var response = instance.MoveTemplateToFolder(templateId, moveTemplateData);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test RenameFolder
        /// </summary>
        [Test]
        public void RenameFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string folderId = null;
            //RenameFolderData renameFolderData = null;
            //instance.RenameFolder(folderId, renameFolderData);
            
        }
        
        /// <summary>
        /// Test TestAuthentication
        /// </summary>
        [Test]
        public void TestAuthenticationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TestAuthentication();
            //Assert.IsInstanceOf<AuthenticationSuccessResponse> (response, "response is AuthenticationSuccessResponse");
        }
        
        /// <summary>
        /// Test UpdateDataRequest
        /// </summary>
        [Test]
        public void UpdateDataRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataRequestId = null;
            //UpdateSubmissionDataRequestData updateSubmissionDataRequestData = null;
            //var response = instance.UpdateDataRequest(dataRequestId, updateSubmissionDataRequestData);
            //Assert.IsInstanceOf<UpdateDataRequestResponse> (response, "response is UpdateDataRequestResponse");
        }
        
    }

}
