/*
 * API v1
 *
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using DocSpring.Client.Client;
using DocSpring.Client.Api;
// uncomment below to import models
//using DocSpring.Client.Model;

namespace DocSpring.Client.Test.Api
{
    /// <summary>
    ///  Class for testing PDFApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PDFApiTests : IDisposable
    {
        private PDFApi instance;

        public PDFApiTests()
        {
            instance = new PDFApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PDFApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PDFApi
            //Assert.IsType<PDFApi>(instance);
        }

        /// <summary>
        /// Test AddFieldsToTemplate
        /// </summary>
        [Fact]
        public void AddFieldsToTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //AddFieldsData data = null;
            //var response = instance.AddFieldsToTemplate(templateId, data);
            //Assert.IsType<AddFieldsTemplateResponse>(response);
        }

        /// <summary>
        /// Test BatchGeneratePdfV1
        /// </summary>
        [Fact]
        public void BatchGeneratePdfV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //List<SubmissionData> data = null;
            //var response = instance.BatchGeneratePdfV1(templateId, data);
            //Assert.IsType<List<CreateSubmissionResponse>>(response);
        }

        /// <summary>
        /// Test BatchGeneratePdfs
        /// </summary>
        [Fact]
        public void BatchGeneratePdfsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubmissionBatchData data = null;
            //var response = instance.BatchGeneratePdfs(data);
            //Assert.IsType<CreateSubmissionBatchResponse>(response);
        }

        /// <summary>
        /// Test CombinePdfs
        /// </summary>
        [Fact]
        public void CombinePdfsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CombinePdfsData data = null;
            //var response = instance.CombinePdfs(data);
            //Assert.IsType<CreateCombinedSubmissionResponse>(response);
        }

        /// <summary>
        /// Test CombineSubmissions
        /// </summary>
        [Fact]
        public void CombineSubmissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CombinedSubmissionData data = null;
            //var response = instance.CombineSubmissions(data);
            //Assert.IsType<CreateCombinedSubmissionResponse>(response);
        }

        /// <summary>
        /// Test CopyTemplate
        /// </summary>
        [Fact]
        public void CopyTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //CopyTemplateData data = null;
            //var response = instance.CopyTemplate(templateId, data);
            //Assert.IsType<Template>(response);
        }

        /// <summary>
        /// Test CreateCustomFileFromUpload
        /// </summary>
        [Fact]
        public void CreateCustomFileFromUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateCustomFileData data = null;
            //var response = instance.CreateCustomFileFromUpload(data);
            //Assert.IsType<CreateCustomFileResponse>(response);
        }

        /// <summary>
        /// Test CreateDataRequestEvent
        /// </summary>
        [Fact]
        public void CreateDataRequestEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataRequestId = null;
            //CreateSubmissionDataRequestEventRequest varEvent = null;
            //var response = instance.CreateDataRequestEvent(dataRequestId, varEvent);
            //Assert.IsType<CreateSubmissionDataRequestEventResponse>(response);
        }

        /// <summary>
        /// Test CreateDataRequestToken
        /// </summary>
        [Fact]
        public void CreateDataRequestTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataRequestId = null;
            //var response = instance.CreateDataRequestToken(dataRequestId);
            //Assert.IsType<CreateSubmissionDataRequestTokenResponse>(response);
        }

        /// <summary>
        /// Test CreateFolder
        /// </summary>
        [Fact]
        public void CreateFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateFolderData data = null;
            //var response = instance.CreateFolder(data);
            //Assert.IsType<Folder>(response);
        }

        /// <summary>
        /// Test CreateHTMLTemplate
        /// </summary>
        [Fact]
        public void CreateHTMLTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateHtmlTemplateData data = null;
            //var response = instance.CreateHTMLTemplate(data);
            //Assert.IsType<PendingTemplate>(response);
        }

        /// <summary>
        /// Test CreatePDFTemplate
        /// </summary>
        [Fact]
        public void CreatePDFTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream templateDocument = null;
            //string templateName = null;
            //string templateParentFolderId = null;
            //var response = instance.CreatePDFTemplate(templateDocument, templateName, templateParentFolderId);
            //Assert.IsType<PendingTemplate>(response);
        }

        /// <summary>
        /// Test CreatePDFTemplateFromUpload
        /// </summary>
        [Fact]
        public void CreatePDFTemplateFromUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateTemplateFromUploadData data = null;
            //var response = instance.CreatePDFTemplateFromUpload(data);
            //Assert.IsType<PendingTemplate>(response);
        }

        /// <summary>
        /// Test DeleteFolder
        /// </summary>
        [Fact]
        public void DeleteFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string folderId = null;
            //var response = instance.DeleteFolder(folderId);
            //Assert.IsType<Folder>(response);
        }

        /// <summary>
        /// Test DeleteTemplate
        /// </summary>
        [Fact]
        public void DeleteTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //string version = null;
            //var response = instance.DeleteTemplate(templateId, version);
            //Assert.IsType<DeleteTemplateResponse>(response);
        }

        /// <summary>
        /// Test ExpireCombinedSubmission
        /// </summary>
        [Fact]
        public void ExpireCombinedSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string combinedSubmissionId = null;
            //var response = instance.ExpireCombinedSubmission(combinedSubmissionId);
            //Assert.IsType<CombinedSubmission>(response);
        }

        /// <summary>
        /// Test ExpireSubmission
        /// </summary>
        [Fact]
        public void ExpireSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string submissionId = null;
            //var response = instance.ExpireSubmission(submissionId);
            //Assert.IsType<Submission>(response);
        }

        /// <summary>
        /// Test GeneratePDF
        /// </summary>
        [Fact]
        public void GeneratePDFTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //CreateSubmissionData submission = null;
            //var response = instance.GeneratePDF(templateId, submission);
            //Assert.IsType<CreateSubmissionResponse>(response);
        }

        /// <summary>
        /// Test GeneratePreview
        /// </summary>
        [Fact]
        public void GeneratePreviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string submissionId = null;
            //var response = instance.GeneratePreview(submissionId);
            //Assert.IsType<PreviewPdfResponse>(response);
        }

        /// <summary>
        /// Test GetCombinedSubmission
        /// </summary>
        [Fact]
        public void GetCombinedSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string combinedSubmissionId = null;
            //var response = instance.GetCombinedSubmission(combinedSubmissionId);
            //Assert.IsType<CombinedSubmission>(response);
        }

        /// <summary>
        /// Test GetDataRequest
        /// </summary>
        [Fact]
        public void GetDataRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataRequestId = null;
            //var response = instance.GetDataRequest(dataRequestId);
            //Assert.IsType<SubmissionDataRequest>(response);
        }

        /// <summary>
        /// Test GetFullTemplate
        /// </summary>
        [Fact]
        public void GetFullTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //var response = instance.GetFullTemplate(templateId);
            //Assert.IsType<FullTemplate>(response);
        }

        /// <summary>
        /// Test GetPresignUrl
        /// </summary>
        [Fact]
        public void GetPresignUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPresignUrl();
            //Assert.IsType<UploadPresign>(response);
        }

        /// <summary>
        /// Test GetSubmission
        /// </summary>
        [Fact]
        public void GetSubmissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string submissionId = null;
            //bool? includeData = null;
            //var response = instance.GetSubmission(submissionId, includeData);
            //Assert.IsType<Submission>(response);
        }

        /// <summary>
        /// Test GetSubmissionBatch
        /// </summary>
        [Fact]
        public void GetSubmissionBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string submissionBatchId = null;
            //bool? includeSubmissions = null;
            //var response = instance.GetSubmissionBatch(submissionBatchId, includeSubmissions);
            //Assert.IsType<SubmissionBatch>(response);
        }

        /// <summary>
        /// Test GetTemplate
        /// </summary>
        [Fact]
        public void GetTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //var response = instance.GetTemplate(templateId);
            //Assert.IsType<Template>(response);
        }

        /// <summary>
        /// Test GetTemplateSchema
        /// </summary>
        [Fact]
        public void GetTemplateSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //var response = instance.GetTemplateSchema(templateId);
            //Assert.IsType<TemplateSchema>(response);
        }

        /// <summary>
        /// Test ListCombinedSubmissions
        /// </summary>
        [Fact]
        public void ListCombinedSubmissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListCombinedSubmissions(page, perPage);
            //Assert.IsType<List<CombinedSubmission>>(response);
        }

        /// <summary>
        /// Test ListFolders
        /// </summary>
        [Fact]
        public void ListFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentFolderId = null;
            //var response = instance.ListFolders(parentFolderId);
            //Assert.IsType<List<Folder>>(response);
        }

        /// <summary>
        /// Test ListSubmissions
        /// </summary>
        [Fact]
        public void ListSubmissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cursor = null;
            //decimal? limit = null;
            //string createdAfter = null;
            //string createdBefore = null;
            //string type = null;
            //bool? includeData = null;
            //var response = instance.ListSubmissions(cursor, limit, createdAfter, createdBefore, type, includeData);
            //Assert.IsType<ListSubmissionsResponse>(response);
        }

        /// <summary>
        /// Test ListTemplateSubmissions
        /// </summary>
        [Fact]
        public void ListTemplateSubmissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //string cursor = null;
            //decimal? limit = null;
            //string createdAfter = null;
            //string createdBefore = null;
            //string type = null;
            //bool? includeData = null;
            //var response = instance.ListTemplateSubmissions(templateId, cursor, limit, createdAfter, createdBefore, type, includeData);
            //Assert.IsType<ListSubmissionsResponse>(response);
        }

        /// <summary>
        /// Test ListTemplates
        /// </summary>
        [Fact]
        public void ListTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //string parentFolderId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListTemplates(query, parentFolderId, page, perPage);
            //Assert.IsType<List<Template>>(response);
        }

        /// <summary>
        /// Test MoveFolderToFolder
        /// </summary>
        [Fact]
        public void MoveFolderToFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string folderId = null;
            //MoveFolderData data = null;
            //var response = instance.MoveFolderToFolder(folderId, data);
            //Assert.IsType<Folder>(response);
        }

        /// <summary>
        /// Test MoveTemplateToFolder
        /// </summary>
        [Fact]
        public void MoveTemplateToFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //MoveTemplateData data = null;
            //var response = instance.MoveTemplateToFolder(templateId, data);
            //Assert.IsType<Template>(response);
        }

        /// <summary>
        /// Test PublishTemplateVersion
        /// </summary>
        [Fact]
        public void PublishTemplateVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //PublishVersionData data = null;
            //var response = instance.PublishTemplateVersion(templateId, data);
            //Assert.IsType<PublishTemplateVersionResponse>(response);
        }

        /// <summary>
        /// Test RenameFolder
        /// </summary>
        [Fact]
        public void RenameFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string folderId = null;
            //RenameFolderData data = null;
            //instance.RenameFolder(folderId, data);
        }

        /// <summary>
        /// Test RestoreTemplateVersion
        /// </summary>
        [Fact]
        public void RestoreTemplateVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //RestoreVersionData data = null;
            //var response = instance.RestoreTemplateVersion(templateId, data);
            //Assert.IsType<RestoreTemplateVersionResponse>(response);
        }

        /// <summary>
        /// Test TestAuthentication
        /// </summary>
        [Fact]
        public void TestAuthenticationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TestAuthentication();
            //Assert.IsType<AuthenticationSuccessResponse>(response);
        }

        /// <summary>
        /// Test UpdateDataRequest
        /// </summary>
        [Fact]
        public void UpdateDataRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dataRequestId = null;
            //UpdateSubmissionDataRequestData data = null;
            //var response = instance.UpdateDataRequest(dataRequestId, data);
            //Assert.IsType<UpdateDataRequestResponse>(response);
        }

        /// <summary>
        /// Test UpdateTemplate
        /// </summary>
        [Fact]
        public void UpdateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //UpdateTemplateData data = null;
            //var response = instance.UpdateTemplate(templateId, data);
            //Assert.IsType<UpdateTemplateResponse>(response);
        }
    }
}
